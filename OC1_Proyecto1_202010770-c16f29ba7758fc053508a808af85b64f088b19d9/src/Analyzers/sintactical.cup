package Analyzers ;
import java_cup.runtime.*;
import java.util.ArrayList;
import proyecto1_oc1_202010770.tabla_de_simbolos;
import proyecto1_oc1_202010770.operaciones_aritmeticas;
import proyecto1_oc1_202010770.lista;
import java.util.Scanner;
parser code

{:
    public ArrayList<proyecto1_oc1_202010770.tabla_de_simbolos> tabla_simbolos = new ArrayList<>();
    public ArrayList<proyecto1_oc1_202010770.lista> lista_de_elementos = new ArrayList<>();
    public proyecto1_oc1_202010770.operaciones_aritmeticas operaciones = new operaciones_aritmeticas();
    public String datos_en_lista = "";
 
    public int num_global = 0;
    public void syntax_error(Symbol s){
        System.out.println("Error Sintactico: "+ s.value +" Linea "+(s.right+1)+" columna "+(s.left+1)+"\n"  );
    }

    public void unrecovered_syntax_error(Symbol s) throws java.lang.Exception{ 
        System.out.println("Error de sintaxis no se pudo terminar de analizar: "+ s.value +" Linea "+(s.right+1)+" columna "+(s.left+1)+"\n" );
        
}
:}

terminal String VAR, VARIABLE, DOUBLE, CADENA, ARREGLO, ARROBA;
terminal String DOS_PUNTOS, SLASH_MENOR, SLASH_MAYOR, DIAGONAL, COMMA, PARENTESIS_ABIERTO, PARENTESIS_CERRADO, CORCHETE_ABIERTO, CORCHETE_CERRADO;
terminal String SUMA, RESTA, MULTIPLICACION, DIVISION, MODULO, MEDIA, MEDIANA, MODA, VARIANZA, MAX, MIN; 
terminal String CONSOLE, PRINT, IGUAL, COLUMN, END, PROGRAM, CADENAS, NUMERO_FLOTANTE, NUMERO_ENTERO, PUNTO_Y_COMA;
terminal String EXEC, TITULO, EJE_X, EJE_Y, TITULO_X, TITULO_Y, VALUES, LABEL;

non terminal inicio, instruccion, lista_de_instrucciones, asignacion, tipo_de_dato, dato, lista, datos_de_lista;


start with inicio;

inicio ::= PROGRAM instruccion END PROGRAM
        error;

instruccion ::= lista_de_instrucciones instruccion
                |lista_de_instrucciones;

lista_de_instrucciones ::= asignacion
                        |lista
                        ;

asignacion ::= VAR DOS_PUNTOS tipo_de_dato:a DOS_PUNTOS DOS_PUNTOS VARIABLE:b SLASH_MENOR DIAGONAL dato:c END PUNTO_Y_COMA
    {:
            System.out.println(b+"jkldajkds");
            tabla_simbolos.add(new proyecto1_oc1_202010770.tabla_de_simbolos(a.toString(),b.toString(),c.toString()));
            for (proyecto1_oc1_202010770.tabla_de_simbolos simbolo : tabla_simbolos) {
            System.out.println("Tipo: " + simbolo.tipo + ", Variable: " + simbolo.variable + ", Dato: " + simbolo.dato);
        }
    :};

lista ::= ARREGLO DOS_PUNTOS tipo_de_dato:tipo DOS_PUNTOS DOS_PUNTOS ARROBA VARIABLE:var SLASH_MENOR DIAGONAL CORCHETE_ABIERTO datos_de_lista CORCHETE_CERRADO END PUNTO_Y_COMA
{:
        //Se agrega el nombre de la variable
        String vals = var.toString();
        lista_de_elementos.add(new proyecto1_oc1_202010770.lista(vals));
        double numero = 0.0;
        Scanner scanner = new Scanner(datos_en_lista);
        if(tipo.toString().equals("double")){
        
        while (scanner.hasNext()) {
            
            String numeroStr = scanner.next();
            numero = Double.parseDouble(numeroStr);
            System.out.println(var.toString() +": "+numero);
            for (proyecto1_oc1_202010770.lista elemento : lista_de_elementos) {
                System.out.println("Variable: " + elemento.variable);
                if(elemento.variable.equals(vals)){
                    elemento.agregarElemento(tipo.toString(),vals, numero);
                }
                elemento.mostrarElementos();
            }
        }}else{
        while (scanner.hasNext()) {
            
            String numeroStr = scanner.next();
            
            
            System.out.println(var.toString() +": "+numero);
            for (proyecto1_oc1_202010770.lista elemento : lista_de_elementos) {
                System.out.println("Variable: " + elemento.variable);
                if(elemento.variable.equals(vals)){
                    elemento.agregarElemento(tipo.toString(),vals, numeroStr);
                }
                elemento.mostrarElementos();
            }
        }
        }

        //Se limpia la variable con los datos
        datos_en_lista = "";

:}
;

tipo_de_dato ::= DOUBLE{:RESULT = "double"; :}
                | CADENA{:RESULT = "cadena"; :};



datos_de_lista ::= datos_de_lista:a COMMA dato:b {: datos_en_lista += " "+b.toString(); RESULT = b;System.out.println(datos_en_lista);:}
                 | dato:a {:datos_en_lista += " "+a.toString();  RESULT = a;:}
                 ;

dato ::= CADENAS:datos {:
        String salida = "";
        if (datos.toString().startsWith("\"") && datos.toString().endsWith("\"")) {
            // Quitar las comillas usando substring
            salida = datos.toString().substring(1, datos.length() - 1);
            System.out.println(salida +" ajkddjfksa");
            RESULT = salida;
        }else{
        RESULT = datos.toString();
        } :}
    | NUMERO_FLOTANTE:datos {:RESULT = datos.toString(); :}
    | NUMERO_ENTERO:datos {:RESULT = datos.toString(); :}
    | VARIABLE: datos {:
        String variable_a_buscar = datos.toString();
        for (proyecto1_oc1_202010770.tabla_de_simbolos simbolo : tabla_simbolos){
            if(variable_a_buscar.equals(simbolo.variable)){
            RESULT = simbolo.dato;
            break;
            }
        }
    :}
    | SUMA PARENTESIS_ABIERTO dato:izq COMMA dato:der PARENTESIS_CERRADO {:
    System.out.println("Suma"+izq.toString() +" "+der.toString() );
    System.out.println(operaciones.Suma(izq.toString(), der.toString()));
    RESULT = operaciones.Suma(izq.toString(), der.toString());
    :}
    | RESTA PARENTESIS_ABIERTO dato:izq COMMA dato:der PARENTESIS_CERRADO {:
    System.out.println("Resta"+izq.toString() +" "+der.toString() );
    System.out.println(operaciones.Resta(izq.toString(), der.toString()));
    RESULT = operaciones.Resta(izq.toString(), der.toString());
    :}
    | MULTIPLICACION PARENTESIS_ABIERTO dato:izq COMMA dato:der PARENTESIS_CERRADO {:
    System.out.println("Multiplicacion"+izq.toString() +" "+der.toString() );
    System.out.println(operaciones.Suma(izq.toString(), der.toString()));
    RESULT = operaciones.Multiplicacion(izq.toString(), der.toString());
    :}
    | DIVISION PARENTESIS_ABIERTO dato:izq COMMA dato:der PARENTESIS_CERRADO {:
    System.out.println("Division"+izq.toString() +" "+der.toString() );
    System.out.println(operaciones.Suma(izq.toString(), der.toString()));
    RESULT = operaciones.Division(izq.toString(), der.toString());
    :}
    | MODULO PARENTESIS_ABIERTO dato:izq COMMA dato:der PARENTESIS_CERRADO {:
    System.out.println("Modulo"+izq.toString() +" "+der.toString() );
    System.out.println(operaciones.Suma(izq.toString(), der.toString()));
    RESULT = operaciones.Modulo(izq.toString(), der.toString());
    :};

    



//----------------------------------------------------
// The following code was generated by CUP v0.11b 20160615 (GIT 4ac7450)
//----------------------------------------------------

package Analyzers;

import java_cup.runtime.*;
import java.util.ArrayList;
import proyecto1_oc1_202010770.tabla_de_simbolos;
import proyecto1_oc1_202010770.operaciones_aritmeticas;
import proyecto1_oc1_202010770.Impresion;
import proyecto1_oc1_202010770.lista;
import java.util.Scanner;
import java_cup.runtime.XMLElement;

/** CUP v0.11b 20160615 (GIT 4ac7450) generated parser.
  */
@SuppressWarnings({"rawtypes"})
public class sintactical extends java_cup.runtime.lr_parser {

 public final Class getSymbolContainer() {
    return sym.class;
}

  /** Default constructor. */
  @Deprecated
  public sintactical() {super();}

  /** Constructor which sets the default scanner. */
  @Deprecated
  public sintactical(java_cup.runtime.Scanner s) {super(s);}

  /** Constructor which sets the default scanner. */
  public sintactical(java_cup.runtime.Scanner s, java_cup.runtime.SymbolFactory sf) {super(s,sf);}

  /** Production table. */
  protected static final short _production_table[][] = 
    unpackFromStrings(new String[] {
    "\000\037\000\002\002\004\000\002\002\007\000\002\003" +
    "\004\000\002\003\003\000\002\004\003\000\002\004\003" +
    "\000\002\004\003\000\002\012\012\000\002\017\002\000" +
    "\002\012\016\000\002\014\005\000\002\014\003\000\002" +
    "\016\004\000\002\016\005\000\002\013\005\000\002\013" +
    "\003\000\002\005\015\000\002\010\020\000\002\006\003" +
    "\000\002\006\003\000\002\011\005\000\002\011\003\000" +
    "\002\007\003\000\002\007\003\000\002\007\003\000\002" +
    "\007\003\000\002\007\010\000\002\007\010\000\002\007" +
    "\010\000\002\007\010\000\002\007\010" });

  /** Access to production table. */
  public short[][] production_table() {return _production_table;}

  /** Parse-action table. */
  protected static final short[][] _action_table = 
    unpackFromStrings(new String[] {
    "\000\151\000\004\043\005\001\002\000\004\002\153\001" +
    "\002\000\010\004\006\010\015\036\013\001\002\000\004" +
    "\012\141\001\002\000\012\004\ufffb\010\ufffb\036\ufffb\042" +
    "\ufffb\001\002\000\004\042\136\001\002\000\012\004\006" +
    "\010\015\036\013\042\ufffe\001\002\000\012\004\ufffc\010" +
    "\ufffc\036\ufffc\042\ufffc\001\002\000\004\012\102\001\002" +
    "\000\012\004\ufffd\010\ufffd\036\ufffd\042\ufffd\001\002\000" +
    "\004\012\016\001\002\000\006\006\017\007\021\001\002" +
    "\000\004\012\uffef\001\002\000\004\012\022\001\002\000" +
    "\004\012\uffee\001\002\000\004\012\023\001\002\000\004" +
    "\011\024\001\002\000\004\005\025\001\002\000\004\013" +
    "\026\001\002\000\004\015\027\001\002\000\004\021\030" +
    "\001\002\000\024\005\035\023\032\024\043\025\034\026" +
    "\040\027\037\044\031\045\036\046\033\001\002\000\014" +
    "\015\uffeb\016\uffeb\020\uffeb\022\uffeb\042\uffeb\001\002\000" +
    "\004\017\075\001\002\000\014\015\uffe9\016\uffe9\020\uffe9" +
    "\022\uffe9\042\uffe9\001\002\000\004\017\070\001\002\000" +
    "\014\015\uffe8\016\uffe8\020\uffe8\022\uffe8\042\uffe8\001\002" +
    "\000\014\015\uffea\016\uffea\020\uffea\022\uffea\042\uffea\001" +
    "\002\000\004\017\063\001\002\000\004\017\056\001\002" +
    "\000\006\016\052\022\051\001\002\000\006\016\uffec\022" +
    "\uffec\001\002\000\004\017\044\001\002\000\024\005\035" +
    "\023\032\024\043\025\034\026\040\027\037\044\031\045" +
    "\036\046\033\001\002\000\004\016\046\001\002\000\024" +
    "\005\035\023\032\024\043\025\034\026\040\027\037\044" +
    "\031\045\036\046\033\001\002\000\004\020\050\001\002" +
    "\000\014\015\uffe6\016\uffe6\020\uffe6\022\uffe6\042\uffe6\001" +
    "\002\000\004\042\054\001\002\000\024\005\035\023\032" +
    "\024\043\025\034\026\040\027\037\044\031\045\036\046" +
    "\033\001\002\000\006\016\uffed\022\uffed\001\002\000\004" +
    "\047\055\001\002\000\012\004\ufff0\010\ufff0\036\ufff0\042" +
    "\ufff0\001\002\000\024\005\035\023\032\024\043\025\034" +
    "\026\040\027\037\044\031\045\036\046\033\001\002\000" +
    "\004\016\060\001\002\000\024\005\035\023\032\024\043" +
    "\025\034\026\040\027\037\044\031\045\036\046\033\001" +
    "\002\000\004\020\062\001\002\000\014\015\uffe4\016\uffe4" +
    "\020\uffe4\022\uffe4\042\uffe4\001\002\000\024\005\035\023" +
    "\032\024\043\025\034\026\040\027\037\044\031\045\036" +
    "\046\033\001\002\000\004\016\065\001\002\000\024\005" +
    "\035\023\032\024\043\025\034\026\040\027\037\044\031" +
    "\045\036\046\033\001\002\000\004\020\067\001\002\000" +
    "\014\015\uffe3\016\uffe3\020\uffe3\022\uffe3\042\uffe3\001\002" +
    "\000\024\005\035\023\032\024\043\025\034\026\040\027" +
    "\037\044\031\045\036\046\033\001\002\000\004\016\072" +
    "\001\002\000\024\005\035\023\032\024\043\025\034\026" +
    "\040\027\037\044\031\045\036\046\033\001\002\000\004" +
    "\020\074\001\002\000\014\015\uffe5\016\uffe5\020\uffe5\022" +
    "\uffe5\042\uffe5\001\002\000\024\005\035\023\032\024\043" +
    "\025\034\026\040\027\037\044\031\045\036\046\033\001" +
    "\002\000\004\016\077\001\002\000\024\005\035\023\032" +
    "\024\043\025\034\026\040\027\037\044\031\045\036\046" +
    "\033\001\002\000\004\020\101\001\002\000\014\015\uffe7" +
    "\016\uffe7\020\uffe7\022\uffe7\042\uffe7\001\002\000\004\012" +
    "\103\001\002\000\006\037\105\041\104\001\002\000\004" +
    "\040\115\001\002\000\004\040\106\001\002\000\024\005" +
    "\035\023\032\024\043\025\034\026\040\027\037\044\031" +
    "\045\036\046\033\001\002\000\006\016\111\042\112\001" +
    "\002\000\006\016\ufff6\042\ufff6\001\002\000\024\005\035" +
    "\023\032\024\043\025\034\026\040\027\037\044\031\045" +
    "\036\046\033\001\002\000\004\047\113\001\002\000\012" +
    "\004\ufffa\010\ufffa\036\ufffa\042\ufffa\001\002\000\006\016" +
    "\ufff7\042\ufff7\001\002\000\024\005\035\023\032\024\043" +
    "\025\034\026\040\027\037\044\031\045\036\046\033\001" +
    "\002\000\004\015\ufff9\001\002\000\004\015\120\001\002" +
    "\000\004\014\121\001\002\000\006\011\124\021\122\001" +
    "\002\000\024\005\035\023\032\024\043\025\034\026\040" +
    "\027\037\044\031\045\036\046\033\001\002\000\004\042" +
    "\126\001\002\000\004\005\125\001\002\000\004\042\ufff5" +
    "\001\002\000\004\047\127\001\002\000\012\004\ufff8\010" +
    "\ufff8\036\ufff8\042\ufff8\001\002\000\006\016\132\022\133" +
    "\001\002\000\006\016\ufff2\022\ufff2\001\002\000\024\005" +
    "\035\023\032\024\043\025\034\026\040\027\037\044\031" +
    "\045\036\046\033\001\002\000\004\042\ufff4\001\002\000" +
    "\006\016\ufff3\022\ufff3\001\002\000\004\042\uffff\001\002" +
    "\000\004\043\137\001\002\000\004\003\140\001\002\000" +
    "\004\002\000\001\002\000\006\006\017\007\021\001\002" +
    "\000\004\012\143\001\002\000\004\012\144\001\002\000" +
    "\004\005\145\001\002\000\004\013\146\001\002\000\004" +
    "\015\147\001\002\000\024\005\035\023\032\024\043\025" +
    "\034\026\040\027\037\044\031\045\036\046\033\001\002" +
    "\000\004\042\151\001\002\000\004\047\152\001\002\000" +
    "\012\004\ufff1\010\ufff1\036\ufff1\042\ufff1\001\002\000\004" +
    "\002\001\001\002" });

  /** Access to parse-action table. */
  public short[][] action_table() {return _action_table;}

  /** <code>reduce_goto</code> table. */
  protected static final short[][] _reduce_table = 
    unpackFromStrings(new String[] {
    "\000\151\000\004\002\003\001\001\000\002\001\001\000" +
    "\014\003\007\004\010\005\013\010\011\012\006\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\014\003\134\004\010\005\013\010\011\012\006\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\004\006\017\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\006\007\041\011\040\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\004\007\044\001\001\000" +
    "\002\001\001\000\004\007\046\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\004\007\052\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\004\007\056\001\001\000\002\001\001\000\004\007" +
    "\060\001\001\000\002\001\001\000\002\001\001\000\004" +
    "\007\063\001\001\000\002\001\001\000\004\007\065\001" +
    "\001\000\002\001\001\000\002\001\001\000\004\007\070" +
    "\001\001\000\002\001\001\000\004\007\072\001\001\000" +
    "\002\001\001\000\002\001\001\000\004\007\075\001\001" +
    "\000\002\001\001\000\004\007\077\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\006\007\107\014" +
    "\106\001\001\000\002\001\001\000\002\001\001\000\004" +
    "\007\113\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\004\007\115\001\001\000\004\017\116" +
    "\001\001\000\002\001\001\000\002\001\001\000\004\016" +
    "\122\001\001\000\006\007\130\013\127\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\004\007\133\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\004\006\141\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\004\007\147\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "" });

  /** Access to <code>reduce_goto</code> table. */
  public short[][] reduce_table() {return _reduce_table;}

  /** Instance of action encapsulation class. */
  protected CUP$sintactical$actions action_obj;

  /** Action encapsulation object initializer. */
  protected void init_actions()
    {
      action_obj = new CUP$sintactical$actions(this);
    }

  /** Invoke a user supplied parse action. */
  public java_cup.runtime.Symbol do_action(
    int                        act_num,
    java_cup.runtime.lr_parser parser,
    java.util.Stack            stack,
    int                        top)
    throws java.lang.Exception
  {
    /* call code in generated class */
    return action_obj.CUP$sintactical$do_action(act_num, parser, stack, top);
  }

  /** Indicates start state. */
  public int start_state() {return 0;}
  /** Indicates start production. */
  public int start_production() {return 0;}

  /** <code>EOF</code> Symbol index. */
  public int EOF_sym() {return 0;}

  /** <code>error</code> Symbol index. */
  public int error_sym() {return 1;}



    public ArrayList<proyecto1_oc1_202010770.tabla_de_simbolos> tabla_simbolos = new ArrayList<>();
    public ArrayList<proyecto1_oc1_202010770.lista> lista_de_elementos = new ArrayList<>();
    public proyecto1_oc1_202010770.operaciones_aritmeticas operaciones = new operaciones_aritmeticas();
    public proyecto1_oc1_202010770.Impresion impresion = new Impresion();
    public String actual = "";
    public String datos_en_lista = "";
 
    public int num_global = 0;
    public void syntax_error(Symbol s){
        System.out.println("Error Sintactico: "+ s.value +" Linea "+(s.right+1)+" columna "+(s.left+1)+"\n"  );
    }

    public void unrecovered_syntax_error(Symbol s) throws java.lang.Exception{ 
        System.out.println("Error de sintaxis no se pudo terminar de analizar: "+ s.value +" Linea "+(s.right+1)+" columna "+(s.left+1)+"\n" );
        
}


/** Cup generated class to encapsulate user supplied action code.*/
@SuppressWarnings({"rawtypes", "unchecked", "unused"})
class CUP$sintactical$actions {
  private final sintactical parser;

  /** Constructor */
  CUP$sintactical$actions(sintactical parser) {
    this.parser = parser;
  }

  /** Method 0 with the actual generated action code for actions 0 to 300. */
  public final java_cup.runtime.Symbol CUP$sintactical$do_action_part00000000(
    int                        CUP$sintactical$act_num,
    java_cup.runtime.lr_parser CUP$sintactical$parser,
    java.util.Stack            CUP$sintactical$stack,
    int                        CUP$sintactical$top)
    throws java.lang.Exception
    {
      /* Symbol object for return from actions */
      java_cup.runtime.Symbol CUP$sintactical$result;

      /* select the action based on the action number */
      switch (CUP$sintactical$act_num)
        {
          /*. . . . . . . . . . . . . . . . . . . .*/
          case 0: // $START ::= inicio EOF 
            {
              Object RESULT =null;
		int start_valleft = ((java_cup.runtime.Symbol)CUP$sintactical$stack.elementAt(CUP$sintactical$top-1)).left;
		int start_valright = ((java_cup.runtime.Symbol)CUP$sintactical$stack.elementAt(CUP$sintactical$top-1)).right;
		Object start_val = (Object)((java_cup.runtime.Symbol) CUP$sintactical$stack.elementAt(CUP$sintactical$top-1)).value;
		RESULT = start_val;
              CUP$sintactical$result = parser.getSymbolFactory().newSymbol("$START",0, ((java_cup.runtime.Symbol)CUP$sintactical$stack.elementAt(CUP$sintactical$top-1)), ((java_cup.runtime.Symbol)CUP$sintactical$stack.peek()), RESULT);
            }
          /* ACCEPT */
          CUP$sintactical$parser.done_parsing();
          return CUP$sintactical$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 1: // inicio ::= PROGRAM instruccion END PROGRAM error 
            {
              Object RESULT =null;

              CUP$sintactical$result = parser.getSymbolFactory().newSymbol("inicio",0, ((java_cup.runtime.Symbol)CUP$sintactical$stack.elementAt(CUP$sintactical$top-4)), ((java_cup.runtime.Symbol)CUP$sintactical$stack.peek()), RESULT);
            }
          return CUP$sintactical$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 2: // instruccion ::= lista_de_instrucciones instruccion 
            {
              Object RESULT =null;

              CUP$sintactical$result = parser.getSymbolFactory().newSymbol("instruccion",1, ((java_cup.runtime.Symbol)CUP$sintactical$stack.elementAt(CUP$sintactical$top-1)), ((java_cup.runtime.Symbol)CUP$sintactical$stack.peek()), RESULT);
            }
          return CUP$sintactical$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 3: // instruccion ::= lista_de_instrucciones 
            {
              Object RESULT =null;

              CUP$sintactical$result = parser.getSymbolFactory().newSymbol("instruccion",1, ((java_cup.runtime.Symbol)CUP$sintactical$stack.peek()), ((java_cup.runtime.Symbol)CUP$sintactical$stack.peek()), RESULT);
            }
          return CUP$sintactical$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 4: // lista_de_instrucciones ::= asignacion 
            {
              Object RESULT =null;

              CUP$sintactical$result = parser.getSymbolFactory().newSymbol("lista_de_instrucciones",2, ((java_cup.runtime.Symbol)CUP$sintactical$stack.peek()), ((java_cup.runtime.Symbol)CUP$sintactical$stack.peek()), RESULT);
            }
          return CUP$sintactical$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 5: // lista_de_instrucciones ::= lista 
            {
              Object RESULT =null;

              CUP$sintactical$result = parser.getSymbolFactory().newSymbol("lista_de_instrucciones",2, ((java_cup.runtime.Symbol)CUP$sintactical$stack.peek()), ((java_cup.runtime.Symbol)CUP$sintactical$stack.peek()), RESULT);
            }
          return CUP$sintactical$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 6: // lista_de_instrucciones ::= impresiones 
            {
              Object RESULT =null;

              CUP$sintactical$result = parser.getSymbolFactory().newSymbol("lista_de_instrucciones",2, ((java_cup.runtime.Symbol)CUP$sintactical$stack.peek()), ((java_cup.runtime.Symbol)CUP$sintactical$stack.peek()), RESULT);
            }
          return CUP$sintactical$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 7: // impresiones ::= CONSOLE DOS_PUNTOS DOS_PUNTOS PRINT IGUAL datos_de_impresion END PUNTO_Y_COMA 
            {
              Object RESULT =null;

              CUP$sintactical$result = parser.getSymbolFactory().newSymbol("impresiones",8, ((java_cup.runtime.Symbol)CUP$sintactical$stack.elementAt(CUP$sintactical$top-7)), ((java_cup.runtime.Symbol)CUP$sintactical$stack.peek()), RESULT);
            }
          return CUP$sintactical$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 8: // NT$0 ::= 
            {
              Object RESULT =null;
		int actleft = ((java_cup.runtime.Symbol)CUP$sintactical$stack.peek()).left;
		int actright = ((java_cup.runtime.Symbol)CUP$sintactical$stack.peek()).right;
		Object act = (Object)((java_cup.runtime.Symbol) CUP$sintactical$stack.peek()).value;
        
        System.out.println("----------");
        System.out.println(act);
        System.out.println("----------");
              CUP$sintactical$result = parser.getSymbolFactory().newSymbol("NT$0",13, ((java_cup.runtime.Symbol)CUP$sintactical$stack.peek()), RESULT);
            }
          return CUP$sintactical$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 9: // impresiones ::= CONSOLE DOS_PUNTOS DOS_PUNTOS COLUMN IGUAL dato NT$0 DIAGONAL SLASH_MAYOR impresion_de_la_lista END PUNTO_Y_COMA 
            {
              Object RESULT =null;
              // propagate RESULT from NT$0
                RESULT = (Object) ((java_cup.runtime.Symbol) CUP$sintactical$stack.elementAt(CUP$sintactical$top-5)).value;
		int actleft = ((java_cup.runtime.Symbol)CUP$sintactical$stack.elementAt(CUP$sintactical$top-6)).left;
		int actright = ((java_cup.runtime.Symbol)CUP$sintactical$stack.elementAt(CUP$sintactical$top-6)).right;
		Object act = (Object)((java_cup.runtime.Symbol) CUP$sintactical$stack.elementAt(CUP$sintactical$top-6)).value;

              CUP$sintactical$result = parser.getSymbolFactory().newSymbol("impresiones",8, ((java_cup.runtime.Symbol)CUP$sintactical$stack.elementAt(CUP$sintactical$top-11)), ((java_cup.runtime.Symbol)CUP$sintactical$stack.peek()), RESULT);
            }
          return CUP$sintactical$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 10: // datos_de_impresion ::= datos_de_impresion COMMA dato 
            {
              Object RESULT =null;
		int datleft = ((java_cup.runtime.Symbol)CUP$sintactical$stack.peek()).left;
		int datright = ((java_cup.runtime.Symbol)CUP$sintactical$stack.peek()).right;
		Object dat = (Object)((java_cup.runtime.Symbol) CUP$sintactical$stack.peek()).value;
		impresion.imprimir(dat.toString());
              CUP$sintactical$result = parser.getSymbolFactory().newSymbol("datos_de_impresion",10, ((java_cup.runtime.Symbol)CUP$sintactical$stack.elementAt(CUP$sintactical$top-2)), ((java_cup.runtime.Symbol)CUP$sintactical$stack.peek()), RESULT);
            }
          return CUP$sintactical$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 11: // datos_de_impresion ::= dato 
            {
              Object RESULT =null;
		int datleft = ((java_cup.runtime.Symbol)CUP$sintactical$stack.peek()).left;
		int datright = ((java_cup.runtime.Symbol)CUP$sintactical$stack.peek()).right;
		Object dat = (Object)((java_cup.runtime.Symbol) CUP$sintactical$stack.peek()).value;
		impresion.imprimir(dat.toString());
              CUP$sintactical$result = parser.getSymbolFactory().newSymbol("datos_de_impresion",10, ((java_cup.runtime.Symbol)CUP$sintactical$stack.peek()), ((java_cup.runtime.Symbol)CUP$sintactical$stack.peek()), RESULT);
            }
          return CUP$sintactical$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 12: // impresion_de_la_lista ::= ARROBA VARIABLE 
            {
              Object RESULT =null;
		int varleft = ((java_cup.runtime.Symbol)CUP$sintactical$stack.peek()).left;
		int varright = ((java_cup.runtime.Symbol)CUP$sintactical$stack.peek()).right;
		String var = (String)((java_cup.runtime.Symbol) CUP$sintactical$stack.peek()).value;
		
        for (proyecto1_oc1_202010770.lista elemento : lista_de_elementos) {
            System.out.println("Variable: " + elemento.variable);
            if(elemento.variable.equals(var)){
                impresion.imprimir_lista(actual, elemento);
            }        
        }
              CUP$sintactical$result = parser.getSymbolFactory().newSymbol("impresion_de_la_lista",12, ((java_cup.runtime.Symbol)CUP$sintactical$stack.elementAt(CUP$sintactical$top-1)), ((java_cup.runtime.Symbol)CUP$sintactical$stack.peek()), RESULT);
            }
          return CUP$sintactical$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 13: // impresion_de_la_lista ::= CORCHETE_ABIERTO mas_listas CORCHETE_CERRADO 
            {
              Object RESULT =null;

              CUP$sintactical$result = parser.getSymbolFactory().newSymbol("impresion_de_la_lista",12, ((java_cup.runtime.Symbol)CUP$sintactical$stack.elementAt(CUP$sintactical$top-2)), ((java_cup.runtime.Symbol)CUP$sintactical$stack.peek()), RESULT);
            }
          return CUP$sintactical$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 14: // mas_listas ::= mas_listas COMMA dato 
            {
              Object RESULT =null;
		int valleft = ((java_cup.runtime.Symbol)CUP$sintactical$stack.peek()).left;
		int valright = ((java_cup.runtime.Symbol)CUP$sintactical$stack.peek()).right;
		Object val = (Object)((java_cup.runtime.Symbol) CUP$sintactical$stack.peek()).value;
		System.out.println(val.toString());
              CUP$sintactical$result = parser.getSymbolFactory().newSymbol("mas_listas",9, ((java_cup.runtime.Symbol)CUP$sintactical$stack.elementAt(CUP$sintactical$top-2)), ((java_cup.runtime.Symbol)CUP$sintactical$stack.peek()), RESULT);
            }
          return CUP$sintactical$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 15: // mas_listas ::= dato 
            {
              Object RESULT =null;
		int valleft = ((java_cup.runtime.Symbol)CUP$sintactical$stack.peek()).left;
		int valright = ((java_cup.runtime.Symbol)CUP$sintactical$stack.peek()).right;
		Object val = (Object)((java_cup.runtime.Symbol) CUP$sintactical$stack.peek()).value;
		System.out.println(val.toString());
              CUP$sintactical$result = parser.getSymbolFactory().newSymbol("mas_listas",9, ((java_cup.runtime.Symbol)CUP$sintactical$stack.peek()), ((java_cup.runtime.Symbol)CUP$sintactical$stack.peek()), RESULT);
            }
          return CUP$sintactical$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 16: // asignacion ::= VAR DOS_PUNTOS tipo_de_dato DOS_PUNTOS DOS_PUNTOS VARIABLE SLASH_MENOR DIAGONAL dato END PUNTO_Y_COMA 
            {
              Object RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$sintactical$stack.elementAt(CUP$sintactical$top-8)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$sintactical$stack.elementAt(CUP$sintactical$top-8)).right;
		Object a = (Object)((java_cup.runtime.Symbol) CUP$sintactical$stack.elementAt(CUP$sintactical$top-8)).value;
		int bleft = ((java_cup.runtime.Symbol)CUP$sintactical$stack.elementAt(CUP$sintactical$top-5)).left;
		int bright = ((java_cup.runtime.Symbol)CUP$sintactical$stack.elementAt(CUP$sintactical$top-5)).right;
		String b = (String)((java_cup.runtime.Symbol) CUP$sintactical$stack.elementAt(CUP$sintactical$top-5)).value;
		int cleft = ((java_cup.runtime.Symbol)CUP$sintactical$stack.elementAt(CUP$sintactical$top-2)).left;
		int cright = ((java_cup.runtime.Symbol)CUP$sintactical$stack.elementAt(CUP$sintactical$top-2)).right;
		Object c = (Object)((java_cup.runtime.Symbol) CUP$sintactical$stack.elementAt(CUP$sintactical$top-2)).value;
		

            tabla_simbolos.add(new proyecto1_oc1_202010770.tabla_de_simbolos(a.toString(),b.toString(),c.toString()));
    
              CUP$sintactical$result = parser.getSymbolFactory().newSymbol("asignacion",3, ((java_cup.runtime.Symbol)CUP$sintactical$stack.elementAt(CUP$sintactical$top-10)), ((java_cup.runtime.Symbol)CUP$sintactical$stack.peek()), RESULT);
            }
          return CUP$sintactical$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 17: // lista ::= ARREGLO DOS_PUNTOS tipo_de_dato DOS_PUNTOS DOS_PUNTOS ARROBA VARIABLE SLASH_MENOR DIAGONAL CORCHETE_ABIERTO datos_de_lista CORCHETE_CERRADO END PUNTO_Y_COMA 
            {
              Object RESULT =null;
		int tipoleft = ((java_cup.runtime.Symbol)CUP$sintactical$stack.elementAt(CUP$sintactical$top-11)).left;
		int tiporight = ((java_cup.runtime.Symbol)CUP$sintactical$stack.elementAt(CUP$sintactical$top-11)).right;
		Object tipo = (Object)((java_cup.runtime.Symbol) CUP$sintactical$stack.elementAt(CUP$sintactical$top-11)).value;
		int varleft = ((java_cup.runtime.Symbol)CUP$sintactical$stack.elementAt(CUP$sintactical$top-7)).left;
		int varright = ((java_cup.runtime.Symbol)CUP$sintactical$stack.elementAt(CUP$sintactical$top-7)).right;
		String var = (String)((java_cup.runtime.Symbol) CUP$sintactical$stack.elementAt(CUP$sintactical$top-7)).value;
		
        //Se agrega el nombre de la variable
        String vals = var.toString();
        lista_de_elementos.add(new proyecto1_oc1_202010770.lista(vals));
        double numero = 0.0;
        Scanner scanner = new Scanner(datos_en_lista);
        if(tipo.toString().equals("double")){
        
        while (scanner.hasNext()) {
            
            String numeroStr = scanner.next();
            numero = Double.parseDouble(numeroStr);
            for (proyecto1_oc1_202010770.lista elemento : lista_de_elementos) {
                if(elemento.variable.equals(vals)){
                    elemento.agregarElemento(tipo.toString(),vals, numero);
                }
                elemento.mostrarElementos();
            }
        }}else{
        while (scanner.hasNext()) {
            
            String numeroStr = scanner.next();
            
           
            for (proyecto1_oc1_202010770.lista elemento : lista_de_elementos) {
                if(elemento.variable.equals(vals)){
                    elemento.agregarElemento(tipo.toString(),vals, numeroStr);
                }
                elemento.mostrarElementos();
            }
        }
        }

        //Se limpia la variable con los datos
        datos_en_lista = "";


              CUP$sintactical$result = parser.getSymbolFactory().newSymbol("lista",6, ((java_cup.runtime.Symbol)CUP$sintactical$stack.elementAt(CUP$sintactical$top-13)), ((java_cup.runtime.Symbol)CUP$sintactical$stack.peek()), RESULT);
            }
          return CUP$sintactical$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 18: // tipo_de_dato ::= DOUBLE 
            {
              Object RESULT =null;
		RESULT = "double"; 
              CUP$sintactical$result = parser.getSymbolFactory().newSymbol("tipo_de_dato",4, ((java_cup.runtime.Symbol)CUP$sintactical$stack.peek()), ((java_cup.runtime.Symbol)CUP$sintactical$stack.peek()), RESULT);
            }
          return CUP$sintactical$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 19: // tipo_de_dato ::= CADENA 
            {
              Object RESULT =null;
		RESULT = "cadena"; 
              CUP$sintactical$result = parser.getSymbolFactory().newSymbol("tipo_de_dato",4, ((java_cup.runtime.Symbol)CUP$sintactical$stack.peek()), ((java_cup.runtime.Symbol)CUP$sintactical$stack.peek()), RESULT);
            }
          return CUP$sintactical$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 20: // datos_de_lista ::= datos_de_lista COMMA dato 
            {
              Object RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$sintactical$stack.elementAt(CUP$sintactical$top-2)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$sintactical$stack.elementAt(CUP$sintactical$top-2)).right;
		Object a = (Object)((java_cup.runtime.Symbol) CUP$sintactical$stack.elementAt(CUP$sintactical$top-2)).value;
		int bleft = ((java_cup.runtime.Symbol)CUP$sintactical$stack.peek()).left;
		int bright = ((java_cup.runtime.Symbol)CUP$sintactical$stack.peek()).right;
		Object b = (Object)((java_cup.runtime.Symbol) CUP$sintactical$stack.peek()).value;
		 datos_en_lista += " "+b.toString().replace(" ", "Ñ"); RESULT = b.toString().replace(" ", "Ñ");;
              CUP$sintactical$result = parser.getSymbolFactory().newSymbol("datos_de_lista",7, ((java_cup.runtime.Symbol)CUP$sintactical$stack.elementAt(CUP$sintactical$top-2)), ((java_cup.runtime.Symbol)CUP$sintactical$stack.peek()), RESULT);
            }
          return CUP$sintactical$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 21: // datos_de_lista ::= dato 
            {
              Object RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$sintactical$stack.peek()).left;
		int aright = ((java_cup.runtime.Symbol)CUP$sintactical$stack.peek()).right;
		Object a = (Object)((java_cup.runtime.Symbol) CUP$sintactical$stack.peek()).value;
		datos_en_lista += " "+a.toString().replace(" ", "Ñ");  RESULT = a.toString().replace(" ", "Ñ");;
              CUP$sintactical$result = parser.getSymbolFactory().newSymbol("datos_de_lista",7, ((java_cup.runtime.Symbol)CUP$sintactical$stack.peek()), ((java_cup.runtime.Symbol)CUP$sintactical$stack.peek()), RESULT);
            }
          return CUP$sintactical$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 22: // dato ::= CADENAS 
            {
              Object RESULT =null;
		int datosleft = ((java_cup.runtime.Symbol)CUP$sintactical$stack.peek()).left;
		int datosright = ((java_cup.runtime.Symbol)CUP$sintactical$stack.peek()).right;
		String datos = (String)((java_cup.runtime.Symbol) CUP$sintactical$stack.peek()).value;
		
        String salida = "";
        if (datos.toString().startsWith("\"") && datos.toString().endsWith("\"")) {
            // Quitar las comillas usando substring
            salida = datos.toString().substring(1, datos.length() - 1);
            actual = salida;
            RESULT = salida;
        }else{
        actual = datos.toString();
        RESULT = datos.toString();
        } 
              CUP$sintactical$result = parser.getSymbolFactory().newSymbol("dato",5, ((java_cup.runtime.Symbol)CUP$sintactical$stack.peek()), ((java_cup.runtime.Symbol)CUP$sintactical$stack.peek()), RESULT);
            }
          return CUP$sintactical$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 23: // dato ::= NUMERO_FLOTANTE 
            {
              Object RESULT =null;
		int datosleft = ((java_cup.runtime.Symbol)CUP$sintactical$stack.peek()).left;
		int datosright = ((java_cup.runtime.Symbol)CUP$sintactical$stack.peek()).right;
		String datos = (String)((java_cup.runtime.Symbol) CUP$sintactical$stack.peek()).value;
		RESULT = datos.toString(); 
              CUP$sintactical$result = parser.getSymbolFactory().newSymbol("dato",5, ((java_cup.runtime.Symbol)CUP$sintactical$stack.peek()), ((java_cup.runtime.Symbol)CUP$sintactical$stack.peek()), RESULT);
            }
          return CUP$sintactical$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 24: // dato ::= NUMERO_ENTERO 
            {
              Object RESULT =null;
		int datosleft = ((java_cup.runtime.Symbol)CUP$sintactical$stack.peek()).left;
		int datosright = ((java_cup.runtime.Symbol)CUP$sintactical$stack.peek()).right;
		String datos = (String)((java_cup.runtime.Symbol) CUP$sintactical$stack.peek()).value;
		RESULT = datos.toString(); 
              CUP$sintactical$result = parser.getSymbolFactory().newSymbol("dato",5, ((java_cup.runtime.Symbol)CUP$sintactical$stack.peek()), ((java_cup.runtime.Symbol)CUP$sintactical$stack.peek()), RESULT);
            }
          return CUP$sintactical$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 25: // dato ::= VARIABLE 
            {
              Object RESULT =null;
		int datosleft = ((java_cup.runtime.Symbol)CUP$sintactical$stack.peek()).left;
		int datosright = ((java_cup.runtime.Symbol)CUP$sintactical$stack.peek()).right;
		String datos = (String)((java_cup.runtime.Symbol) CUP$sintactical$stack.peek()).value;
		
        String variable_a_buscar = datos.toString();
        for (proyecto1_oc1_202010770.tabla_de_simbolos simbolo : tabla_simbolos){
            if(variable_a_buscar.equals(simbolo.variable)){
            actual = simbolo.dato.toString();
            RESULT = simbolo.dato;
            break;
            }
        }
    
              CUP$sintactical$result = parser.getSymbolFactory().newSymbol("dato",5, ((java_cup.runtime.Symbol)CUP$sintactical$stack.peek()), ((java_cup.runtime.Symbol)CUP$sintactical$stack.peek()), RESULT);
            }
          return CUP$sintactical$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 26: // dato ::= SUMA PARENTESIS_ABIERTO dato COMMA dato PARENTESIS_CERRADO 
            {
              Object RESULT =null;
		int izqleft = ((java_cup.runtime.Symbol)CUP$sintactical$stack.elementAt(CUP$sintactical$top-3)).left;
		int izqright = ((java_cup.runtime.Symbol)CUP$sintactical$stack.elementAt(CUP$sintactical$top-3)).right;
		Object izq = (Object)((java_cup.runtime.Symbol) CUP$sintactical$stack.elementAt(CUP$sintactical$top-3)).value;
		int derleft = ((java_cup.runtime.Symbol)CUP$sintactical$stack.elementAt(CUP$sintactical$top-1)).left;
		int derright = ((java_cup.runtime.Symbol)CUP$sintactical$stack.elementAt(CUP$sintactical$top-1)).right;
		Object der = (Object)((java_cup.runtime.Symbol) CUP$sintactical$stack.elementAt(CUP$sintactical$top-1)).value;
		
    RESULT = operaciones.Suma(izq.toString(), der.toString());
    
              CUP$sintactical$result = parser.getSymbolFactory().newSymbol("dato",5, ((java_cup.runtime.Symbol)CUP$sintactical$stack.elementAt(CUP$sintactical$top-5)), ((java_cup.runtime.Symbol)CUP$sintactical$stack.peek()), RESULT);
            }
          return CUP$sintactical$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 27: // dato ::= RESTA PARENTESIS_ABIERTO dato COMMA dato PARENTESIS_CERRADO 
            {
              Object RESULT =null;
		int izqleft = ((java_cup.runtime.Symbol)CUP$sintactical$stack.elementAt(CUP$sintactical$top-3)).left;
		int izqright = ((java_cup.runtime.Symbol)CUP$sintactical$stack.elementAt(CUP$sintactical$top-3)).right;
		Object izq = (Object)((java_cup.runtime.Symbol) CUP$sintactical$stack.elementAt(CUP$sintactical$top-3)).value;
		int derleft = ((java_cup.runtime.Symbol)CUP$sintactical$stack.elementAt(CUP$sintactical$top-1)).left;
		int derright = ((java_cup.runtime.Symbol)CUP$sintactical$stack.elementAt(CUP$sintactical$top-1)).right;
		Object der = (Object)((java_cup.runtime.Symbol) CUP$sintactical$stack.elementAt(CUP$sintactical$top-1)).value;
		
    RESULT = operaciones.Resta(izq.toString(), der.toString());
    
              CUP$sintactical$result = parser.getSymbolFactory().newSymbol("dato",5, ((java_cup.runtime.Symbol)CUP$sintactical$stack.elementAt(CUP$sintactical$top-5)), ((java_cup.runtime.Symbol)CUP$sintactical$stack.peek()), RESULT);
            }
          return CUP$sintactical$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 28: // dato ::= MULTIPLICACION PARENTESIS_ABIERTO dato COMMA dato PARENTESIS_CERRADO 
            {
              Object RESULT =null;
		int izqleft = ((java_cup.runtime.Symbol)CUP$sintactical$stack.elementAt(CUP$sintactical$top-3)).left;
		int izqright = ((java_cup.runtime.Symbol)CUP$sintactical$stack.elementAt(CUP$sintactical$top-3)).right;
		Object izq = (Object)((java_cup.runtime.Symbol) CUP$sintactical$stack.elementAt(CUP$sintactical$top-3)).value;
		int derleft = ((java_cup.runtime.Symbol)CUP$sintactical$stack.elementAt(CUP$sintactical$top-1)).left;
		int derright = ((java_cup.runtime.Symbol)CUP$sintactical$stack.elementAt(CUP$sintactical$top-1)).right;
		Object der = (Object)((java_cup.runtime.Symbol) CUP$sintactical$stack.elementAt(CUP$sintactical$top-1)).value;
		
    RESULT = operaciones.Multiplicacion(izq.toString(), der.toString());
    
              CUP$sintactical$result = parser.getSymbolFactory().newSymbol("dato",5, ((java_cup.runtime.Symbol)CUP$sintactical$stack.elementAt(CUP$sintactical$top-5)), ((java_cup.runtime.Symbol)CUP$sintactical$stack.peek()), RESULT);
            }
          return CUP$sintactical$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 29: // dato ::= DIVISION PARENTESIS_ABIERTO dato COMMA dato PARENTESIS_CERRADO 
            {
              Object RESULT =null;
		int izqleft = ((java_cup.runtime.Symbol)CUP$sintactical$stack.elementAt(CUP$sintactical$top-3)).left;
		int izqright = ((java_cup.runtime.Symbol)CUP$sintactical$stack.elementAt(CUP$sintactical$top-3)).right;
		Object izq = (Object)((java_cup.runtime.Symbol) CUP$sintactical$stack.elementAt(CUP$sintactical$top-3)).value;
		int derleft = ((java_cup.runtime.Symbol)CUP$sintactical$stack.elementAt(CUP$sintactical$top-1)).left;
		int derright = ((java_cup.runtime.Symbol)CUP$sintactical$stack.elementAt(CUP$sintactical$top-1)).right;
		Object der = (Object)((java_cup.runtime.Symbol) CUP$sintactical$stack.elementAt(CUP$sintactical$top-1)).value;
		
    RESULT = operaciones.Division(izq.toString(), der.toString());
    
              CUP$sintactical$result = parser.getSymbolFactory().newSymbol("dato",5, ((java_cup.runtime.Symbol)CUP$sintactical$stack.elementAt(CUP$sintactical$top-5)), ((java_cup.runtime.Symbol)CUP$sintactical$stack.peek()), RESULT);
            }
          return CUP$sintactical$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 30: // dato ::= MODULO PARENTESIS_ABIERTO dato COMMA dato PARENTESIS_CERRADO 
            {
              Object RESULT =null;
		int izqleft = ((java_cup.runtime.Symbol)CUP$sintactical$stack.elementAt(CUP$sintactical$top-3)).left;
		int izqright = ((java_cup.runtime.Symbol)CUP$sintactical$stack.elementAt(CUP$sintactical$top-3)).right;
		Object izq = (Object)((java_cup.runtime.Symbol) CUP$sintactical$stack.elementAt(CUP$sintactical$top-3)).value;
		int derleft = ((java_cup.runtime.Symbol)CUP$sintactical$stack.elementAt(CUP$sintactical$top-1)).left;
		int derright = ((java_cup.runtime.Symbol)CUP$sintactical$stack.elementAt(CUP$sintactical$top-1)).right;
		Object der = (Object)((java_cup.runtime.Symbol) CUP$sintactical$stack.elementAt(CUP$sintactical$top-1)).value;
		
    RESULT = operaciones.Modulo(izq.toString(), der.toString());
    
              CUP$sintactical$result = parser.getSymbolFactory().newSymbol("dato",5, ((java_cup.runtime.Symbol)CUP$sintactical$stack.elementAt(CUP$sintactical$top-5)), ((java_cup.runtime.Symbol)CUP$sintactical$stack.peek()), RESULT);
            }
          return CUP$sintactical$result;

          /* . . . . . .*/
          default:
            throw new Exception(
               "Invalid action number "+CUP$sintactical$act_num+"found in internal parse table");

        }
    } /* end of method */

  /** Method splitting the generated action code into several parts. */
  public final java_cup.runtime.Symbol CUP$sintactical$do_action(
    int                        CUP$sintactical$act_num,
    java_cup.runtime.lr_parser CUP$sintactical$parser,
    java.util.Stack            CUP$sintactical$stack,
    int                        CUP$sintactical$top)
    throws java.lang.Exception
    {
              return CUP$sintactical$do_action_part00000000(
                               CUP$sintactical$act_num,
                               CUP$sintactical$parser,
                               CUP$sintactical$stack,
                               CUP$sintactical$top);
    }
}

}

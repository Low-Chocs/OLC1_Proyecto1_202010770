
//----------------------------------------------------
// The following code was generated by CUP v0.11b 20160615 (GIT 4ac7450)
//----------------------------------------------------

package Analyzers;

import java_cup.runtime.*;
import java.util.ArrayList;
import proyecto1_oc1_202010770.tabla_de_simbolos;
import proyecto1_oc1_202010770.operaciones_aritmeticas;
import proyecto1_oc1_202010770.Impresion;
import proyecto1_oc1_202010770.lista;
import java.util.Scanner;
import proyecto1_oc1_202010770.Graficar;
import java_cup.runtime.XMLElement;

/** CUP v0.11b 20160615 (GIT 4ac7450) generated parser.
  */
@SuppressWarnings({"rawtypes"})
public class sintactical extends java_cup.runtime.lr_parser {

 public final Class getSymbolContainer() {
    return sym.class;
}

  /** Default constructor. */
  @Deprecated
  public sintactical() {super();}

  /** Constructor which sets the default scanner. */
  @Deprecated
  public sintactical(java_cup.runtime.Scanner s) {super(s);}

  /** Constructor which sets the default scanner. */
  public sintactical(java_cup.runtime.Scanner s, java_cup.runtime.SymbolFactory sf) {super(s,sf);}

  /** Production table. */
  protected static final short _production_table[][] = 
    unpackFromStrings(new String[] {
    "\000\126\000\002\002\004\000\002\040\002\000\002\002" +
    "\007\000\002\002\003\000\002\023\004\000\002\023\003" +
    "\000\002\024\003\000\002\024\003\000\002\024\003\000" +
    "\002\024\003\000\002\020\003\000\002\020\003\000\002" +
    "\020\003\000\002\020\003\000\002\041\002\000\002\021" +
    "\015\000\002\004\004\000\002\004\003\000\002\003\003" +
    "\000\002\003\003\000\002\003\003\000\002\003\003\000" +
    "\002\003\003\000\002\003\003\000\002\003\003\000\002" +
    "\042\002\000\002\007\015\000\002\043\002\000\002\006" +
    "\013\000\002\044\002\000\002\011\013\000\002\022\012" +
    "\000\002\045\002\000\002\014\013\000\002\046\002\000" +
    "\002\015\013\000\002\016\004\000\002\016\005\000\002" +
    "\017\005\000\002\017\003\000\002\012\012\000\002\013" +
    "\012\000\002\047\002\000\002\010\015\000\002\050\002" +
    "\000\002\005\016\000\002\034\012\000\002\051\002\000" +
    "\002\034\016\000\002\036\005\000\002\036\003\000\002" +
    "\037\004\000\002\037\005\000\002\035\005\000\002\035" +
    "\003\000\002\025\015\000\002\032\020\000\002\030\003" +
    "\000\002\030\003\000\002\033\005\000\002\033\003\000" +
    "\002\031\003\000\002\031\003\000\002\031\003\000\002" +
    "\031\003\000\002\031\010\000\002\031\010\000\002\031" +
    "\010\000\002\031\010\000\002\031\010\000\002\052\002" +
    "\000\002\031\007\000\002\053\002\000\002\031\007\000" +
    "\002\054\002\000\002\031\007\000\002\055\002\000\002" +
    "\031\007\000\002\056\002\000\002\031\007\000\002\057" +
    "\002\000\002\031\007\000\002\027\004\000\002\027\005" +
    "\000\002\026\005\000\002\026\003" });

  /** Access to production table. */
  public short[][] production_table() {return _production_table;}

  /** Parse-action table. */
  protected static final short[][] _action_table = 
    unpackFromStrings(new String[] {
    "\000\u010f\000\006\003\004\043\000\001\002\000\004\002" +
    "\ufffe\001\002\000\004\043\010\001\002\000\004\002\007" +
    "\001\002\000\004\002\001\001\002\000\020\004\021\010" +
    "\024\036\026\060\023\061\030\062\017\063\015\001\002" +
    "\000\022\004\ufff7\010\ufff7\036\ufff7\042\ufff7\060\ufff7\061" +
    "\ufff7\062\ufff7\063\ufff7\001\002\000\022\004\ufff6\010\ufff6" +
    "\036\ufff6\042\ufff6\060\ufff6\061\ufff6\062\ufff6\063\ufff6\001" +
    "\002\000\022\004\ufff5\010\ufff5\036\ufff5\042\ufff5\060\ufff5" +
    "\061\ufff5\062\ufff5\063\ufff5\001\002\000\022\004\ufff4\010" +
    "\ufff4\036\ufff4\042\ufff4\060\ufff4\061\ufff4\062\ufff4\063\ufff4" +
    "\001\002\000\004\017\uffd5\001\002\000\004\042\u0105\001" +
    "\002\000\004\017\uffd7\001\002\000\022\004\ufffb\010\ufffb" +
    "\036\ufffb\042\ufffb\060\ufffb\061\ufffb\062\ufffb\063\ufffb\001" +
    "\002\000\004\012\361\001\002\000\022\004\ufffa\010\ufffa" +
    "\036\ufffa\042\ufffa\060\ufffa\061\ufffa\062\ufffa\063\ufffa\001" +
    "\002\000\004\017\ufff3\001\002\000\004\012\325\001\002" +
    "\000\022\004\ufff8\010\ufff8\036\ufff8\042\ufff8\060\ufff8\061" +
    "\ufff8\062\ufff8\063\ufff8\001\002\000\004\012\272\001\002" +
    "\000\022\004\021\010\024\036\026\042\ufffc\060\023\061" +
    "\030\062\017\063\015\001\002\000\004\017\uffe8\001\002" +
    "\000\022\004\ufff9\010\ufff9\036\ufff9\042\ufff9\060\ufff9\061" +
    "\ufff9\062\ufff9\063\ufff9\001\002\000\004\017\033\001\002" +
    "\000\020\051\034\052\052\053\051\054\044\055\040\056" +
    "\053\057\046\001\002\000\004\012\262\001\002\000\022" +
    "\050\uffed\051\uffed\052\uffed\053\uffed\054\uffed\055\uffed\056" +
    "\uffed\057\uffed\001\002\000\022\050\uffef\051\uffef\052\uffef" +
    "\053\uffef\054\uffef\055\uffef\056\uffef\057\uffef\001\002\000" +
    "\022\050\uffee\051\uffee\052\uffee\053\uffee\054\uffee\055\uffee" +
    "\056\uffee\057\uffee\001\002\000\004\012\253\001\002\000" +
    "\022\050\uffeb\051\uffeb\052\uffeb\053\uffeb\054\uffeb\055\uffeb" +
    "\056\uffeb\057\uffeb\001\002\000\022\050\uffec\051\uffec\052" +
    "\uffec\053\uffec\054\uffec\055\uffec\056\uffec\057\uffec\001\002" +
    "\000\022\050\uffe9\051\uffe9\052\uffe9\053\uffe9\054\uffe9\055" +
    "\uffe9\056\uffe9\057\uffe9\001\002\000\004\012\244\001\002" +
    "\000\022\050\ufff0\051\ufff0\052\ufff0\053\ufff0\054\ufff0\055" +
    "\ufff0\056\ufff0\057\ufff0\001\002\000\004\012\234\001\002" +
    "\000\022\050\uffea\051\uffea\052\uffea\053\uffea\054\uffea\055" +
    "\uffea\056\uffea\057\uffea\001\002\000\022\050\224\051\034" +
    "\052\052\053\051\054\044\055\040\056\053\057\046\001" +
    "\002\000\004\012\214\001\002\000\004\012\204\001\002" +
    "\000\004\012\054\001\002\000\004\012\055\001\002\000" +
    "\004\006\056\001\002\000\004\040\uffe6\001\002\000\004" +
    "\040\060\001\002\000\006\011\062\021\061\001\002\000" +
    "\040\005\077\023\071\024\106\025\076\026\103\027\102" +
    "\030\105\031\070\032\100\033\074\034\072\035\107\044" +
    "\067\045\101\046\073\001\002\000\004\005\066\001\002" +
    "\000\004\042\064\001\002\000\004\047\065\001\002\000" +
    "\022\050\uffe5\051\uffe5\052\uffe5\053\uffe5\054\uffe5\055\uffe5" +
    "\056\uffe5\057\uffe5\001\002\000\004\042\uffdd\001\002\000" +
    "\014\015\uffc4\016\uffc4\020\uffc4\022\uffc4\042\uffc4\001\002" +
    "\000\004\017\uffb9\001\002\000\004\017\173\001\002\000" +
    "\004\017\uffb3\001\002\000\014\015\uffc2\016\uffc2\020\uffc2" +
    "\022\uffc2\042\uffc2\001\002\000\004\017\uffb5\001\002\000" +
    "\006\016\161\022\160\001\002\000\004\017\153\001\002" +
    "\000\014\015\uffc1\016\uffc1\020\uffc1\022\uffc1\042\uffc1\001" +
    "\002\000\004\017\uffb7\001\002\000\014\015\uffc3\016\uffc3" +
    "\020\uffc3\022\uffc3\042\uffc3\001\002\000\004\017\142\001" +
    "\002\000\004\017\135\001\002\000\006\016\uffda\022\uffda" +
    "\001\002\000\004\017\uffbb\001\002\000\004\017\124\001" +
    "\002\000\004\017\uffb1\001\002\000\004\017\111\001\002" +
    "\000\006\011\114\021\113\001\002\000\004\020\123\001" +
    "\002\000\040\005\077\023\071\024\106\025\076\026\103" +
    "\027\102\030\105\031\070\032\100\033\074\034\072\035" +
    "\107\044\067\045\101\046\073\001\002\000\004\005\115" +
    "\001\002\000\004\020\uffaf\001\002\000\006\016\121\022" +
    "\120\001\002\000\006\016\uffac\022\uffac\001\002\000\004" +
    "\020\uffae\001\002\000\040\005\077\023\071\024\106\025" +
    "\076\026\103\027\102\030\105\031\070\032\100\033\074" +
    "\034\072\035\107\044\067\045\101\046\073\001\002\000" +
    "\006\016\uffad\022\uffad\001\002\000\014\015\uffb0\016\uffb0" +
    "\020\uffb0\022\uffb0\042\uffb0\001\002\000\040\005\077\023" +
    "\071\024\106\025\076\026\103\027\102\030\105\031\070" +
    "\032\100\033\074\034\072\035\107\044\067\045\101\046" +
    "\073\001\002\000\004\016\126\001\002\000\040\005\077" +
    "\023\071\024\106\025\076\026\103\027\102\030\105\031" +
    "\070\032\100\033\074\034\072\035\107\044\067\045\101" +
    "\046\073\001\002\000\004\020\130\001\002\000\014\015" +
    "\uffbf\016\uffbf\020\uffbf\022\uffbf\042\uffbf\001\002\000\004" +
    "\017\132\001\002\000\006\011\114\021\113\001\002\000" +
    "\004\020\134\001\002\000\014\015\uffba\016\uffba\020\uffba" +
    "\022\uffba\042\uffba\001\002\000\040\005\077\023\071\024" +
    "\106\025\076\026\103\027\102\030\105\031\070\032\100" +
    "\033\074\034\072\035\107\044\067\045\101\046\073\001" +
    "\002\000\004\016\137\001\002\000\040\005\077\023\071" +
    "\024\106\025\076\026\103\027\102\030\105\031\070\032" +
    "\100\033\074\034\072\035\107\044\067\045\101\046\073" +
    "\001\002\000\004\020\141\001\002\000\014\015\uffbd\016" +
    "\uffbd\020\uffbd\022\uffbd\042\uffbd\001\002\000\040\005\077" +
    "\023\071\024\106\025\076\026\103\027\102\030\105\031" +
    "\070\032\100\033\074\034\072\035\107\044\067\045\101" +
    "\046\073\001\002\000\004\016\144\001\002\000\040\005" +
    "\077\023\071\024\106\025\076\026\103\027\102\030\105" +
    "\031\070\032\100\033\074\034\072\035\107\044\067\045" +
    "\101\046\073\001\002\000\004\020\146\001\002\000\014" +
    "\015\uffbc\016\uffbc\020\uffbc\022\uffbc\042\uffbc\001\002\000" +
    "\004\017\150\001\002\000\006\011\114\021\113\001\002" +
    "\000\004\020\152\001\002\000\014\015\uffb6\016\uffb6\020" +
    "\uffb6\022\uffb6\042\uffb6\001\002\000\040\005\077\023\071" +
    "\024\106\025\076\026\103\027\102\030\105\031\070\032" +
    "\100\033\074\034\072\035\107\044\067\045\101\046\073" +
    "\001\002\000\004\016\155\001\002\000\040\005\077\023" +
    "\071\024\106\025\076\026\103\027\102\030\105\031\070" +
    "\032\100\033\074\034\072\035\107\044\067\045\101\046" +
    "\073\001\002\000\004\020\157\001\002\000\014\015\uffbe" +
    "\016\uffbe\020\uffbe\022\uffbe\042\uffbe\001\002\000\004\042" +
    "\uffdc\001\002\000\040\005\077\023\071\024\106\025\076" +
    "\026\103\027\102\030\105\031\070\032\100\033\074\034" +
    "\072\035\107\044\067\045\101\046\073\001\002\000\006" +
    "\016\uffdb\022\uffdb\001\002\000\004\017\164\001\002\000" +
    "\006\011\114\021\113\001\002\000\004\020\166\001\002" +
    "\000\014\015\uffb4\016\uffb4\020\uffb4\022\uffb4\042\uffb4\001" +
    "\002\000\004\017\170\001\002\000\006\011\114\021\113" +
    "\001\002\000\004\020\172\001\002\000\014\015\uffb2\016" +
    "\uffb2\020\uffb2\022\uffb2\042\uffb2\001\002\000\040\005\077" +
    "\023\071\024\106\025\076\026\103\027\102\030\105\031" +
    "\070\032\100\033\074\034\072\035\107\044\067\045\101" +
    "\046\073\001\002\000\004\016\175\001\002\000\040\005" +
    "\077\023\071\024\106\025\076\026\103\027\102\030\105" +
    "\031\070\032\100\033\074\034\072\035\107\044\067\045" +
    "\101\046\073\001\002\000\004\020\177\001\002\000\014" +
    "\015\uffc0\016\uffc0\020\uffc0\022\uffc0\042\uffc0\001\002\000" +
    "\004\017\201\001\002\000\006\011\114\021\113\001\002" +
    "\000\004\020\203\001\002\000\014\015\uffb8\016\uffb8\020" +
    "\uffb8\022\uffb8\042\uffb8\001\002\000\004\012\205\001\002" +
    "\000\004\007\206\001\002\000\004\040\uffe1\001\002\000" +
    "\004\040\210\001\002\000\006\011\062\021\061\001\002" +
    "\000\004\042\212\001\002\000\004\047\213\001\002\000" +
    "\022\050\uffe0\051\uffe0\052\uffe0\053\uffe0\054\uffe0\055\uffe0" +
    "\056\uffe0\057\uffe0\001\002\000\004\012\215\001\002\000" +
    "\004\006\216\001\002\000\004\040\uffdf\001\002\000\004" +
    "\040\220\001\002\000\006\011\062\021\061\001\002\000" +
    "\004\042\222\001\002\000\004\047\223\001\002\000\022" +
    "\050\uffde\051\uffde\052\uffde\053\uffde\054\uffde\055\uffde\056" +
    "\uffde\057\uffde\001\002\000\004\066\226\001\002\000\022" +
    "\050\ufff1\051\ufff1\052\ufff1\053\ufff1\054\ufff1\055\ufff1\056" +
    "\ufff1\057\ufff1\001\002\000\004\042\227\001\002\000\004" +
    "\047\230\001\002\000\004\020\231\001\002\000\004\042" +
    "\232\001\002\000\004\047\233\001\002\000\022\004\uffe7" +
    "\010\uffe7\036\uffe7\042\uffe7\060\uffe7\061\uffe7\062\uffe7\063" +
    "\uffe7\001\002\000\004\012\235\001\002\000\004\007\236" +
    "\001\002\000\004\040\uffe4\001\002\000\004\040\240\001" +
    "\002\000\006\011\062\021\061\001\002\000\004\042\242" +
    "\001\002\000\004\047\243\001\002\000\022\050\uffe3\051" +
    "\uffe3\052\uffe3\053\uffe3\054\uffe3\055\uffe3\056\uffe3\057\uffe3" +
    "\001\002\000\004\012\245\001\002\000\004\007\246\001" +
    "\002\000\004\040\247\001\002\000\040\005\077\023\071" +
    "\024\106\025\076\026\103\027\102\030\105\031\070\032" +
    "\100\033\074\034\072\035\107\044\067\045\101\046\073" +
    "\001\002\000\004\042\251\001\002\000\004\047\252\001" +
    "\002\000\022\050\uffd9\051\uffd9\052\uffd9\053\uffd9\054\uffd9" +
    "\055\uffd9\056\uffd9\057\uffd9\001\002\000\004\012\254\001" +
    "\002\000\004\007\255\001\002\000\004\040\256\001\002" +
    "\000\040\005\077\023\071\024\106\025\076\026\103\027" +
    "\102\030\105\031\070\032\100\033\074\034\072\035\107" +
    "\044\067\045\101\046\073\001\002\000\004\042\260\001" +
    "\002\000\004\047\261\001\002\000\022\050\uffd8\051\uffd8" +
    "\052\uffd8\053\uffd8\054\uffd8\055\uffd8\056\uffd8\057\uffd8\001" +
    "\002\000\004\012\263\001\002\000\004\007\264\001\002" +
    "\000\004\040\265\001\002\000\040\005\077\023\071\024" +
    "\106\025\076\026\103\027\102\030\105\031\070\032\100" +
    "\033\074\034\072\035\107\044\067\045\101\046\073\001" +
    "\002\000\004\042\267\001\002\000\004\047\270\001\002" +
    "\000\022\050\uffe2\051\uffe2\052\uffe2\053\uffe2\054\uffe2\055" +
    "\uffe2\056\uffe2\057\uffe2\001\002\000\004\042\ufffd\001\002" +
    "\000\004\012\273\001\002\000\006\037\274\041\275\001" +
    "\002\000\004\040\316\001\002\000\004\040\276\001\002" +
    "\000\040\005\077\023\071\024\106\025\076\026\103\027" +
    "\102\030\105\031\070\032\100\033\074\034\072\035\107" +
    "\044\067\045\101\046\073\001\002\000\004\015\uffd2\001" +
    "\002\000\004\015\301\001\002\000\004\014\302\001\002" +
    "\000\006\011\305\021\303\001\002\000\040\005\077\023" +
    "\071\024\106\025\076\026\103\027\102\030\105\031\070" +
    "\032\100\033\074\034\072\035\107\044\067\045\101\046" +
    "\073\001\002\000\004\042\307\001\002\000\004\005\306" +
    "\001\002\000\004\042\uffce\001\002\000\004\047\310\001" +
    "\002\000\022\004\uffd1\010\uffd1\036\uffd1\042\uffd1\060\uffd1" +
    "\061\uffd1\062\uffd1\063\uffd1\001\002\000\006\016\314\022" +
    "\313\001\002\000\006\016\uffcb\022\uffcb\001\002\000\004" +
    "\042\uffcd\001\002\000\040\005\077\023\071\024\106\025" +
    "\076\026\103\027\102\030\105\031\070\032\100\033\074" +
    "\034\072\035\107\044\067\045\101\046\073\001\002\000" +
    "\006\016\uffcc\022\uffcc\001\002\000\040\005\077\023\071" +
    "\024\106\025\076\026\103\027\102\030\105\031\070\032" +
    "\100\033\074\034\072\035\107\044\067\045\101\046\073" +
    "\001\002\000\006\016\321\042\322\001\002\000\006\016" +
    "\uffcf\042\uffcf\001\002\000\040\005\077\023\071\024\106" +
    "\025\076\026\103\027\102\030\105\031\070\032\100\033" +
    "\074\034\072\035\107\044\067\045\101\046\073\001\002" +
    "\000\004\047\323\001\002\000\022\004\uffd3\010\uffd3\036" +
    "\uffd3\042\uffd3\060\uffd3\061\uffd3\062\uffd3\063\uffd3\001\002" +
    "\000\006\016\uffd0\042\uffd0\001\002\000\006\006\326\007" +
    "\330\001\002\000\004\012\uffc8\001\002\000\004\012\331" +
    "\001\002\000\004\012\uffc7\001\002\000\004\012\332\001" +
    "\002\000\004\011\333\001\002\000\004\005\334\001\002" +
    "\000\004\013\335\001\002\000\004\015\336\001\002\000" +
    "\004\021\337\001\002\000\040\005\077\023\071\024\106" +
    "\025\076\026\103\027\102\030\105\031\070\032\100\033" +
    "\074\034\072\035\107\044\067\045\101\046\073\001\002" +
    "\000\006\016\343\022\342\001\002\000\006\016\uffc5\022" +
    "\uffc5\001\002\000\004\042\345\001\002\000\040\005\077" +
    "\023\071\024\106\025\076\026\103\027\102\030\105\031" +
    "\070\032\100\033\074\034\072\035\107\044\067\045\101" +
    "\046\073\001\002\000\006\016\uffc6\022\uffc6\001\002\000" +
    "\004\047\346\001\002\000\022\004\uffc9\010\uffc9\036\uffc9" +
    "\042\uffc9\060\uffc9\061\uffc9\062\uffc9\063\uffc9\001\002\000" +
    "\004\017\350\001\002\000\020\051\034\052\052\053\051" +
    "\054\044\055\040\056\053\057\046\001\002\000\022\050" +
    "\352\051\034\052\052\053\051\054\044\055\040\056\053" +
    "\057\046\001\002\000\004\064\353\001\002\000\004\042" +
    "\354\001\002\000\004\047\355\001\002\000\004\020\356" +
    "\001\002\000\004\042\357\001\002\000\004\047\360\001" +
    "\002\000\022\004\ufff2\010\ufff2\036\ufff2\042\ufff2\060\ufff2" +
    "\061\ufff2\062\ufff2\063\ufff2\001\002\000\006\006\326\007" +
    "\330\001\002\000\004\012\363\001\002\000\004\012\364" +
    "\001\002\000\004\005\365\001\002\000\004\013\366\001" +
    "\002\000\004\015\367\001\002\000\040\005\077\023\071" +
    "\024\106\025\076\026\103\027\102\030\105\031\070\032" +
    "\100\033\074\034\072\035\107\044\067\045\101\046\073" +
    "\001\002\000\004\042\371\001\002\000\004\047\372\001" +
    "\002\000\022\004\uffca\010\uffca\036\uffca\042\uffca\060\uffca" +
    "\061\uffca\062\uffca\063\uffca\001\002\000\004\017\374\001" +
    "\002\000\020\051\034\052\052\053\051\054\044\055\040" +
    "\056\053\057\046\001\002\000\022\050\376\051\034\052" +
    "\052\053\051\054\044\055\040\056\053\057\046\001\002" +
    "\000\004\065\377\001\002\000\004\042\u0100\001\002\000" +
    "\004\047\u0101\001\002\000\004\020\u0102\001\002\000\004" +
    "\042\u0103\001\002\000\004\047\u0104\001\002\000\022\004" +
    "\uffd6\010\uffd6\036\uffd6\042\uffd6\060\uffd6\061\uffd6\062\uffd6" +
    "\063\uffd6\001\002\000\004\043\u0106\001\002\000\004\002" +
    "\uffff\001\002\000\004\017\u0108\001\002\000\004\051\034" +
    "\001\002\000\004\057\046\001\002\000\004\050\u010b\001" +
    "\002\000\004\062\u010c\001\002\000\004\042\u010d\001\002" +
    "\000\004\047\u010e\001\002\000\004\020\u010f\001\002\000" +
    "\004\042\u0110\001\002\000\004\047\u0111\001\002\000\022" +
    "\004\uffd4\010\uffd4\036\uffd4\042\uffd4\060\uffd4\061\uffd4\062" +
    "\uffd4\063\uffd4\001\002" });

  /** Access to parse-action table. */
  public short[][] action_table() {return _action_table;}

  /** <code>reduce_goto</code> table. */
  protected static final short[][] _reduce_table = 
    unpackFromStrings(new String[] {
    "\000\u010f\000\006\002\005\040\004\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\026\005\013\007\011\010\012\020\024\021\010\023" +
    "\015\024\026\025\017\032\021\034\030\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\004\050\u0106\001\001\000\002\001\001\000\004" +
    "\047\372\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\004\041\346\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\026\005\013\007" +
    "\011\010\012\020\024\021\010\023\270\024\026\025\017" +
    "\032\021\034\030\001\001\000\004\042\031\001\001\000" +
    "\002\001\001\000\002\001\001\000\024\003\044\004\047" +
    "\006\042\011\046\012\041\013\040\014\036\015\034\022" +
    "\035\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\022\003\224\006\042\011\046\012\041\013\040\014\036" +
    "\015\034\022\035\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\004\043\056\001\001\000\002\001\001\000\004\016" +
    "\062\001\001\000\006\017\074\031\103\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\004\053\177" +
    "\001\001\000\002\001\001\000\004\056\166\001\001\000" +
    "\002\001\001\000\004\055\162\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\004\054\146\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\004\052\130\001\001\000\002\001" +
    "\001\000\004\057\107\001\001\000\002\001\001\000\004" +
    "\027\111\001\001\000\002\001\001\000\006\026\115\031" +
    "\116\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\004\031" +
    "\121\001\001\000\002\001\001\000\002\001\001\000\004" +
    "\031\124\001\001\000\002\001\001\000\004\031\126\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\004\027\132\001\001\000\002\001\001\000\002\001" +
    "\001\000\004\031\135\001\001\000\002\001\001\000\004" +
    "\031\137\001\001\000\002\001\001\000\002\001\001\000" +
    "\004\031\142\001\001\000\002\001\001\000\004\031\144" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\004\027\150\001\001\000\002\001\001\000\002" +
    "\001\001\000\004\031\153\001\001\000\002\001\001\000" +
    "\004\031\155\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\004\031\161\001\001\000\002\001" +
    "\001\000\002\001\001\000\004\027\164\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\004\027" +
    "\170\001\001\000\002\001\001\000\002\001\001\000\004" +
    "\031\173\001\001\000\002\001\001\000\004\031\175\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\004\027\201\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\004\045\206" +
    "\001\001\000\002\001\001\000\004\016\210\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\004\046\216\001\001\000" +
    "\002\001\001\000\004\016\220\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\004\044\236" +
    "\001\001\000\002\001\001\000\004\016\240\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\004\031" +
    "\247\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\004\031\256\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\004\031\265\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\004\031\276\001\001\000\004\051" +
    "\277\001\001\000\002\001\001\000\002\001\001\000\004" +
    "\037\303\001\001\000\006\031\311\035\310\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\004\031\314\001\001\000\002" +
    "\001\001\000\006\031\317\036\316\001\001\000\002\001" +
    "\001\000\002\001\001\000\004\031\323\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\004\030" +
    "\326\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\006\031\340\033\337\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\004\031\343\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\024\003\044\004\350\006\042\011\046" +
    "\012\041\013\040\014\036\015\034\022\035\001\001\000" +
    "\022\003\224\006\042\011\046\012\041\013\040\014\036" +
    "\015\034\022\035\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\004\030\361\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\004\031\367\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\024\003\044\004\374\006\042\011" +
    "\046\012\041\013\040\014\036\015\034\022\035\001\001" +
    "\000\022\003\224\006\042\011\046\012\041\013\040\014" +
    "\036\015\034\022\035\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\004\022\u0108\001" +
    "\001\000\004\011\u0109\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "" });

  /** Access to <code>reduce_goto</code> table. */
  public short[][] reduce_table() {return _reduce_table;}

  /** Instance of action encapsulation class. */
  protected CUP$sintactical$actions action_obj;

  /** Action encapsulation object initializer. */
  protected void init_actions()
    {
      action_obj = new CUP$sintactical$actions(this);
    }

  /** Invoke a user supplied parse action. */
  public java_cup.runtime.Symbol do_action(
    int                        act_num,
    java_cup.runtime.lr_parser parser,
    java.util.Stack            stack,
    int                        top)
    throws java.lang.Exception
  {
    /* call code in generated class */
    return action_obj.CUP$sintactical$do_action(act_num, parser, stack, top);
  }

  /** Indicates start state. */
  public int start_state() {return 0;}
  /** Indicates start production. */
  public int start_production() {return 0;}

  /** <code>EOF</code> Symbol index. */
  public int EOF_sym() {return 0;}

  /** <code>error</code> Symbol index. */
  public int error_sym() {return 1;}



    public ArrayList<proyecto1_oc1_202010770.tabla_de_simbolos> tabla_simbolos = new ArrayList<>();
    public ArrayList<proyecto1_oc1_202010770.lista> lista_de_elementos = new ArrayList<>();
    public proyecto1_oc1_202010770.operaciones_aritmeticas operaciones = new operaciones_aritmeticas();
    public proyecto1_oc1_202010770.Impresion impresion = new Impresion();
    public String actual = "";
    public String datos_en_lista = "";
    public String operacion_estadistica = "";
    public String operacion_grafica ="";
    proyecto1_oc1_202010770.Graficar graficals = new proyecto1_oc1_202010770.Graficar();
    public String titulo_grafica = "";
    public String titulo_x_grafica = "";
    public String titulo_y_grafica = "";
    public String variable_en_x = "";
    public String variable_en_y = "";
    public String titulo_label = "";
    public String valor_de_pies = "";
 
    public int num_global = 0;
    public void syntax_error(Symbol s){
        System.out.println("Error Sintactico: "+ s.value +" Linea "+(s.right+1)+" columna "+(s.left+1)+"\n"  );
    }

    public void unrecovered_syntax_error(Symbol s) throws java.lang.Exception{ 
        System.out.println("Error de sintaxis no se pudo terminar de analizar: "+ s.value +" Linea "+(s.right+1)+" columna "+(s.left+1)+"\n" );
        
}


/** Cup generated class to encapsulate user supplied action code.*/
@SuppressWarnings({"rawtypes", "unchecked", "unused"})
class CUP$sintactical$actions {
  private final sintactical parser;

  /** Constructor */
  CUP$sintactical$actions(sintactical parser) {
    this.parser = parser;
  }

  /** Method 0 with the actual generated action code for actions 0 to 300. */
  public final java_cup.runtime.Symbol CUP$sintactical$do_action_part00000000(
    int                        CUP$sintactical$act_num,
    java_cup.runtime.lr_parser CUP$sintactical$parser,
    java.util.Stack            CUP$sintactical$stack,
    int                        CUP$sintactical$top)
    throws java.lang.Exception
    {
      /* Symbol object for return from actions */
      java_cup.runtime.Symbol CUP$sintactical$result;

      /* select the action based on the action number */
      switch (CUP$sintactical$act_num)
        {
          /*. . . . . . . . . . . . . . . . . . . .*/
          case 0: // $START ::= inicio EOF 
            {
              Object RESULT =null;
		int start_valleft = ((java_cup.runtime.Symbol)CUP$sintactical$stack.elementAt(CUP$sintactical$top-1)).left;
		int start_valright = ((java_cup.runtime.Symbol)CUP$sintactical$stack.elementAt(CUP$sintactical$top-1)).right;
		Object start_val = (Object)((java_cup.runtime.Symbol) CUP$sintactical$stack.elementAt(CUP$sintactical$top-1)).value;
		RESULT = start_val;
              CUP$sintactical$result = parser.getSymbolFactory().newSymbol("$START",0, ((java_cup.runtime.Symbol)CUP$sintactical$stack.elementAt(CUP$sintactical$top-1)), ((java_cup.runtime.Symbol)CUP$sintactical$stack.peek()), RESULT);
            }
          /* ACCEPT */
          CUP$sintactical$parser.done_parsing();
          return CUP$sintactical$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 1: // NT$0 ::= 
            {
              Object RESULT =null;
lista_de_elementos.add(new proyecto1_oc1_202010770.lista("char_temp"));lista_de_elementos.add(new proyecto1_oc1_202010770.lista("double_temp"));
              CUP$sintactical$result = parser.getSymbolFactory().newSymbol("NT$0",30, ((java_cup.runtime.Symbol)CUP$sintactical$stack.peek()), RESULT);
            }
          return CUP$sintactical$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 2: // inicio ::= NT$0 PROGRAM instruccion END PROGRAM 
            {
              Object RESULT =null;
              // propagate RESULT from NT$0
                RESULT = (Object) ((java_cup.runtime.Symbol) CUP$sintactical$stack.elementAt(CUP$sintactical$top-4)).value;
		RESULT="Se pudo!";
              CUP$sintactical$result = parser.getSymbolFactory().newSymbol("inicio",0, ((java_cup.runtime.Symbol)CUP$sintactical$stack.elementAt(CUP$sintactical$top-4)), ((java_cup.runtime.Symbol)CUP$sintactical$stack.peek()), RESULT);
            }
          return CUP$sintactical$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 3: // inicio ::= error 
            {
              Object RESULT =null;

              CUP$sintactical$result = parser.getSymbolFactory().newSymbol("inicio",0, ((java_cup.runtime.Symbol)CUP$sintactical$stack.peek()), ((java_cup.runtime.Symbol)CUP$sintactical$stack.peek()), RESULT);
            }
          return CUP$sintactical$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 4: // instruccion ::= lista_de_instrucciones instruccion 
            {
              Object RESULT =null;

              CUP$sintactical$result = parser.getSymbolFactory().newSymbol("instruccion",17, ((java_cup.runtime.Symbol)CUP$sintactical$stack.elementAt(CUP$sintactical$top-1)), ((java_cup.runtime.Symbol)CUP$sintactical$stack.peek()), RESULT);
            }
          return CUP$sintactical$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 5: // instruccion ::= lista_de_instrucciones 
            {
              Object RESULT =null;

              CUP$sintactical$result = parser.getSymbolFactory().newSymbol("instruccion",17, ((java_cup.runtime.Symbol)CUP$sintactical$stack.peek()), ((java_cup.runtime.Symbol)CUP$sintactical$stack.peek()), RESULT);
            }
          return CUP$sintactical$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 6: // lista_de_instrucciones ::= asignacion 
            {
              Object RESULT =null;

              CUP$sintactical$result = parser.getSymbolFactory().newSymbol("lista_de_instrucciones",18, ((java_cup.runtime.Symbol)CUP$sintactical$stack.peek()), ((java_cup.runtime.Symbol)CUP$sintactical$stack.peek()), RESULT);
            }
          return CUP$sintactical$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 7: // lista_de_instrucciones ::= lista 
            {
              Object RESULT =null;

              CUP$sintactical$result = parser.getSymbolFactory().newSymbol("lista_de_instrucciones",18, ((java_cup.runtime.Symbol)CUP$sintactical$stack.peek()), ((java_cup.runtime.Symbol)CUP$sintactical$stack.peek()), RESULT);
            }
          return CUP$sintactical$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 8: // lista_de_instrucciones ::= impresiones 
            {
              Object RESULT =null;

              CUP$sintactical$result = parser.getSymbolFactory().newSymbol("lista_de_instrucciones",18, ((java_cup.runtime.Symbol)CUP$sintactical$stack.peek()), ((java_cup.runtime.Symbol)CUP$sintactical$stack.peek()), RESULT);
            }
          return CUP$sintactical$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 9: // lista_de_instrucciones ::= graficar 
            {
              Object RESULT =null;

              CUP$sintactical$result = parser.getSymbolFactory().newSymbol("lista_de_instrucciones",18, ((java_cup.runtime.Symbol)CUP$sintactical$stack.peek()), ((java_cup.runtime.Symbol)CUP$sintactical$stack.peek()), RESULT);
            }
          return CUP$sintactical$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 10: // graficar ::= grafica_barras 
            {
              Object RESULT =null;

              CUP$sintactical$result = parser.getSymbolFactory().newSymbol("graficar",14, ((java_cup.runtime.Symbol)CUP$sintactical$stack.peek()), ((java_cup.runtime.Symbol)CUP$sintactical$stack.peek()), RESULT);
            }
          return CUP$sintactical$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 11: // graficar ::= grafica_pie 
            {
              Object RESULT =null;

              CUP$sintactical$result = parser.getSymbolFactory().newSymbol("graficar",14, ((java_cup.runtime.Symbol)CUP$sintactical$stack.peek()), ((java_cup.runtime.Symbol)CUP$sintactical$stack.peek()), RESULT);
            }
          return CUP$sintactical$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 12: // graficar ::= grafica_linea 
            {
              Object RESULT =null;

              CUP$sintactical$result = parser.getSymbolFactory().newSymbol("graficar",14, ((java_cup.runtime.Symbol)CUP$sintactical$stack.peek()), ((java_cup.runtime.Symbol)CUP$sintactical$stack.peek()), RESULT);
            }
          return CUP$sintactical$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 13: // graficar ::= grafica_histograma 
            {
              Object RESULT =null;

              CUP$sintactical$result = parser.getSymbolFactory().newSymbol("graficar",14, ((java_cup.runtime.Symbol)CUP$sintactical$stack.peek()), ((java_cup.runtime.Symbol)CUP$sintactical$stack.peek()), RESULT);
            }
          return CUP$sintactical$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 14: // NT$1 ::= 
            {
              Object RESULT =null;

for (proyecto1_oc1_202010770.lista elemento : lista_de_elementos) {
                if(elemento.variable.equals("char_temp")){
                   //elemento.refresh_list();
}
}

for (proyecto1_oc1_202010770.lista elemento : lista_de_elementos) {
                if(elemento.variable.equals("double_temp")){
                    //elemento.refresh_list();
}
}




              CUP$sintactical$result = parser.getSymbolFactory().newSymbol("NT$1",31, ((java_cup.runtime.Symbol)CUP$sintactical$stack.peek()), RESULT);
            }
          return CUP$sintactical$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 15: // grafica_barras ::= BARRAS NT$1 PARENTESIS_ABIERTO set_graficas EXEC BARRAS_2 END PUNTO_Y_COMA PARENTESIS_CERRADO END PUNTO_Y_COMA 
            {
              Object RESULT =null;
              // propagate RESULT from NT$1
                RESULT = (Object) ((java_cup.runtime.Symbol) CUP$sintactical$stack.elementAt(CUP$sintactical$top-9)).value;
		int varleft = ((java_cup.runtime.Symbol)CUP$sintactical$stack.elementAt(CUP$sintactical$top-7)).left;
		int varright = ((java_cup.runtime.Symbol)CUP$sintactical$stack.elementAt(CUP$sintactical$top-7)).right;
		Object var = (Object)((java_cup.runtime.Symbol) CUP$sintactical$stack.elementAt(CUP$sintactical$top-7)).value;
		

proyecto1_oc1_202010770.lista lista_double = null;
for (proyecto1_oc1_202010770.lista elemento : lista_de_elementos) {
               
                    if(elemento.variable.equals(variable_en_x)){
                        System.out.println("vamos bien");
                        lista_double = elemento;
                        //lista_double.mostrarElementos();
                        break;
                    }
}      

proyecto1_oc1_202010770.lista lista_string = null;
for (proyecto1_oc1_202010770.lista elemento : lista_de_elementos) {
               
                    if(elemento.variable.equals(variable_en_y)){
                       System.out.println("vamos bie2n");
                        lista_string = elemento;
                        //lista_string.mostrarElementos();
                       
                        break;
                    }
}
System.out.println("El valor es: "+ 1);

graficals.barras(titulo_grafica, titulo_x_grafica, titulo_x_grafica,lista_double.lista, lista_string.lista);
RESULT= "Impresion";

              CUP$sintactical$result = parser.getSymbolFactory().newSymbol("grafica_barras",15, ((java_cup.runtime.Symbol)CUP$sintactical$stack.elementAt(CUP$sintactical$top-10)), ((java_cup.runtime.Symbol)CUP$sintactical$stack.peek()), RESULT);
            }
          return CUP$sintactical$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 16: // set_graficas ::= set_graficas nueva_lista_graficas 
            {
              Object RESULT =null;
		RESULT ="O";
              CUP$sintactical$result = parser.getSymbolFactory().newSymbol("set_graficas",2, ((java_cup.runtime.Symbol)CUP$sintactical$stack.elementAt(CUP$sintactical$top-1)), ((java_cup.runtime.Symbol)CUP$sintactical$stack.peek()), RESULT);
            }
          return CUP$sintactical$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 17: // set_graficas ::= nueva_lista_graficas 
            {
              Object RESULT =null;
		RESULT ="O";
              CUP$sintactical$result = parser.getSymbolFactory().newSymbol("set_graficas",2, ((java_cup.runtime.Symbol)CUP$sintactical$stack.peek()), ((java_cup.runtime.Symbol)CUP$sintactical$stack.peek()), RESULT);
            }
          return CUP$sintactical$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 18: // nueva_lista_graficas ::= asignacion_titulo 
            {
              Object RESULT =null;
		int tituloleft = ((java_cup.runtime.Symbol)CUP$sintactical$stack.peek()).left;
		int tituloright = ((java_cup.runtime.Symbol)CUP$sintactical$stack.peek()).right;
		Object titulo = (Object)((java_cup.runtime.Symbol) CUP$sintactical$stack.peek()).value;
		titulo_grafica = titulo.toString(); RESULT= "VOY";
              CUP$sintactical$result = parser.getSymbolFactory().newSymbol("nueva_lista_graficas",1, ((java_cup.runtime.Symbol)CUP$sintactical$stack.peek()), ((java_cup.runtime.Symbol)CUP$sintactical$stack.peek()), RESULT);
            }
          return CUP$sintactical$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 19: // nueva_lista_graficas ::= eje_x 
            {
              Object RESULT =null;
		int variable_xleft = ((java_cup.runtime.Symbol)CUP$sintactical$stack.peek()).left;
		int variable_xright = ((java_cup.runtime.Symbol)CUP$sintactical$stack.peek()).right;
		Object variable_x = (Object)((java_cup.runtime.Symbol) CUP$sintactical$stack.peek()).value;
		 variable_en_x= variable_x.toString(); RESULT= "VOY";
              CUP$sintactical$result = parser.getSymbolFactory().newSymbol("nueva_lista_graficas",1, ((java_cup.runtime.Symbol)CUP$sintactical$stack.peek()), ((java_cup.runtime.Symbol)CUP$sintactical$stack.peek()), RESULT);
            }
          return CUP$sintactical$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 20: // nueva_lista_graficas ::= eje_y 
            {
              Object RESULT =null;
		int variable_yleft = ((java_cup.runtime.Symbol)CUP$sintactical$stack.peek()).left;
		int variable_yright = ((java_cup.runtime.Symbol)CUP$sintactical$stack.peek()).right;
		Object variable_y = (Object)((java_cup.runtime.Symbol) CUP$sintactical$stack.peek()).value;
		variable_en_y = variable_y.toString(); RESULT= "VOY";
              CUP$sintactical$result = parser.getSymbolFactory().newSymbol("nueva_lista_graficas",1, ((java_cup.runtime.Symbol)CUP$sintactical$stack.peek()), ((java_cup.runtime.Symbol)CUP$sintactical$stack.peek()), RESULT);
            }
          return CUP$sintactical$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 21: // nueva_lista_graficas ::= titulo_x 
            {
              Object RESULT =null;
		int title_xleft = ((java_cup.runtime.Symbol)CUP$sintactical$stack.peek()).left;
		int title_xright = ((java_cup.runtime.Symbol)CUP$sintactical$stack.peek()).right;
		Object title_x = (Object)((java_cup.runtime.Symbol) CUP$sintactical$stack.peek()).value;
		titulo_x_grafica = title_x.toString();RESULT= "VOY";
              CUP$sintactical$result = parser.getSymbolFactory().newSymbol("nueva_lista_graficas",1, ((java_cup.runtime.Symbol)CUP$sintactical$stack.peek()), ((java_cup.runtime.Symbol)CUP$sintactical$stack.peek()), RESULT);
            }
          return CUP$sintactical$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 22: // nueva_lista_graficas ::= titulo_y 
            {
              Object RESULT =null;
		int title_yleft = ((java_cup.runtime.Symbol)CUP$sintactical$stack.peek()).left;
		int title_yright = ((java_cup.runtime.Symbol)CUP$sintactical$stack.peek()).right;
		Object title_y = (Object)((java_cup.runtime.Symbol) CUP$sintactical$stack.peek()).value;
		titulo_y_grafica = title_y.toString();RESULT= "VOY";
              CUP$sintactical$result = parser.getSymbolFactory().newSymbol("nueva_lista_graficas",1, ((java_cup.runtime.Symbol)CUP$sintactical$stack.peek()), ((java_cup.runtime.Symbol)CUP$sintactical$stack.peek()), RESULT);
            }
          return CUP$sintactical$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 23: // nueva_lista_graficas ::= label_pie 
            {
              Object RESULT =null;
		int labelesleft = ((java_cup.runtime.Symbol)CUP$sintactical$stack.peek()).left;
		int labelesright = ((java_cup.runtime.Symbol)CUP$sintactical$stack.peek()).right;
		Object labeles = (Object)((java_cup.runtime.Symbol) CUP$sintactical$stack.peek()).value;
		titulo_label = labeles.toString();
              CUP$sintactical$result = parser.getSymbolFactory().newSymbol("nueva_lista_graficas",1, ((java_cup.runtime.Symbol)CUP$sintactical$stack.peek()), ((java_cup.runtime.Symbol)CUP$sintactical$stack.peek()), RESULT);
            }
          return CUP$sintactical$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 24: // nueva_lista_graficas ::= valores_pie 
            {
              Object RESULT =null;
		int valor_variableleft = ((java_cup.runtime.Symbol)CUP$sintactical$stack.peek()).left;
		int valor_variableright = ((java_cup.runtime.Symbol)CUP$sintactical$stack.peek()).right;
		Object valor_variable = (Object)((java_cup.runtime.Symbol) CUP$sintactical$stack.peek()).value;
		valor_de_pies = valor_variable.toString();
              CUP$sintactical$result = parser.getSymbolFactory().newSymbol("nueva_lista_graficas",1, ((java_cup.runtime.Symbol)CUP$sintactical$stack.peek()), ((java_cup.runtime.Symbol)CUP$sintactical$stack.peek()), RESULT);
            }
          return CUP$sintactical$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 25: // NT$2 ::= 
            {
              Object RESULT =null;


for (proyecto1_oc1_202010770.lista elemento : lista_de_elementos) {
                if(elemento.variable.equals("char_temp")){
                   elemento.refresh_list();
}
}

for (proyecto1_oc1_202010770.lista elemento : lista_de_elementos) {
                if(elemento.variable.equals("double_temp")){
                    elemento.refresh_list();
}
}




              CUP$sintactical$result = parser.getSymbolFactory().newSymbol("NT$2",32, ((java_cup.runtime.Symbol)CUP$sintactical$stack.peek()), RESULT);
            }
          return CUP$sintactical$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 26: // grafica_pie ::= PIE NT$2 PARENTESIS_ABIERTO set_graficas EXEC PIE_2 END PUNTO_Y_COMA PARENTESIS_CERRADO END PUNTO_Y_COMA 
            {
              Object RESULT =null;
              // propagate RESULT from NT$2
                RESULT = (Object) ((java_cup.runtime.Symbol) CUP$sintactical$stack.elementAt(CUP$sintactical$top-9)).value;
		

proyecto1_oc1_202010770.lista lista_double = null;
proyecto1_oc1_202010770.lista lista_string = null;
for (proyecto1_oc1_202010770.lista elemento : lista_de_elementos) {
               
                    if(elemento.variable.equals(titulo_label)){
           
                        lista_string = elemento;
                        
                        break;
                    }
}  

for (proyecto1_oc1_202010770.lista elemento : lista_de_elementos) {
               
                    if(elemento.variable.equals(valor_de_pies)){
                        
                        lista_double = elemento;
                        
                        break;
                    }
}  
graficals.Pie(titulo_grafica, lista_double.lista, lista_string.lista);
RESULT= "AS";

              CUP$sintactical$result = parser.getSymbolFactory().newSymbol("grafica_pie",5, ((java_cup.runtime.Symbol)CUP$sintactical$stack.elementAt(CUP$sintactical$top-10)), ((java_cup.runtime.Symbol)CUP$sintactical$stack.peek()), RESULT);
            }
          return CUP$sintactical$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 27: // NT$3 ::= 
            {
              Object RESULT =null;
operacion_grafica= "double";
              CUP$sintactical$result = parser.getSymbolFactory().newSymbol("NT$3",33, ((java_cup.runtime.Symbol)CUP$sintactical$stack.peek()), RESULT);
            }
          return CUP$sintactical$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 28: // valores_pie ::= VALUES DOS_PUNTOS DOS_PUNTOS DOUBLE NT$3 IGUAL lista_grafica END PUNTO_Y_COMA 
            {
              Object RESULT =null;
              // propagate RESULT from NT$3
                RESULT = (Object) ((java_cup.runtime.Symbol) CUP$sintactical$stack.elementAt(CUP$sintactical$top-4)).value;
		int valorleft = ((java_cup.runtime.Symbol)CUP$sintactical$stack.elementAt(CUP$sintactical$top-2)).left;
		int valorright = ((java_cup.runtime.Symbol)CUP$sintactical$stack.elementAt(CUP$sintactical$top-2)).right;
		Object valor = (Object)((java_cup.runtime.Symbol) CUP$sintactical$stack.elementAt(CUP$sintactical$top-2)).value;
		RESULT = valor.toString();
              CUP$sintactical$result = parser.getSymbolFactory().newSymbol("valores_pie",4, ((java_cup.runtime.Symbol)CUP$sintactical$stack.elementAt(CUP$sintactical$top-8)), ((java_cup.runtime.Symbol)CUP$sintactical$stack.peek()), RESULT);
            }
          return CUP$sintactical$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 29: // NT$4 ::= 
            {
              Object RESULT =null;
operacion_grafica= "cadena";
              CUP$sintactical$result = parser.getSymbolFactory().newSymbol("NT$4",34, ((java_cup.runtime.Symbol)CUP$sintactical$stack.peek()), RESULT);
            }
          return CUP$sintactical$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 30: // label_pie ::= LABEL DOS_PUNTOS DOS_PUNTOS CADENA NT$4 IGUAL lista_grafica END PUNTO_Y_COMA 
            {
              Object RESULT =null;
              // propagate RESULT from NT$4
                RESULT = (Object) ((java_cup.runtime.Symbol) CUP$sintactical$stack.elementAt(CUP$sintactical$top-4)).value;
		int valorleft = ((java_cup.runtime.Symbol)CUP$sintactical$stack.elementAt(CUP$sintactical$top-2)).left;
		int valorright = ((java_cup.runtime.Symbol)CUP$sintactical$stack.elementAt(CUP$sintactical$top-2)).right;
		Object valor = (Object)((java_cup.runtime.Symbol) CUP$sintactical$stack.elementAt(CUP$sintactical$top-2)).value;
		 RESULT = valor.toString();
              CUP$sintactical$result = parser.getSymbolFactory().newSymbol("label_pie",7, ((java_cup.runtime.Symbol)CUP$sintactical$stack.elementAt(CUP$sintactical$top-8)), ((java_cup.runtime.Symbol)CUP$sintactical$stack.peek()), RESULT);
            }
          return CUP$sintactical$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 31: // asignacion_titulo ::= TITULO DOS_PUNTOS DOS_PUNTOS CADENA IGUAL dato END PUNTO_Y_COMA 
            {
              Object RESULT =null;
		int resultadoleft = ((java_cup.runtime.Symbol)CUP$sintactical$stack.elementAt(CUP$sintactical$top-2)).left;
		int resultadoright = ((java_cup.runtime.Symbol)CUP$sintactical$stack.elementAt(CUP$sintactical$top-2)).right;
		Object resultado = (Object)((java_cup.runtime.Symbol) CUP$sintactical$stack.elementAt(CUP$sintactical$top-2)).value;
		RESULT = resultado.toString();
              CUP$sintactical$result = parser.getSymbolFactory().newSymbol("asignacion_titulo",16, ((java_cup.runtime.Symbol)CUP$sintactical$stack.elementAt(CUP$sintactical$top-7)), ((java_cup.runtime.Symbol)CUP$sintactical$stack.peek()), RESULT);
            }
          return CUP$sintactical$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 32: // NT$5 ::= 
            {
              Object RESULT =null;
operacion_grafica= "cadena";
              CUP$sintactical$result = parser.getSymbolFactory().newSymbol("NT$5",35, ((java_cup.runtime.Symbol)CUP$sintactical$stack.peek()), RESULT);
            }
          return CUP$sintactical$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 33: // eje_x ::= EJE_X DOS_PUNTOS DOS_PUNTOS CADENA NT$5 IGUAL lista_grafica END PUNTO_Y_COMA 
            {
              Object RESULT =null;
              // propagate RESULT from NT$5
                RESULT = (Object) ((java_cup.runtime.Symbol) CUP$sintactical$stack.elementAt(CUP$sintactical$top-4)).value;
		int bleft = ((java_cup.runtime.Symbol)CUP$sintactical$stack.elementAt(CUP$sintactical$top-2)).left;
		int bright = ((java_cup.runtime.Symbol)CUP$sintactical$stack.elementAt(CUP$sintactical$top-2)).right;
		Object b = (Object)((java_cup.runtime.Symbol) CUP$sintactical$stack.elementAt(CUP$sintactical$top-2)).value;
		RESULT=b;
              CUP$sintactical$result = parser.getSymbolFactory().newSymbol("eje_x",10, ((java_cup.runtime.Symbol)CUP$sintactical$stack.elementAt(CUP$sintactical$top-8)), ((java_cup.runtime.Symbol)CUP$sintactical$stack.peek()), RESULT);
            }
          return CUP$sintactical$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 34: // NT$6 ::= 
            {
              Object RESULT =null;
operacion_grafica= "double";
              CUP$sintactical$result = parser.getSymbolFactory().newSymbol("NT$6",36, ((java_cup.runtime.Symbol)CUP$sintactical$stack.peek()), RESULT);
            }
          return CUP$sintactical$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 35: // eje_y ::= EJE_Y DOS_PUNTOS DOS_PUNTOS DOUBLE NT$6 IGUAL lista_grafica END PUNTO_Y_COMA 
            {
              Object RESULT =null;
              // propagate RESULT from NT$6
                RESULT = (Object) ((java_cup.runtime.Symbol) CUP$sintactical$stack.elementAt(CUP$sintactical$top-4)).value;
		int bleft = ((java_cup.runtime.Symbol)CUP$sintactical$stack.elementAt(CUP$sintactical$top-2)).left;
		int bright = ((java_cup.runtime.Symbol)CUP$sintactical$stack.elementAt(CUP$sintactical$top-2)).right;
		Object b = (Object)((java_cup.runtime.Symbol) CUP$sintactical$stack.elementAt(CUP$sintactical$top-2)).value;
		RESULT=b;
              CUP$sintactical$result = parser.getSymbolFactory().newSymbol("eje_y",11, ((java_cup.runtime.Symbol)CUP$sintactical$stack.elementAt(CUP$sintactical$top-8)), ((java_cup.runtime.Symbol)CUP$sintactical$stack.peek()), RESULT);
            }
          return CUP$sintactical$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 36: // lista_grafica ::= ARROBA VARIABLE 
            {
              Object RESULT =null;
		int varleft = ((java_cup.runtime.Symbol)CUP$sintactical$stack.peek()).left;
		int varright = ((java_cup.runtime.Symbol)CUP$sintactical$stack.peek()).right;
		String var = (String)((java_cup.runtime.Symbol) CUP$sintactical$stack.peek()).value;
		RESULT = var;
              CUP$sintactical$result = parser.getSymbolFactory().newSymbol("lista_grafica",12, ((java_cup.runtime.Symbol)CUP$sintactical$stack.elementAt(CUP$sintactical$top-1)), ((java_cup.runtime.Symbol)CUP$sintactical$stack.peek()), RESULT);
            }
          return CUP$sintactical$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 37: // lista_grafica ::= CORCHETE_ABIERTO ultima_asignacion CORCHETE_CERRADO 
            {
              Object RESULT =null;
		


String vals = "char_temp";
lista_de_elementos.add(new proyecto1_oc1_202010770.lista(vals));
double numero = 0.0;
Scanner scanner = new Scanner(datos_en_lista);


while (scanner.hasNext()) {
            
            String numeroStr = scanner.next();
            
           
            for (proyecto1_oc1_202010770.lista elemento : lista_de_elementos) {
                if(operacion_grafica.equals("cadena")){
                   
                    if(elemento.variable.equals("char_temp")){
                        elemento.agregarElemento("char[]",vals, numeroStr.replace("Ñ", " "));
                    }
                }else{
                    if(elemento.variable.equals("double_temp")){
                        elemento.agregarElemento("double",vals, numeroStr.replace("Ñ", " "));
                    }
                }
                
                //elemento.mostrarElementos();
            }
        }
        if(operacion_grafica.equals("cadena")){
           
            RESULT ="char_temp";
            
        }else{
        RESULT ="double_temp";
        }

              CUP$sintactical$result = parser.getSymbolFactory().newSymbol("lista_grafica",12, ((java_cup.runtime.Symbol)CUP$sintactical$stack.elementAt(CUP$sintactical$top-2)), ((java_cup.runtime.Symbol)CUP$sintactical$stack.peek()), RESULT);
            }
          return CUP$sintactical$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 38: // ultima_asignacion ::= ultima_asignacion COMMA dato 
            {
              Object RESULT =null;
		int dataleft = ((java_cup.runtime.Symbol)CUP$sintactical$stack.peek()).left;
		int dataright = ((java_cup.runtime.Symbol)CUP$sintactical$stack.peek()).right;
		Object data = (Object)((java_cup.runtime.Symbol) CUP$sintactical$stack.peek()).value;
		datos_en_lista += " "+data.toString().replace(" ", "Ñ");
              CUP$sintactical$result = parser.getSymbolFactory().newSymbol("ultima_asignacion",13, ((java_cup.runtime.Symbol)CUP$sintactical$stack.elementAt(CUP$sintactical$top-2)), ((java_cup.runtime.Symbol)CUP$sintactical$stack.peek()), RESULT);
            }
          return CUP$sintactical$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 39: // ultima_asignacion ::= dato 
            {
              Object RESULT =null;
		int dataleft = ((java_cup.runtime.Symbol)CUP$sintactical$stack.peek()).left;
		int dataright = ((java_cup.runtime.Symbol)CUP$sintactical$stack.peek()).right;
		Object data = (Object)((java_cup.runtime.Symbol) CUP$sintactical$stack.peek()).value;
		datos_en_lista = data.toString().replace(" ", "Ñ");
              CUP$sintactical$result = parser.getSymbolFactory().newSymbol("ultima_asignacion",13, ((java_cup.runtime.Symbol)CUP$sintactical$stack.peek()), ((java_cup.runtime.Symbol)CUP$sintactical$stack.peek()), RESULT);
            }
          return CUP$sintactical$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 40: // titulo_x ::= TITULO_X DOS_PUNTOS DOS_PUNTOS CADENA IGUAL dato END PUNTO_Y_COMA 
            {
              Object RESULT =null;
		int dataleft = ((java_cup.runtime.Symbol)CUP$sintactical$stack.elementAt(CUP$sintactical$top-2)).left;
		int dataright = ((java_cup.runtime.Symbol)CUP$sintactical$stack.elementAt(CUP$sintactical$top-2)).right;
		Object data = (Object)((java_cup.runtime.Symbol) CUP$sintactical$stack.elementAt(CUP$sintactical$top-2)).value;
		RESULT = data.toString();
              CUP$sintactical$result = parser.getSymbolFactory().newSymbol("titulo_x",8, ((java_cup.runtime.Symbol)CUP$sintactical$stack.elementAt(CUP$sintactical$top-7)), ((java_cup.runtime.Symbol)CUP$sintactical$stack.peek()), RESULT);
            }
          return CUP$sintactical$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 41: // titulo_y ::= TITULO_Y DOS_PUNTOS DOS_PUNTOS CADENA IGUAL dato END PUNTO_Y_COMA 
            {
              Object RESULT =null;
		int dataleft = ((java_cup.runtime.Symbol)CUP$sintactical$stack.elementAt(CUP$sintactical$top-2)).left;
		int dataright = ((java_cup.runtime.Symbol)CUP$sintactical$stack.elementAt(CUP$sintactical$top-2)).right;
		Object data = (Object)((java_cup.runtime.Symbol) CUP$sintactical$stack.elementAt(CUP$sintactical$top-2)).value;
		RESULT = data.toString();
              CUP$sintactical$result = parser.getSymbolFactory().newSymbol("titulo_y",9, ((java_cup.runtime.Symbol)CUP$sintactical$stack.elementAt(CUP$sintactical$top-7)), ((java_cup.runtime.Symbol)CUP$sintactical$stack.peek()), RESULT);
            }
          return CUP$sintactical$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 42: // NT$7 ::= 
            {
              Object RESULT =null;

for (proyecto1_oc1_202010770.lista elemento : lista_de_elementos) {
                if(elemento.variable.equals("char_temp")){
                   elemento.refresh_list();
}
}

for (proyecto1_oc1_202010770.lista elemento : lista_de_elementos) {
                if(elemento.variable.equals("double_temp")){
                    elemento.refresh_list();
}
}




              CUP$sintactical$result = parser.getSymbolFactory().newSymbol("NT$7",37, ((java_cup.runtime.Symbol)CUP$sintactical$stack.peek()), RESULT);
            }
          return CUP$sintactical$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 43: // grafica_linea ::= LINEA NT$7 PARENTESIS_ABIERTO set_graficas EXEC LINEA_2 END PUNTO_Y_COMA PARENTESIS_CERRADO END PUNTO_Y_COMA 
            {
              Object RESULT =null;
              // propagate RESULT from NT$7
                RESULT = (Object) ((java_cup.runtime.Symbol) CUP$sintactical$stack.elementAt(CUP$sintactical$top-9)).value;
		

proyecto1_oc1_202010770.lista lista_double = null;
proyecto1_oc1_202010770.lista lista_string = null;
for (proyecto1_oc1_202010770.lista elemento : lista_de_elementos) {
               
                    if(elemento.variable.equals(variable_en_y)){
           
                        lista_string = elemento;
                        
                        break;
                    }
}  

for (proyecto1_oc1_202010770.lista elemento : lista_de_elementos) {
               
                    if(elemento.variable.equals(variable_en_x)){
                        
                        lista_double = elemento;
                        
                        break;
                    }
}  
graficals.linea(titulo_grafica,titulo_x_grafica, titulo_y_grafica, lista_double.lista, lista_string.lista);
RESULT= "AS";

              CUP$sintactical$result = parser.getSymbolFactory().newSymbol("grafica_linea",6, ((java_cup.runtime.Symbol)CUP$sintactical$stack.elementAt(CUP$sintactical$top-10)), ((java_cup.runtime.Symbol)CUP$sintactical$stack.peek()), RESULT);
            }
          return CUP$sintactical$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 44: // NT$8 ::= 
            {
              Object RESULT =null;

for (proyecto1_oc1_202010770.lista elemento : lista_de_elementos) {
                if(elemento.variable.equals("char_temp")){
                   elemento.refresh_list();
}
}

for (proyecto1_oc1_202010770.lista elemento : lista_de_elementos) {
                if(elemento.variable.equals("double_temp")){
                    elemento.refresh_list();
}
}




              CUP$sintactical$result = parser.getSymbolFactory().newSymbol("NT$8",38, ((java_cup.runtime.Symbol)CUP$sintactical$stack.peek()), RESULT);
            }
          return CUP$sintactical$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 45: // grafica_histograma ::= HISTOGRAM NT$8 PARENTESIS_ABIERTO asignacion_titulo label_pie EXEC LINEA END PUNTO_Y_COMA PARENTESIS_CERRADO END PUNTO_Y_COMA 
            {
              Object RESULT =null;
              // propagate RESULT from NT$8
                RESULT = (Object) ((java_cup.runtime.Symbol) CUP$sintactical$stack.elementAt(CUP$sintactical$top-10)).value;
		int tituloleft = ((java_cup.runtime.Symbol)CUP$sintactical$stack.elementAt(CUP$sintactical$top-8)).left;
		int tituloright = ((java_cup.runtime.Symbol)CUP$sintactical$stack.elementAt(CUP$sintactical$top-8)).right;
		Object titulo = (Object)((java_cup.runtime.Symbol) CUP$sintactical$stack.elementAt(CUP$sintactical$top-8)).value;
		int labelesleft = ((java_cup.runtime.Symbol)CUP$sintactical$stack.elementAt(CUP$sintactical$top-7)).left;
		int labelesright = ((java_cup.runtime.Symbol)CUP$sintactical$stack.elementAt(CUP$sintactical$top-7)).right;
		Object labeles = (Object)((java_cup.runtime.Symbol) CUP$sintactical$stack.elementAt(CUP$sintactical$top-7)).value;
		RESULT= "AS"; System.out.println(titulo.toString()+" "+labeles);
              CUP$sintactical$result = parser.getSymbolFactory().newSymbol("grafica_histograma",3, ((java_cup.runtime.Symbol)CUP$sintactical$stack.elementAt(CUP$sintactical$top-11)), ((java_cup.runtime.Symbol)CUP$sintactical$stack.peek()), RESULT);
            }
          return CUP$sintactical$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 46: // impresiones ::= CONSOLE DOS_PUNTOS DOS_PUNTOS PRINT IGUAL datos_de_impresion END PUNTO_Y_COMA 
            {
              Object RESULT =null;
		System.out.println("");
              CUP$sintactical$result = parser.getSymbolFactory().newSymbol("impresiones",26, ((java_cup.runtime.Symbol)CUP$sintactical$stack.elementAt(CUP$sintactical$top-7)), ((java_cup.runtime.Symbol)CUP$sintactical$stack.peek()), RESULT);
            }
          return CUP$sintactical$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 47: // NT$9 ::= 
            {
              Object RESULT =null;
		int actleft = ((java_cup.runtime.Symbol)CUP$sintactical$stack.peek()).left;
		int actright = ((java_cup.runtime.Symbol)CUP$sintactical$stack.peek()).right;
		Object act = (Object)((java_cup.runtime.Symbol) CUP$sintactical$stack.peek()).value;
        
        System.out.println("----------");
        System.out.println(act);
        System.out.println("----------");
              CUP$sintactical$result = parser.getSymbolFactory().newSymbol("NT$9",39, ((java_cup.runtime.Symbol)CUP$sintactical$stack.peek()), RESULT);
            }
          return CUP$sintactical$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 48: // impresiones ::= CONSOLE DOS_PUNTOS DOS_PUNTOS COLUMN IGUAL dato NT$9 DIAGONAL SLASH_MAYOR impresion_de_la_lista END PUNTO_Y_COMA 
            {
              Object RESULT =null;
              // propagate RESULT from NT$9
                RESULT = (Object) ((java_cup.runtime.Symbol) CUP$sintactical$stack.elementAt(CUP$sintactical$top-5)).value;
		int actleft = ((java_cup.runtime.Symbol)CUP$sintactical$stack.elementAt(CUP$sintactical$top-6)).left;
		int actright = ((java_cup.runtime.Symbol)CUP$sintactical$stack.elementAt(CUP$sintactical$top-6)).right;
		Object act = (Object)((java_cup.runtime.Symbol) CUP$sintactical$stack.elementAt(CUP$sintactical$top-6)).value;

              CUP$sintactical$result = parser.getSymbolFactory().newSymbol("impresiones",26, ((java_cup.runtime.Symbol)CUP$sintactical$stack.elementAt(CUP$sintactical$top-11)), ((java_cup.runtime.Symbol)CUP$sintactical$stack.peek()), RESULT);
            }
          return CUP$sintactical$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 49: // datos_de_impresion ::= datos_de_impresion COMMA dato 
            {
              Object RESULT =null;
		int datleft = ((java_cup.runtime.Symbol)CUP$sintactical$stack.peek()).left;
		int datright = ((java_cup.runtime.Symbol)CUP$sintactical$stack.peek()).right;
		Object dat = (Object)((java_cup.runtime.Symbol) CUP$sintactical$stack.peek()).value;
		impresion.imprimir(", "+dat.toString());
              CUP$sintactical$result = parser.getSymbolFactory().newSymbol("datos_de_impresion",28, ((java_cup.runtime.Symbol)CUP$sintactical$stack.elementAt(CUP$sintactical$top-2)), ((java_cup.runtime.Symbol)CUP$sintactical$stack.peek()), RESULT);
            }
          return CUP$sintactical$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 50: // datos_de_impresion ::= dato 
            {
              Object RESULT =null;
		int datleft = ((java_cup.runtime.Symbol)CUP$sintactical$stack.peek()).left;
		int datright = ((java_cup.runtime.Symbol)CUP$sintactical$stack.peek()).right;
		Object dat = (Object)((java_cup.runtime.Symbol) CUP$sintactical$stack.peek()).value;
		impresion.imprimir(dat.toString());
              CUP$sintactical$result = parser.getSymbolFactory().newSymbol("datos_de_impresion",28, ((java_cup.runtime.Symbol)CUP$sintactical$stack.peek()), ((java_cup.runtime.Symbol)CUP$sintactical$stack.peek()), RESULT);
            }
          return CUP$sintactical$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 51: // impresion_de_la_lista ::= ARROBA VARIABLE 
            {
              Object RESULT =null;
		int varleft = ((java_cup.runtime.Symbol)CUP$sintactical$stack.peek()).left;
		int varright = ((java_cup.runtime.Symbol)CUP$sintactical$stack.peek()).right;
		String var = (String)((java_cup.runtime.Symbol) CUP$sintactical$stack.peek()).value;
		
        for (proyecto1_oc1_202010770.lista elemento : lista_de_elementos) {
            
            if(elemento.variable.equals(var)){
                impresion.imprimir_lista(actual, elemento);
            }        
        }
              CUP$sintactical$result = parser.getSymbolFactory().newSymbol("impresion_de_la_lista",29, ((java_cup.runtime.Symbol)CUP$sintactical$stack.elementAt(CUP$sintactical$top-1)), ((java_cup.runtime.Symbol)CUP$sintactical$stack.peek()), RESULT);
            }
          return CUP$sintactical$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 52: // impresion_de_la_lista ::= CORCHETE_ABIERTO mas_listas CORCHETE_CERRADO 
            {
              Object RESULT =null;

              CUP$sintactical$result = parser.getSymbolFactory().newSymbol("impresion_de_la_lista",29, ((java_cup.runtime.Symbol)CUP$sintactical$stack.elementAt(CUP$sintactical$top-2)), ((java_cup.runtime.Symbol)CUP$sintactical$stack.peek()), RESULT);
            }
          return CUP$sintactical$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 53: // mas_listas ::= mas_listas COMMA dato 
            {
              Object RESULT =null;
		int valleft = ((java_cup.runtime.Symbol)CUP$sintactical$stack.peek()).left;
		int valright = ((java_cup.runtime.Symbol)CUP$sintactical$stack.peek()).right;
		Object val = (Object)((java_cup.runtime.Symbol) CUP$sintactical$stack.peek()).value;
		//System.out.println(val);
              CUP$sintactical$result = parser.getSymbolFactory().newSymbol("mas_listas",27, ((java_cup.runtime.Symbol)CUP$sintactical$stack.elementAt(CUP$sintactical$top-2)), ((java_cup.runtime.Symbol)CUP$sintactical$stack.peek()), RESULT);
            }
          return CUP$sintactical$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 54: // mas_listas ::= dato 
            {
              Object RESULT =null;
		int valleft = ((java_cup.runtime.Symbol)CUP$sintactical$stack.peek()).left;
		int valright = ((java_cup.runtime.Symbol)CUP$sintactical$stack.peek()).right;
		Object val = (Object)((java_cup.runtime.Symbol) CUP$sintactical$stack.peek()).value;
		//System.out.println(val);
              CUP$sintactical$result = parser.getSymbolFactory().newSymbol("mas_listas",27, ((java_cup.runtime.Symbol)CUP$sintactical$stack.peek()), ((java_cup.runtime.Symbol)CUP$sintactical$stack.peek()), RESULT);
            }
          return CUP$sintactical$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 55: // asignacion ::= VAR DOS_PUNTOS tipo_de_dato DOS_PUNTOS DOS_PUNTOS VARIABLE SLASH_MENOR DIAGONAL dato END PUNTO_Y_COMA 
            {
              Object RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$sintactical$stack.elementAt(CUP$sintactical$top-8)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$sintactical$stack.elementAt(CUP$sintactical$top-8)).right;
		Object a = (Object)((java_cup.runtime.Symbol) CUP$sintactical$stack.elementAt(CUP$sintactical$top-8)).value;
		int bleft = ((java_cup.runtime.Symbol)CUP$sintactical$stack.elementAt(CUP$sintactical$top-5)).left;
		int bright = ((java_cup.runtime.Symbol)CUP$sintactical$stack.elementAt(CUP$sintactical$top-5)).right;
		String b = (String)((java_cup.runtime.Symbol) CUP$sintactical$stack.elementAt(CUP$sintactical$top-5)).value;
		int cleft = ((java_cup.runtime.Symbol)CUP$sintactical$stack.elementAt(CUP$sintactical$top-2)).left;
		int cright = ((java_cup.runtime.Symbol)CUP$sintactical$stack.elementAt(CUP$sintactical$top-2)).right;
		Object c = (Object)((java_cup.runtime.Symbol) CUP$sintactical$stack.elementAt(CUP$sintactical$top-2)).value;
		

            tabla_simbolos.add(new proyecto1_oc1_202010770.tabla_de_simbolos(a.toString(),b.toString(),c.toString()));
    
              CUP$sintactical$result = parser.getSymbolFactory().newSymbol("asignacion",19, ((java_cup.runtime.Symbol)CUP$sintactical$stack.elementAt(CUP$sintactical$top-10)), ((java_cup.runtime.Symbol)CUP$sintactical$stack.peek()), RESULT);
            }
          return CUP$sintactical$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 56: // lista ::= ARREGLO DOS_PUNTOS tipo_de_dato DOS_PUNTOS DOS_PUNTOS ARROBA VARIABLE SLASH_MENOR DIAGONAL CORCHETE_ABIERTO datos_de_lista CORCHETE_CERRADO END PUNTO_Y_COMA 
            {
              Object RESULT =null;
		int tipoleft = ((java_cup.runtime.Symbol)CUP$sintactical$stack.elementAt(CUP$sintactical$top-11)).left;
		int tiporight = ((java_cup.runtime.Symbol)CUP$sintactical$stack.elementAt(CUP$sintactical$top-11)).right;
		Object tipo = (Object)((java_cup.runtime.Symbol) CUP$sintactical$stack.elementAt(CUP$sintactical$top-11)).value;
		int varleft = ((java_cup.runtime.Symbol)CUP$sintactical$stack.elementAt(CUP$sintactical$top-7)).left;
		int varright = ((java_cup.runtime.Symbol)CUP$sintactical$stack.elementAt(CUP$sintactical$top-7)).right;
		String var = (String)((java_cup.runtime.Symbol) CUP$sintactical$stack.elementAt(CUP$sintactical$top-7)).value;
		
        //Se agrega el nombre de la variable
        String vals = var.toString();
        lista_de_elementos.add(new proyecto1_oc1_202010770.lista(vals));
        double numero = 0.0;
        Scanner scanner = new Scanner(datos_en_lista);
        if(tipo.toString().equals("double")){
        
        while (scanner.hasNext()) {
            
            String numeroStr = scanner.next();
            numero = Double.parseDouble(numeroStr);
            for (proyecto1_oc1_202010770.lista elemento : lista_de_elementos) {
                if(elemento.variable.equals(vals)){
                    elemento.agregarElemento(tipo.toString(),vals, numero);
                }
                
            }
        }}else{
        while (scanner.hasNext()) {
            
            String numeroStr = scanner.next();
            
           
            for (proyecto1_oc1_202010770.lista elemento : lista_de_elementos) {
                if(elemento.variable.equals(vals)){
                    elemento.agregarElemento(tipo.toString(),vals, numeroStr);
                }
                
            }
        }
        }

        //Se limpia la variable con los datos
        datos_en_lista = "";


              CUP$sintactical$result = parser.getSymbolFactory().newSymbol("lista",24, ((java_cup.runtime.Symbol)CUP$sintactical$stack.elementAt(CUP$sintactical$top-13)), ((java_cup.runtime.Symbol)CUP$sintactical$stack.peek()), RESULT);
            }
          return CUP$sintactical$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 57: // tipo_de_dato ::= DOUBLE 
            {
              Object RESULT =null;
		RESULT = "double"; 
              CUP$sintactical$result = parser.getSymbolFactory().newSymbol("tipo_de_dato",22, ((java_cup.runtime.Symbol)CUP$sintactical$stack.peek()), ((java_cup.runtime.Symbol)CUP$sintactical$stack.peek()), RESULT);
            }
          return CUP$sintactical$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 58: // tipo_de_dato ::= CADENA 
            {
              Object RESULT =null;
		RESULT = "cadena"; 
              CUP$sintactical$result = parser.getSymbolFactory().newSymbol("tipo_de_dato",22, ((java_cup.runtime.Symbol)CUP$sintactical$stack.peek()), ((java_cup.runtime.Symbol)CUP$sintactical$stack.peek()), RESULT);
            }
          return CUP$sintactical$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 59: // datos_de_lista ::= datos_de_lista COMMA dato 
            {
              Object RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$sintactical$stack.elementAt(CUP$sintactical$top-2)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$sintactical$stack.elementAt(CUP$sintactical$top-2)).right;
		Object a = (Object)((java_cup.runtime.Symbol) CUP$sintactical$stack.elementAt(CUP$sintactical$top-2)).value;
		int bleft = ((java_cup.runtime.Symbol)CUP$sintactical$stack.peek()).left;
		int bright = ((java_cup.runtime.Symbol)CUP$sintactical$stack.peek()).right;
		Object b = (Object)((java_cup.runtime.Symbol) CUP$sintactical$stack.peek()).value;
		 datos_en_lista += " "+b.toString().replace(" ", "Ñ"); RESULT = b.toString().replace(" ", "Ñ");;
              CUP$sintactical$result = parser.getSymbolFactory().newSymbol("datos_de_lista",25, ((java_cup.runtime.Symbol)CUP$sintactical$stack.elementAt(CUP$sintactical$top-2)), ((java_cup.runtime.Symbol)CUP$sintactical$stack.peek()), RESULT);
            }
          return CUP$sintactical$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 60: // datos_de_lista ::= dato 
            {
              Object RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$sintactical$stack.peek()).left;
		int aright = ((java_cup.runtime.Symbol)CUP$sintactical$stack.peek()).right;
		Object a = (Object)((java_cup.runtime.Symbol) CUP$sintactical$stack.peek()).value;
		datos_en_lista = " "+a.toString().replace(" ", "Ñ");  RESULT = a.toString().replace(" ", "Ñ");;
              CUP$sintactical$result = parser.getSymbolFactory().newSymbol("datos_de_lista",25, ((java_cup.runtime.Symbol)CUP$sintactical$stack.peek()), ((java_cup.runtime.Symbol)CUP$sintactical$stack.peek()), RESULT);
            }
          return CUP$sintactical$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 61: // dato ::= CADENAS 
            {
              Object RESULT =null;
		int datosleft = ((java_cup.runtime.Symbol)CUP$sintactical$stack.peek()).left;
		int datosright = ((java_cup.runtime.Symbol)CUP$sintactical$stack.peek()).right;
		String datos = (String)((java_cup.runtime.Symbol) CUP$sintactical$stack.peek()).value;
		
        String salida = "";
        if (datos.toString().startsWith("\"") && datos.toString().endsWith("\"")) {
            // Quitar las comillas usando substring
            salida = datos.toString().substring(1, datos.length() - 1);
            actual = salida;
            RESULT = salida;
        }else{
        actual = datos.toString();
        RESULT = datos.toString();
        } 
              CUP$sintactical$result = parser.getSymbolFactory().newSymbol("dato",23, ((java_cup.runtime.Symbol)CUP$sintactical$stack.peek()), ((java_cup.runtime.Symbol)CUP$sintactical$stack.peek()), RESULT);
            }
          return CUP$sintactical$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 62: // dato ::= NUMERO_FLOTANTE 
            {
              Object RESULT =null;
		int datosleft = ((java_cup.runtime.Symbol)CUP$sintactical$stack.peek()).left;
		int datosright = ((java_cup.runtime.Symbol)CUP$sintactical$stack.peek()).right;
		String datos = (String)((java_cup.runtime.Symbol) CUP$sintactical$stack.peek()).value;
		RESULT = datos.toString(); 
              CUP$sintactical$result = parser.getSymbolFactory().newSymbol("dato",23, ((java_cup.runtime.Symbol)CUP$sintactical$stack.peek()), ((java_cup.runtime.Symbol)CUP$sintactical$stack.peek()), RESULT);
            }
          return CUP$sintactical$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 63: // dato ::= NUMERO_ENTERO 
            {
              Object RESULT =null;
		int datosleft = ((java_cup.runtime.Symbol)CUP$sintactical$stack.peek()).left;
		int datosright = ((java_cup.runtime.Symbol)CUP$sintactical$stack.peek()).right;
		String datos = (String)((java_cup.runtime.Symbol) CUP$sintactical$stack.peek()).value;
		RESULT = datos.toString(); 
              CUP$sintactical$result = parser.getSymbolFactory().newSymbol("dato",23, ((java_cup.runtime.Symbol)CUP$sintactical$stack.peek()), ((java_cup.runtime.Symbol)CUP$sintactical$stack.peek()), RESULT);
            }
          return CUP$sintactical$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 64: // dato ::= VARIABLE 
            {
              Object RESULT =null;
		int datosleft = ((java_cup.runtime.Symbol)CUP$sintactical$stack.peek()).left;
		int datosright = ((java_cup.runtime.Symbol)CUP$sintactical$stack.peek()).right;
		String datos = (String)((java_cup.runtime.Symbol) CUP$sintactical$stack.peek()).value;
		
        String variable_a_buscar = datos.toString();
        for (proyecto1_oc1_202010770.tabla_de_simbolos simbolo : tabla_simbolos){
            if(variable_a_buscar.equals(simbolo.variable)){
            actual = simbolo.dato.toString();
            RESULT = simbolo.dato;
            break;
            }
        }
    
              CUP$sintactical$result = parser.getSymbolFactory().newSymbol("dato",23, ((java_cup.runtime.Symbol)CUP$sintactical$stack.peek()), ((java_cup.runtime.Symbol)CUP$sintactical$stack.peek()), RESULT);
            }
          return CUP$sintactical$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 65: // dato ::= SUMA PARENTESIS_ABIERTO dato COMMA dato PARENTESIS_CERRADO 
            {
              Object RESULT =null;
		int izqleft = ((java_cup.runtime.Symbol)CUP$sintactical$stack.elementAt(CUP$sintactical$top-3)).left;
		int izqright = ((java_cup.runtime.Symbol)CUP$sintactical$stack.elementAt(CUP$sintactical$top-3)).right;
		Object izq = (Object)((java_cup.runtime.Symbol) CUP$sintactical$stack.elementAt(CUP$sintactical$top-3)).value;
		int derleft = ((java_cup.runtime.Symbol)CUP$sintactical$stack.elementAt(CUP$sintactical$top-1)).left;
		int derright = ((java_cup.runtime.Symbol)CUP$sintactical$stack.elementAt(CUP$sintactical$top-1)).right;
		Object der = (Object)((java_cup.runtime.Symbol) CUP$sintactical$stack.elementAt(CUP$sintactical$top-1)).value;
		
    RESULT = operaciones.Suma(izq.toString(), der.toString());
    
              CUP$sintactical$result = parser.getSymbolFactory().newSymbol("dato",23, ((java_cup.runtime.Symbol)CUP$sintactical$stack.elementAt(CUP$sintactical$top-5)), ((java_cup.runtime.Symbol)CUP$sintactical$stack.peek()), RESULT);
            }
          return CUP$sintactical$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 66: // dato ::= RESTA PARENTESIS_ABIERTO dato COMMA dato PARENTESIS_CERRADO 
            {
              Object RESULT =null;
		int izqleft = ((java_cup.runtime.Symbol)CUP$sintactical$stack.elementAt(CUP$sintactical$top-3)).left;
		int izqright = ((java_cup.runtime.Symbol)CUP$sintactical$stack.elementAt(CUP$sintactical$top-3)).right;
		Object izq = (Object)((java_cup.runtime.Symbol) CUP$sintactical$stack.elementAt(CUP$sintactical$top-3)).value;
		int derleft = ((java_cup.runtime.Symbol)CUP$sintactical$stack.elementAt(CUP$sintactical$top-1)).left;
		int derright = ((java_cup.runtime.Symbol)CUP$sintactical$stack.elementAt(CUP$sintactical$top-1)).right;
		Object der = (Object)((java_cup.runtime.Symbol) CUP$sintactical$stack.elementAt(CUP$sintactical$top-1)).value;
		
    RESULT = operaciones.Resta(izq.toString(), der.toString());
    
              CUP$sintactical$result = parser.getSymbolFactory().newSymbol("dato",23, ((java_cup.runtime.Symbol)CUP$sintactical$stack.elementAt(CUP$sintactical$top-5)), ((java_cup.runtime.Symbol)CUP$sintactical$stack.peek()), RESULT);
            }
          return CUP$sintactical$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 67: // dato ::= MULTIPLICACION PARENTESIS_ABIERTO dato COMMA dato PARENTESIS_CERRADO 
            {
              Object RESULT =null;
		int izqleft = ((java_cup.runtime.Symbol)CUP$sintactical$stack.elementAt(CUP$sintactical$top-3)).left;
		int izqright = ((java_cup.runtime.Symbol)CUP$sintactical$stack.elementAt(CUP$sintactical$top-3)).right;
		Object izq = (Object)((java_cup.runtime.Symbol) CUP$sintactical$stack.elementAt(CUP$sintactical$top-3)).value;
		int derleft = ((java_cup.runtime.Symbol)CUP$sintactical$stack.elementAt(CUP$sintactical$top-1)).left;
		int derright = ((java_cup.runtime.Symbol)CUP$sintactical$stack.elementAt(CUP$sintactical$top-1)).right;
		Object der = (Object)((java_cup.runtime.Symbol) CUP$sintactical$stack.elementAt(CUP$sintactical$top-1)).value;
		
    RESULT = operaciones.Multiplicacion(izq.toString(), der.toString());
    
              CUP$sintactical$result = parser.getSymbolFactory().newSymbol("dato",23, ((java_cup.runtime.Symbol)CUP$sintactical$stack.elementAt(CUP$sintactical$top-5)), ((java_cup.runtime.Symbol)CUP$sintactical$stack.peek()), RESULT);
            }
          return CUP$sintactical$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 68: // dato ::= DIVISION PARENTESIS_ABIERTO dato COMMA dato PARENTESIS_CERRADO 
            {
              Object RESULT =null;
		int izqleft = ((java_cup.runtime.Symbol)CUP$sintactical$stack.elementAt(CUP$sintactical$top-3)).left;
		int izqright = ((java_cup.runtime.Symbol)CUP$sintactical$stack.elementAt(CUP$sintactical$top-3)).right;
		Object izq = (Object)((java_cup.runtime.Symbol) CUP$sintactical$stack.elementAt(CUP$sintactical$top-3)).value;
		int derleft = ((java_cup.runtime.Symbol)CUP$sintactical$stack.elementAt(CUP$sintactical$top-1)).left;
		int derright = ((java_cup.runtime.Symbol)CUP$sintactical$stack.elementAt(CUP$sintactical$top-1)).right;
		Object der = (Object)((java_cup.runtime.Symbol) CUP$sintactical$stack.elementAt(CUP$sintactical$top-1)).value;
		
    RESULT = operaciones.Division(izq.toString(), der.toString());
    
              CUP$sintactical$result = parser.getSymbolFactory().newSymbol("dato",23, ((java_cup.runtime.Symbol)CUP$sintactical$stack.elementAt(CUP$sintactical$top-5)), ((java_cup.runtime.Symbol)CUP$sintactical$stack.peek()), RESULT);
            }
          return CUP$sintactical$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 69: // dato ::= MODULO PARENTESIS_ABIERTO dato COMMA dato PARENTESIS_CERRADO 
            {
              Object RESULT =null;
		int izqleft = ((java_cup.runtime.Symbol)CUP$sintactical$stack.elementAt(CUP$sintactical$top-3)).left;
		int izqright = ((java_cup.runtime.Symbol)CUP$sintactical$stack.elementAt(CUP$sintactical$top-3)).right;
		Object izq = (Object)((java_cup.runtime.Symbol) CUP$sintactical$stack.elementAt(CUP$sintactical$top-3)).value;
		int derleft = ((java_cup.runtime.Symbol)CUP$sintactical$stack.elementAt(CUP$sintactical$top-1)).left;
		int derright = ((java_cup.runtime.Symbol)CUP$sintactical$stack.elementAt(CUP$sintactical$top-1)).right;
		Object der = (Object)((java_cup.runtime.Symbol) CUP$sintactical$stack.elementAt(CUP$sintactical$top-1)).value;
		
    RESULT = operaciones.Modulo(izq.toString(), der.toString());
    
              CUP$sintactical$result = parser.getSymbolFactory().newSymbol("dato",23, ((java_cup.runtime.Symbol)CUP$sintactical$stack.elementAt(CUP$sintactical$top-5)), ((java_cup.runtime.Symbol)CUP$sintactical$stack.peek()), RESULT);
            }
          return CUP$sintactical$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 70: // NT$10 ::= 
            {
              Object RESULT =null;
operacion_estadistica = "media";


    for (proyecto1_oc1_202010770.lista elemento : lista_de_elementos) {
                if(elemento.variable.equals("Tremdo")){
                    elemento.refresh_list();
    }
    }



              CUP$sintactical$result = parser.getSymbolFactory().newSymbol("NT$10",40, ((java_cup.runtime.Symbol)CUP$sintactical$stack.peek()), RESULT);
            }
          return CUP$sintactical$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 71: // dato ::= MEDIA NT$10 PARENTESIS_ABIERTO listas_operaciones PARENTESIS_CERRADO 
            {
              Object RESULT =null;
              // propagate RESULT from NT$10
                RESULT = (Object) ((java_cup.runtime.Symbol) CUP$sintactical$stack.elementAt(CUP$sintactical$top-3)).value;
		int resultadoleft = ((java_cup.runtime.Symbol)CUP$sintactical$stack.elementAt(CUP$sintactical$top-1)).left;
		int resultadoright = ((java_cup.runtime.Symbol)CUP$sintactical$stack.elementAt(CUP$sintactical$top-1)).right;
		Object resultado = (Object)((java_cup.runtime.Symbol) CUP$sintactical$stack.elementAt(CUP$sintactical$top-1)).value;
		RESULT = resultado;
              CUP$sintactical$result = parser.getSymbolFactory().newSymbol("dato",23, ((java_cup.runtime.Symbol)CUP$sintactical$stack.elementAt(CUP$sintactical$top-4)), ((java_cup.runtime.Symbol)CUP$sintactical$stack.peek()), RESULT);
            }
          return CUP$sintactical$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 72: // NT$11 ::= 
            {
              Object RESULT =null;
operacion_estadistica = "mediana";

for (proyecto1_oc1_202010770.lista elemento : lista_de_elementos) {
                if(elemento.variable.equals("Tremdo")){
                    elemento.refresh_list();
}
}




              CUP$sintactical$result = parser.getSymbolFactory().newSymbol("NT$11",41, ((java_cup.runtime.Symbol)CUP$sintactical$stack.peek()), RESULT);
            }
          return CUP$sintactical$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 73: // dato ::= MEDIANA NT$11 PARENTESIS_ABIERTO listas_operaciones PARENTESIS_CERRADO 
            {
              Object RESULT =null;
              // propagate RESULT from NT$11
                RESULT = (Object) ((java_cup.runtime.Symbol) CUP$sintactical$stack.elementAt(CUP$sintactical$top-3)).value;
		int resultadoleft = ((java_cup.runtime.Symbol)CUP$sintactical$stack.elementAt(CUP$sintactical$top-1)).left;
		int resultadoright = ((java_cup.runtime.Symbol)CUP$sintactical$stack.elementAt(CUP$sintactical$top-1)).right;
		Object resultado = (Object)((java_cup.runtime.Symbol) CUP$sintactical$stack.elementAt(CUP$sintactical$top-1)).value;
		RESULT = resultado;
              CUP$sintactical$result = parser.getSymbolFactory().newSymbol("dato",23, ((java_cup.runtime.Symbol)CUP$sintactical$stack.elementAt(CUP$sintactical$top-4)), ((java_cup.runtime.Symbol)CUP$sintactical$stack.peek()), RESULT);
            }
          return CUP$sintactical$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 74: // NT$12 ::= 
            {
              Object RESULT =null;
operacion_estadistica = "moda";


for (proyecto1_oc1_202010770.lista elemento : lista_de_elementos) {
                if(elemento.variable.equals("Tremdo")){
                    elemento.refresh_list();
}
}


              CUP$sintactical$result = parser.getSymbolFactory().newSymbol("NT$12",42, ((java_cup.runtime.Symbol)CUP$sintactical$stack.peek()), RESULT);
            }
          return CUP$sintactical$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 75: // dato ::= MODA NT$12 PARENTESIS_ABIERTO listas_operaciones PARENTESIS_CERRADO 
            {
              Object RESULT =null;
              // propagate RESULT from NT$12
                RESULT = (Object) ((java_cup.runtime.Symbol) CUP$sintactical$stack.elementAt(CUP$sintactical$top-3)).value;
		int resultadoleft = ((java_cup.runtime.Symbol)CUP$sintactical$stack.elementAt(CUP$sintactical$top-1)).left;
		int resultadoright = ((java_cup.runtime.Symbol)CUP$sintactical$stack.elementAt(CUP$sintactical$top-1)).right;
		Object resultado = (Object)((java_cup.runtime.Symbol) CUP$sintactical$stack.elementAt(CUP$sintactical$top-1)).value;
		RESULT = resultado;
              CUP$sintactical$result = parser.getSymbolFactory().newSymbol("dato",23, ((java_cup.runtime.Symbol)CUP$sintactical$stack.elementAt(CUP$sintactical$top-4)), ((java_cup.runtime.Symbol)CUP$sintactical$stack.peek()), RESULT);
            }
          return CUP$sintactical$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 76: // NT$13 ::= 
            {
              Object RESULT =null;
operacion_estadistica = "varianza";


for (proyecto1_oc1_202010770.lista elemento : lista_de_elementos) {
                if(elemento.variable.equals("Tremdo")){
                    elemento.refresh_list();
}
}



              CUP$sintactical$result = parser.getSymbolFactory().newSymbol("NT$13",43, ((java_cup.runtime.Symbol)CUP$sintactical$stack.peek()), RESULT);
            }
          return CUP$sintactical$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 77: // dato ::= VARIANZA NT$13 PARENTESIS_ABIERTO listas_operaciones PARENTESIS_CERRADO 
            {
              Object RESULT =null;
              // propagate RESULT from NT$13
                RESULT = (Object) ((java_cup.runtime.Symbol) CUP$sintactical$stack.elementAt(CUP$sintactical$top-3)).value;
		int resultadoleft = ((java_cup.runtime.Symbol)CUP$sintactical$stack.elementAt(CUP$sintactical$top-1)).left;
		int resultadoright = ((java_cup.runtime.Symbol)CUP$sintactical$stack.elementAt(CUP$sintactical$top-1)).right;
		Object resultado = (Object)((java_cup.runtime.Symbol) CUP$sintactical$stack.elementAt(CUP$sintactical$top-1)).value;
		RESULT = resultado;
              CUP$sintactical$result = parser.getSymbolFactory().newSymbol("dato",23, ((java_cup.runtime.Symbol)CUP$sintactical$stack.elementAt(CUP$sintactical$top-4)), ((java_cup.runtime.Symbol)CUP$sintactical$stack.peek()), RESULT);
            }
          return CUP$sintactical$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 78: // NT$14 ::= 
            {
              Object RESULT =null;
operacion_estadistica = "maximo";


for (proyecto1_oc1_202010770.lista elemento : lista_de_elementos) {
                if(elemento.variable.equals("Tremdo")){
                    elemento.refresh_list();
}
}



              CUP$sintactical$result = parser.getSymbolFactory().newSymbol("NT$14",44, ((java_cup.runtime.Symbol)CUP$sintactical$stack.peek()), RESULT);
            }
          return CUP$sintactical$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 79: // dato ::= MAX NT$14 PARENTESIS_ABIERTO listas_operaciones PARENTESIS_CERRADO 
            {
              Object RESULT =null;
              // propagate RESULT from NT$14
                RESULT = (Object) ((java_cup.runtime.Symbol) CUP$sintactical$stack.elementAt(CUP$sintactical$top-3)).value;
		int resultadoleft = ((java_cup.runtime.Symbol)CUP$sintactical$stack.elementAt(CUP$sintactical$top-1)).left;
		int resultadoright = ((java_cup.runtime.Symbol)CUP$sintactical$stack.elementAt(CUP$sintactical$top-1)).right;
		Object resultado = (Object)((java_cup.runtime.Symbol) CUP$sintactical$stack.elementAt(CUP$sintactical$top-1)).value;
		RESULT = resultado;
              CUP$sintactical$result = parser.getSymbolFactory().newSymbol("dato",23, ((java_cup.runtime.Symbol)CUP$sintactical$stack.elementAt(CUP$sintactical$top-4)), ((java_cup.runtime.Symbol)CUP$sintactical$stack.peek()), RESULT);
            }
          return CUP$sintactical$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 80: // NT$15 ::= 
            {
              Object RESULT =null;
operacion_estadistica = "minimo";

for (proyecto1_oc1_202010770.lista elemento : lista_de_elementos) {
                if(elemento.variable.equals("Tremdo")){
                    elemento.refresh_list();
}
}



              CUP$sintactical$result = parser.getSymbolFactory().newSymbol("NT$15",45, ((java_cup.runtime.Symbol)CUP$sintactical$stack.peek()), RESULT);
            }
          return CUP$sintactical$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 81: // dato ::= MIN NT$15 PARENTESIS_ABIERTO listas_operaciones PARENTESIS_CERRADO 
            {
              Object RESULT =null;
              // propagate RESULT from NT$15
                RESULT = (Object) ((java_cup.runtime.Symbol) CUP$sintactical$stack.elementAt(CUP$sintactical$top-3)).value;
		int resultadoleft = ((java_cup.runtime.Symbol)CUP$sintactical$stack.elementAt(CUP$sintactical$top-1)).left;
		int resultadoright = ((java_cup.runtime.Symbol)CUP$sintactical$stack.elementAt(CUP$sintactical$top-1)).right;
		Object resultado = (Object)((java_cup.runtime.Symbol) CUP$sintactical$stack.elementAt(CUP$sintactical$top-1)).value;
		RESULT = resultado;
              CUP$sintactical$result = parser.getSymbolFactory().newSymbol("dato",23, ((java_cup.runtime.Symbol)CUP$sintactical$stack.elementAt(CUP$sintactical$top-4)), ((java_cup.runtime.Symbol)CUP$sintactical$stack.peek()), RESULT);
            }
          return CUP$sintactical$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 82: // listas_operaciones ::= ARROBA VARIABLE 
            {
              Object RESULT =null;
		int varleft = ((java_cup.runtime.Symbol)CUP$sintactical$stack.peek()).left;
		int varright = ((java_cup.runtime.Symbol)CUP$sintactical$stack.peek()).right;
		String var = (String)((java_cup.runtime.Symbol) CUP$sintactical$stack.peek()).value;
		
                        for (proyecto1_oc1_202010770.lista lista : lista_de_elementos) {
                            if (lista.variable.equals(var.toString())) {
                            
                            if(operacion_estadistica.equals("media")){
                                    RESULT = lista.la_media();
                                     break;
                                    }
                            
                            
                            if(operacion_estadistica.equals("mediana")){
                                    RESULT = lista.la_mediana();
                                    break;
                                    }
                            if(operacion_estadistica.equals("moda")){
                                    RESULT = lista.la_moda();
                                    break;
                                    }
                            if(operacion_estadistica.equals("varianza")){
                                    RESULT = lista.la_varianza();
                                    break;
                                    }
                            if(operacion_estadistica.equals("maximo")){
                                    RESULT = lista.la_maxima();
                                    break;
                                    }
                            if(operacion_estadistica.equals("minimo")){
                                    RESULT = lista.la_minima();
                                    break;
                                    }
                                    }
                           
                        }
                        
              CUP$sintactical$result = parser.getSymbolFactory().newSymbol("listas_operaciones",21, ((java_cup.runtime.Symbol)CUP$sintactical$stack.elementAt(CUP$sintactical$top-1)), ((java_cup.runtime.Symbol)CUP$sintactical$stack.peek()), RESULT);
            }
          return CUP$sintactical$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 83: // listas_operaciones ::= CORCHETE_ABIERTO listas_operacion CORCHETE_CERRADO 
            {
              Object RESULT =null;
		
                        
                        boolean es_temporal = false;
                        for (proyecto1_oc1_202010770.lista lista : lista_de_elementos) {
                            if (lista.variable.equals("Tremdo")) {
                            es_temporal = true;
                            break; // Terminamos la búsqueda una vez que encontramos la variable
                            }
                        }
                        if(!es_temporal){
                        lista_de_elementos.add(new proyecto1_oc1_202010770.lista("Tremdo"));
                        }else{

                            for (proyecto1_oc1_202010770.lista lista : lista_de_elementos) {
                                if (lista.variable.equals("Tremdo")) {
                                lista.lista.clear();
                                }
                            }
                        }
                        
                        double numero = 0.0;
                        Scanner scanner = new Scanner(datos_en_lista);
                        while (scanner.hasNext()) {
                            String numeroStr = scanner.next();
                            numero = Double.parseDouble(numeroStr);
                            for (proyecto1_oc1_202010770.lista elemento : lista_de_elementos) {
                                if(elemento.variable.equals("Tremdo")){
                                    elemento.agregarElemento("double","Tremdo", numero);
                            }
                            //System.out.println("Gotica");
                            //elemento.mostrarElementos();
                            //System.out.println("Culona");
                            
                            }

                        }
                        datos_en_lista = "";
                        for (proyecto1_oc1_202010770.lista elemento : lista_de_elementos) {
                                if(elemento.variable.equals("Tremdo")){
                                    if(operacion_estadistica.equals("media")){
                                    RESULT = elemento.la_media();
                                    break;
                                    }
                                if(operacion_estadistica.equals("mediana")){
                                    RESULT = elemento.la_mediana();
                                break;    
                                }
                                if(operacion_estadistica.equals("moda")){
                                    RESULT = elemento.la_moda();
                                break;    
                                }
                                if(operacion_estadistica.equals("varianza")){
                                    RESULT = elemento.la_varianza();
                                    break;
                                    }
                                if(operacion_estadistica.equals("maximo")){
                                    RESULT = elemento.la_maxima();
                                    break;
                                    }
                                if(operacion_estadistica.equals("minimo")){
                                    RESULT = elemento.la_minima();
                                    break;
                                    }
                                    
                            
                                    
                            
                        }}

                             

              CUP$sintactical$result = parser.getSymbolFactory().newSymbol("listas_operaciones",21, ((java_cup.runtime.Symbol)CUP$sintactical$stack.elementAt(CUP$sintactical$top-2)), ((java_cup.runtime.Symbol)CUP$sintactical$stack.peek()), RESULT);
            }
          return CUP$sintactical$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 84: // listas_operacion ::= listas_operacion COMMA dato 
            {
              Object RESULT =null;
		int datleft = ((java_cup.runtime.Symbol)CUP$sintactical$stack.peek()).left;
		int datright = ((java_cup.runtime.Symbol)CUP$sintactical$stack.peek()).right;
		Object dat = (Object)((java_cup.runtime.Symbol) CUP$sintactical$stack.peek()).value;
		datos_en_lista += " "+dat.toString();
              CUP$sintactical$result = parser.getSymbolFactory().newSymbol("listas_operacion",20, ((java_cup.runtime.Symbol)CUP$sintactical$stack.elementAt(CUP$sintactical$top-2)), ((java_cup.runtime.Symbol)CUP$sintactical$stack.peek()), RESULT);
            }
          return CUP$sintactical$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 85: // listas_operacion ::= dato 
            {
              Object RESULT =null;
		int datleft = ((java_cup.runtime.Symbol)CUP$sintactical$stack.peek()).left;
		int datright = ((java_cup.runtime.Symbol)CUP$sintactical$stack.peek()).right;
		Object dat = (Object)((java_cup.runtime.Symbol) CUP$sintactical$stack.peek()).value;
		datos_en_lista = " "+dat.toString();
              CUP$sintactical$result = parser.getSymbolFactory().newSymbol("listas_operacion",20, ((java_cup.runtime.Symbol)CUP$sintactical$stack.peek()), ((java_cup.runtime.Symbol)CUP$sintactical$stack.peek()), RESULT);
            }
          return CUP$sintactical$result;

          /* . . . . . .*/
          default:
            throw new Exception(
               "Invalid action number "+CUP$sintactical$act_num+"found in internal parse table");

        }
    } /* end of method */

  /** Method splitting the generated action code into several parts. */
  public final java_cup.runtime.Symbol CUP$sintactical$do_action(
    int                        CUP$sintactical$act_num,
    java_cup.runtime.lr_parser CUP$sintactical$parser,
    java.util.Stack            CUP$sintactical$stack,
    int                        CUP$sintactical$top)
    throws java.lang.Exception
    {
              return CUP$sintactical$do_action_part00000000(
                               CUP$sintactical$act_num,
                               CUP$sintactical$parser,
                               CUP$sintactical$stack,
                               CUP$sintactical$top);
    }
}

}


//----------------------------------------------------
// The following code was generated by CUP v0.11b 20160615 (GIT 4ac7450)
//----------------------------------------------------

package Analyzers;

import java_cup.runtime.*;
import java.util.ArrayList;
import proyecto1_oc1_202010770.tabla_de_simbolos;
import proyecto1_oc1_202010770.operaciones_aritmeticas;
import proyecto1_oc1_202010770.Impresion;
import proyecto1_oc1_202010770.lista;
import java.util.Scanner;
import proyecto1_oc1_202010770.Graficar;
import java_cup.runtime.XMLElement;

/** CUP v0.11b 20160615 (GIT 4ac7450) generated parser.
  */
@SuppressWarnings({"rawtypes"})
public class sintactical extends java_cup.runtime.lr_parser {

 public final Class getSymbolContainer() {
    return sym.class;
}

  /** Default constructor. */
  @Deprecated
  public sintactical() {super();}

  /** Constructor which sets the default scanner. */
  @Deprecated
  public sintactical(java_cup.runtime.Scanner s) {super(s);}

  /** Constructor which sets the default scanner. */
  public sintactical(java_cup.runtime.Scanner s, java_cup.runtime.SymbolFactory sf) {super(s,sf);}

  /** Production table. */
  protected static final short _production_table[][] = 
    unpackFromStrings(new String[] {
    "\000\115\000\002\002\004\000\002\036\002\000\002\037" +
    "\002\000\002\002\011\000\002\021\004\000\002\021\003" +
    "\000\002\022\003\000\002\022\003\000\002\022\003\000" +
    "\002\022\003\000\002\016\003\000\002\016\003\000\002" +
    "\016\003\000\002\016\003\000\002\040\002\000\002\017" +
    "\021\000\002\041\002\000\002\005\017\000\002\042\002" +
    "\000\002\004\013\000\002\043\002\000\002\007\013\000" +
    "\002\020\012\000\002\044\002\000\002\012\013\000\002" +
    "\045\002\000\002\013\013\000\002\014\004\000\002\014" +
    "\005\000\002\015\005\000\002\015\003\000\002\010\012" +
    "\000\002\011\012\000\002\046\002\000\002\006\021\000" +
    "\002\047\002\000\002\003\016\000\002\032\012\000\002" +
    "\050\002\000\002\032\016\000\002\034\005\000\002\034" +
    "\003\000\002\035\004\000\002\035\005\000\002\033\005" +
    "\000\002\033\003\000\002\023\015\000\002\030\020\000" +
    "\002\026\003\000\002\026\003\000\002\031\005\000\002" +
    "\031\003\000\002\027\003\000\002\027\003\000\002\027" +
    "\003\000\002\027\003\000\002\027\010\000\002\027\010" +
    "\000\002\027\010\000\002\027\010\000\002\027\010\000" +
    "\002\051\002\000\002\027\007\000\002\052\002\000\002" +
    "\027\007\000\002\053\002\000\002\027\007\000\002\054" +
    "\002\000\002\027\007\000\002\055\002\000\002\027\007" +
    "\000\002\056\002\000\002\027\007\000\002\025\004\000" +
    "\002\025\005\000\002\024\005\000\002\024\003" });

  /** Access to production table. */
  public short[][] production_table() {return _production_table;}

  /** Parse-action table. */
  protected static final short[][] _action_table = 
    unpackFromStrings(new String[] {
    "\000\u0111\000\004\043\000\001\002\000\004\043\007\001" +
    "\002\000\004\002\006\001\002\000\004\002\001\001\002" +
    "\000\020\004\017\010\023\036\024\060\022\061\027\062" +
    "\015\063\014\001\002\000\022\004\ufff7\010\ufff7\036\ufff7" +
    "\042\ufff7\060\ufff7\061\ufff7\062\ufff7\063\ufff7\001\002\000" +
    "\022\004\ufff6\010\ufff6\036\ufff6\042\ufff6\060\ufff6\061\ufff6" +
    "\062\ufff6\063\ufff6\001\002\000\022\004\ufff5\010\ufff5\036" +
    "\ufff5\042\ufff5\060\ufff5\061\ufff5\062\ufff5\063\ufff5\001\002" +
    "\000\022\004\ufff4\010\ufff4\036\ufff4\042\ufff4\060\ufff4\061" +
    "\ufff4\062\ufff4\063\ufff4\001\002\000\004\017\uffde\001\002" +
    "\000\004\017\uffe0\001\002\000\004\042\367\001\002\000" +
    "\004\012\355\001\002\000\022\004\ufffb\010\ufffb\036\ufffb" +
    "\042\ufffb\060\ufffb\061\ufffb\062\ufffb\063\ufffb\001\002\000" +
    "\022\004\ufffa\010\ufffa\036\ufffa\042\ufffa\060\ufffa\061\ufffa" +
    "\062\ufffa\063\ufffa\001\002\000\004\017\ufff3\001\002\000" +
    "\004\012\253\001\002\000\004\012\220\001\002\000\022" +
    "\004\ufff8\010\ufff8\036\ufff8\042\ufff8\060\ufff8\061\ufff8\062" +
    "\ufff8\063\ufff8\001\002\000\022\004\017\010\023\036\024" +
    "\042\ufffc\060\022\061\027\062\015\063\014\001\002\000" +
    "\004\017\ufff1\001\002\000\022\004\ufff9\010\ufff9\036\ufff9" +
    "\042\ufff9\060\ufff9\061\ufff9\062\ufff9\063\ufff9\001\002\000" +
    "\004\017\032\001\002\000\004\057\034\001\002\000\004" +
    "\056\165\001\002\000\004\012\035\001\002\000\004\012" +
    "\036\001\002\000\004\007\037\001\002\000\004\040\uffed" +
    "\001\002\000\004\040\041\001\002\000\006\011\043\021" +
    "\042\001\002\000\040\005\060\023\052\024\067\025\057" +
    "\026\064\027\063\030\066\031\050\032\061\033\055\034" +
    "\053\035\070\044\051\045\062\046\054\001\002\000\004" +
    "\005\047\001\002\000\004\042\045\001\002\000\004\047" +
    "\046\001\002\000\006\050\uffec\056\uffec\001\002\000\004" +
    "\042\uffe6\001\002\000\004\017\uffc2\001\002\000\014\015" +
    "\uffcd\016\uffcd\020\uffcd\022\uffcd\042\uffcd\001\002\000\004" +
    "\017\154\001\002\000\004\017\uffbc\001\002\000\014\015" +
    "\uffcb\016\uffcb\020\uffcb\022\uffcb\042\uffcb\001\002\000\004" +
    "\017\uffbe\001\002\000\006\016\142\022\141\001\002\000" +
    "\004\017\134\001\002\000\014\015\uffca\016\uffca\020\uffca" +
    "\022\uffca\042\uffca\001\002\000\004\017\uffc0\001\002\000" +
    "\014\015\uffcc\016\uffcc\020\uffcc\022\uffcc\042\uffcc\001\002" +
    "\000\004\017\123\001\002\000\004\017\116\001\002\000" +
    "\006\016\uffe3\022\uffe3\001\002\000\004\017\uffc4\001\002" +
    "\000\004\017\105\001\002\000\004\017\uffba\001\002\000" +
    "\004\017\072\001\002\000\006\011\075\021\074\001\002" +
    "\000\004\020\104\001\002\000\040\005\060\023\052\024" +
    "\067\025\057\026\064\027\063\030\066\031\050\032\061" +
    "\033\055\034\053\035\070\044\051\045\062\046\054\001" +
    "\002\000\004\005\076\001\002\000\004\020\uffb8\001\002" +
    "\000\006\016\102\022\101\001\002\000\006\016\uffb5\022" +
    "\uffb5\001\002\000\004\020\uffb7\001\002\000\040\005\060" +
    "\023\052\024\067\025\057\026\064\027\063\030\066\031" +
    "\050\032\061\033\055\034\053\035\070\044\051\045\062" +
    "\046\054\001\002\000\006\016\uffb6\022\uffb6\001\002\000" +
    "\014\015\uffb9\016\uffb9\020\uffb9\022\uffb9\042\uffb9\001\002" +
    "\000\040\005\060\023\052\024\067\025\057\026\064\027" +
    "\063\030\066\031\050\032\061\033\055\034\053\035\070" +
    "\044\051\045\062\046\054\001\002\000\004\016\107\001" +
    "\002\000\040\005\060\023\052\024\067\025\057\026\064" +
    "\027\063\030\066\031\050\032\061\033\055\034\053\035" +
    "\070\044\051\045\062\046\054\001\002\000\004\020\111" +
    "\001\002\000\014\015\uffc8\016\uffc8\020\uffc8\022\uffc8\042" +
    "\uffc8\001\002\000\004\017\113\001\002\000\006\011\075" +
    "\021\074\001\002\000\004\020\115\001\002\000\014\015" +
    "\uffc3\016\uffc3\020\uffc3\022\uffc3\042\uffc3\001\002\000\040" +
    "\005\060\023\052\024\067\025\057\026\064\027\063\030" +
    "\066\031\050\032\061\033\055\034\053\035\070\044\051" +
    "\045\062\046\054\001\002\000\004\016\120\001\002\000" +
    "\040\005\060\023\052\024\067\025\057\026\064\027\063" +
    "\030\066\031\050\032\061\033\055\034\053\035\070\044" +
    "\051\045\062\046\054\001\002\000\004\020\122\001\002" +
    "\000\014\015\uffc6\016\uffc6\020\uffc6\022\uffc6\042\uffc6\001" +
    "\002\000\040\005\060\023\052\024\067\025\057\026\064" +
    "\027\063\030\066\031\050\032\061\033\055\034\053\035" +
    "\070\044\051\045\062\046\054\001\002\000\004\016\125" +
    "\001\002\000\040\005\060\023\052\024\067\025\057\026" +
    "\064\027\063\030\066\031\050\032\061\033\055\034\053" +
    "\035\070\044\051\045\062\046\054\001\002\000\004\020" +
    "\127\001\002\000\014\015\uffc5\016\uffc5\020\uffc5\022\uffc5" +
    "\042\uffc5\001\002\000\004\017\131\001\002\000\006\011" +
    "\075\021\074\001\002\000\004\020\133\001\002\000\014" +
    "\015\uffbf\016\uffbf\020\uffbf\022\uffbf\042\uffbf\001\002\000" +
    "\040\005\060\023\052\024\067\025\057\026\064\027\063" +
    "\030\066\031\050\032\061\033\055\034\053\035\070\044" +
    "\051\045\062\046\054\001\002\000\004\016\136\001\002" +
    "\000\040\005\060\023\052\024\067\025\057\026\064\027" +
    "\063\030\066\031\050\032\061\033\055\034\053\035\070" +
    "\044\051\045\062\046\054\001\002\000\004\020\140\001" +
    "\002\000\014\015\uffc7\016\uffc7\020\uffc7\022\uffc7\042\uffc7" +
    "\001\002\000\004\042\uffe5\001\002\000\040\005\060\023" +
    "\052\024\067\025\057\026\064\027\063\030\066\031\050" +
    "\032\061\033\055\034\053\035\070\044\051\045\062\046" +
    "\054\001\002\000\006\016\uffe4\022\uffe4\001\002\000\004" +
    "\017\145\001\002\000\006\011\075\021\074\001\002\000" +
    "\004\020\147\001\002\000\014\015\uffbd\016\uffbd\020\uffbd" +
    "\022\uffbd\042\uffbd\001\002\000\004\017\151\001\002\000" +
    "\006\011\075\021\074\001\002\000\004\020\153\001\002" +
    "\000\014\015\uffbb\016\uffbb\020\uffbb\022\uffbb\042\uffbb\001" +
    "\002\000\040\005\060\023\052\024\067\025\057\026\064" +
    "\027\063\030\066\031\050\032\061\033\055\034\053\035" +
    "\070\044\051\045\062\046\054\001\002\000\004\016\156" +
    "\001\002\000\040\005\060\023\052\024\067\025\057\026" +
    "\064\027\063\030\066\031\050\032\061\033\055\034\053" +
    "\035\070\044\051\045\062\046\054\001\002\000\004\020" +
    "\160\001\002\000\014\015\uffc9\016\uffc9\020\uffc9\022\uffc9" +
    "\042\uffc9\001\002\000\004\017\162\001\002\000\006\011" +
    "\075\021\074\001\002\000\004\020\164\001\002\000\014" +
    "\015\uffc1\016\uffc1\020\uffc1\022\uffc1\042\uffc1\001\002\000" +
    "\004\012\207\001\002\000\004\051\167\001\002\000\004" +
    "\012\200\001\002\000\004\050\171\001\002\000\004\061" +
    "\172\001\002\000\004\042\173\001\002\000\004\047\174" +
    "\001\002\000\004\020\175\001\002\000\004\042\176\001" +
    "\002\000\004\047\177\001\002\000\022\004\ufff0\010\ufff0" +
    "\036\ufff0\042\ufff0\060\ufff0\061\ufff0\062\ufff0\063\ufff0\001" +
    "\002\000\004\012\201\001\002\000\004\007\202\001\002" +
    "\000\004\040\203\001\002\000\040\005\060\023\052\024" +
    "\067\025\057\026\064\027\063\030\066\031\050\032\061" +
    "\033\055\034\053\035\070\044\051\045\062\046\054\001" +
    "\002\000\004\042\205\001\002\000\004\047\206\001\002" +
    "\000\010\050\uffeb\052\uffeb\057\uffeb\001\002\000\004\012" +
    "\210\001\002\000\004\006\211\001\002\000\004\040\uffef" +
    "\001\002\000\004\040\213\001\002\000\006\011\043\021" +
    "\042\001\002\000\004\042\215\001\002\000\004\047\216" +
    "\001\002\000\004\051\uffee\001\002\000\004\042\ufffd\001" +
    "\002\000\004\012\221\001\002\000\006\037\223\041\222" +
    "\001\002\000\004\040\233\001\002\000\004\040\224\001" +
    "\002\000\040\005\060\023\052\024\067\025\057\026\064" +
    "\027\063\030\066\031\050\032\061\033\055\034\053\035" +
    "\070\044\051\045\062\046\054\001\002\000\006\016\227" +
    "\042\230\001\002\000\006\016\uffd8\042\uffd8\001\002\000" +
    "\040\005\060\023\052\024\067\025\057\026\064\027\063" +
    "\030\066\031\050\032\061\033\055\034\053\035\070\044" +
    "\051\045\062\046\054\001\002\000\004\047\231\001\002" +
    "\000\022\004\uffdc\010\uffdc\036\uffdc\042\uffdc\060\uffdc\061" +
    "\uffdc\062\uffdc\063\uffdc\001\002\000\006\016\uffd9\042\uffd9" +
    "\001\002\000\040\005\060\023\052\024\067\025\057\026" +
    "\064\027\063\030\066\031\050\032\061\033\055\034\053" +
    "\035\070\044\051\045\062\046\054\001\002\000\004\015" +
    "\uffdb\001\002\000\004\015\236\001\002\000\004\014\237" +
    "\001\002\000\006\011\242\021\240\001\002\000\040\005" +
    "\060\023\052\024\067\025\057\026\064\027\063\030\066" +
    "\031\050\032\061\033\055\034\053\035\070\044\051\045" +
    "\062\046\054\001\002\000\004\042\244\001\002\000\004" +
    "\005\243\001\002\000\004\042\uffd7\001\002\000\004\047" +
    "\245\001\002\000\022\004\uffda\010\uffda\036\uffda\042\uffda" +
    "\060\uffda\061\uffda\062\uffda\063\uffda\001\002\000\006\016" +
    "\250\022\251\001\002\000\006\016\uffd4\022\uffd4\001\002" +
    "\000\040\005\060\023\052\024\067\025\057\026\064\027" +
    "\063\030\066\031\050\032\061\033\055\034\053\035\070" +
    "\044\051\045\062\046\054\001\002\000\004\042\uffd6\001" +
    "\002\000\006\016\uffd5\022\uffd5\001\002\000\006\006\254" +
    "\007\256\001\002\000\004\012\uffd1\001\002\000\004\012" +
    "\257\001\002\000\004\012\uffd0\001\002\000\004\012\260" +
    "\001\002\000\004\011\261\001\002\000\004\005\262\001" +
    "\002\000\004\013\263\001\002\000\004\015\264\001\002" +
    "\000\004\021\265\001\002\000\040\005\060\023\052\024" +
    "\067\025\057\026\064\027\063\030\066\031\050\032\061" +
    "\033\055\034\053\035\070\044\051\045\062\046\054\001" +
    "\002\000\006\016\271\022\270\001\002\000\006\016\uffce" +
    "\022\uffce\001\002\000\004\042\273\001\002\000\040\005" +
    "\060\023\052\024\067\025\057\026\064\027\063\030\066" +
    "\031\050\032\061\033\055\034\053\035\070\044\051\045" +
    "\062\046\054\001\002\000\006\016\uffcf\022\uffcf\001\002" +
    "\000\004\047\274\001\002\000\022\004\uffd2\010\uffd2\036" +
    "\uffd2\042\uffd2\060\uffd2\061\uffd2\062\uffd2\063\uffd2\001\002" +
    "\000\004\017\276\001\002\000\004\051\167\001\002\000" +
    "\004\052\300\001\002\000\004\012\345\001\002\000\004" +
    "\053\302\001\002\000\004\012\335\001\002\000\004\054" +
    "\305\001\002\000\004\055\315\001\002\000\004\012\306" +
    "\001\002\000\004\012\307\001\002\000\004\007\310\001" +
    "\002\000\004\040\311\001\002\000\040\005\060\023\052" +
    "\024\067\025\057\026\064\027\063\030\066\031\050\032" +
    "\061\033\055\034\053\035\070\044\051\045\062\046\054" +
    "\001\002\000\004\042\313\001\002\000\004\047\314\001" +
    "\002\000\004\055\uffe2\001\002\000\004\012\326\001\002" +
    "\000\004\050\317\001\002\000\004\060\320\001\002\000" +
    "\004\042\321\001\002\000\004\047\322\001\002\000\004" +
    "\020\323\001\002\000\004\042\324\001\002\000\004\047" +
    "\325\001\002\000\022\004\ufff2\010\ufff2\036\ufff2\042\ufff2" +
    "\060\ufff2\061\ufff2\062\ufff2\063\ufff2\001\002\000\004\012" +
    "\327\001\002\000\004\007\330\001\002\000\004\040\331" +
    "\001\002\000\040\005\060\023\052\024\067\025\057\026" +
    "\064\027\063\030\066\031\050\032\061\033\055\034\053" +
    "\035\070\044\051\045\062\046\054\001\002\000\004\042" +
    "\333\001\002\000\004\047\334\001\002\000\004\050\uffe1" +
    "\001\002\000\004\012\336\001\002\000\004\006\337\001" +
    "\002\000\004\040\uffe8\001\002\000\004\040\341\001\002" +
    "\000\006\011\043\021\042\001\002\000\004\042\343\001" +
    "\002\000\004\047\344\001\002\000\004\054\uffe7\001\002" +
    "\000\004\012\346\001\002\000\004\007\347\001\002\000" +
    "\004\040\uffea\001\002\000\004\040\351\001\002\000\006" +
    "\011\043\021\042\001\002\000\004\042\353\001\002\000" +
    "\004\047\354\001\002\000\004\053\uffe9\001\002\000\006" +
    "\006\254\007\256\001\002\000\004\012\357\001\002\000" +
    "\004\012\360\001\002\000\004\005\361\001\002\000\004" +
    "\013\362\001\002\000\004\015\363\001\002\000\040\005" +
    "\060\023\052\024\067\025\057\026\064\027\063\030\066" +
    "\031\050\032\061\033\055\034\053\035\070\044\051\045" +
    "\062\046\054\001\002\000\004\042\365\001\002\000\004" +
    "\047\366\001\002\000\022\004\uffd3\010\uffd3\036\uffd3\042" +
    "\uffd3\060\uffd3\061\uffd3\062\uffd3\063\uffd3\001\002\000\004" +
    "\043\370\001\002\000\004\003\uffff\001\002\000\004\003" +
    "\372\001\002\000\004\002\ufffe\001\002\000\004\017\374" +
    "\001\002\000\004\051\167\001\002\000\004\052\300\001" +
    "\002\000\004\053\302\001\002\000\004\054\305\001\002" +
    "\000\004\055\315\001\002\000\004\050\u0102\001\002\000" +
    "\004\062\u0103\001\002\000\004\042\u0104\001\002\000\004" +
    "\047\u0105\001\002\000\004\020\u0106\001\002\000\004\042" +
    "\u0107\001\002\000\004\047\u0108\001\002\000\022\004\uffdf" +
    "\010\uffdf\036\uffdf\042\uffdf\060\uffdf\061\uffdf\062\uffdf\063" +
    "\uffdf\001\002\000\004\017\u010a\001\002\000\004\051\167" +
    "\001\002\000\004\057\034\001\002\000\004\050\u010d\001" +
    "\002\000\004\062\u010e\001\002\000\004\042\u010f\001\002" +
    "\000\004\047\u0110\001\002\000\004\020\u0111\001\002\000" +
    "\004\042\u0112\001\002\000\004\047\u0113\001\002\000\022" +
    "\004\uffdd\010\uffdd\036\uffdd\042\uffdd\060\uffdd\061\uffdd\062" +
    "\uffdd\063\uffdd\001\002" });

  /** Access to parse-action table. */
  public short[][] action_table() {return _action_table;}

  /** <code>reduce_goto</code> table. */
  protected static final short[][] _reduce_table = 
    unpackFromStrings(new String[] {
    "\000\u0111\000\006\002\004\036\003\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\026\003\012" +
    "\005\010\006\011\016\024\017\007\021\015\022\025\023" +
    "\017\030\020\032\027\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\004\047" +
    "\u0108\001\001\000\004\046\372\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\004\040\274\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\026\003\012\005\010\006\011\016" +
    "\024\017\007\021\216\022\025\023\017\030\020\032\027" +
    "\001\001\000\004\041\030\001\001\000\002\001\001\000" +
    "\002\001\001\000\004\007\032\001\001\000\004\004\165" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\004\043\037\001\001\000\002\001\001\000\004" +
    "\014\043\001\001\000\006\015\055\027\064\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\004\052\160\001\001\000" +
    "\002\001\001\000\002\001\001\000\004\055\147\001\001" +
    "\000\002\001\001\000\004\054\143\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\004\053\127" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\004\051\111\001\001\000\002" +
    "\001\001\000\004\056\070\001\001\000\002\001\001\000" +
    "\004\025\072\001\001\000\002\001\001\000\006\024\076" +
    "\027\077\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\004" +
    "\027\102\001\001\000\002\001\001\000\002\001\001\000" +
    "\004\027\105\001\001\000\002\001\001\000\004\027\107" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\004\025\113\001\001\000\002\001\001\000\002" +
    "\001\001\000\004\027\116\001\001\000\002\001\001\000" +
    "\004\027\120\001\001\000\002\001\001\000\002\001\001" +
    "\000\004\027\123\001\001\000\002\001\001\000\004\027" +
    "\125\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\004\025\131\001\001\000\002\001\001\000" +
    "\002\001\001\000\004\027\134\001\001\000\002\001\001" +
    "\000\004\027\136\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\004\027\142\001\001\000\002" +
    "\001\001\000\002\001\001\000\004\025\145\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\004" +
    "\025\151\001\001\000\002\001\001\000\002\001\001\000" +
    "\004\027\154\001\001\000\002\001\001\000\004\027\156" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\004\025\162\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\004\020\167\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\004\027\203\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\004\042\211\001" +
    "\001\000\002\001\001\000\004\014\213\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\006\027\225\034\224\001\001\000" +
    "\002\001\001\000\002\001\001\000\004\027\231\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\004\027\233\001\001\000\004\050\234\001\001\000\002" +
    "\001\001\000\002\001\001\000\004\035\240\001\001\000" +
    "\006\027\246\033\245\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\004\027\251" +
    "\001\001\000\002\001\001\000\002\001\001\000\004\026" +
    "\254\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\006\027\266\031\265\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\004\027\271\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\004\020\276\001\001\000\004\012\300" +
    "\001\001\000\002\001\001\000\004\013\302\001\001\000" +
    "\002\001\001\000\004\010\303\001\001\000\004\011\315" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\004\027\311\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\004\027\331\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\004\045\337\001\001\000" +
    "\002\001\001\000\004\014\341\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\004\044\347\001\001\000\002\001\001" +
    "\000\004\014\351\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\004\026\355\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\004\027\363\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\004\037\370\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\004\020\374\001\001\000" +
    "\004\012\375\001\001\000\004\013\376\001\001\000\004" +
    "\010\377\001\001\000\004\011\u0100\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\004\020\u010a\001\001" +
    "\000\004\007\u010b\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001" });

  /** Access to <code>reduce_goto</code> table. */
  public short[][] reduce_table() {return _reduce_table;}

  /** Instance of action encapsulation class. */
  protected CUP$sintactical$actions action_obj;

  /** Action encapsulation object initializer. */
  protected void init_actions()
    {
      action_obj = new CUP$sintactical$actions(this);
    }

  /** Invoke a user supplied parse action. */
  public java_cup.runtime.Symbol do_action(
    int                        act_num,
    java_cup.runtime.lr_parser parser,
    java.util.Stack            stack,
    int                        top)
    throws java.lang.Exception
  {
    /* call code in generated class */
    return action_obj.CUP$sintactical$do_action(act_num, parser, stack, top);
  }

  /** Indicates start state. */
  public int start_state() {return 0;}
  /** Indicates start production. */
  public int start_production() {return 0;}

  /** <code>EOF</code> Symbol index. */
  public int EOF_sym() {return 0;}

  /** <code>error</code> Symbol index. */
  public int error_sym() {return 1;}



    public ArrayList<proyecto1_oc1_202010770.tabla_de_simbolos> tabla_simbolos = new ArrayList<>();
    public ArrayList<proyecto1_oc1_202010770.lista> lista_de_elementos = new ArrayList<>();
    public proyecto1_oc1_202010770.operaciones_aritmeticas operaciones = new operaciones_aritmeticas();
    public proyecto1_oc1_202010770.Impresion impresion = new Impresion();
    public String actual = "";
    public String datos_en_lista = "";
    public String operacion_estadistica = "";
    public String operacion_grafica ="";
    proyecto1_oc1_202010770.Graficar graficals = new proyecto1_oc1_202010770.Graficar();
 
    public int num_global = 0;
    public void syntax_error(Symbol s){
        System.out.println("Error Sintactico: "+ s.value +" Linea "+(s.right+1)+" columna "+(s.left+1)+"\n"  );
    }

    public void unrecovered_syntax_error(Symbol s) throws java.lang.Exception{ 
        System.out.println("Error de sintaxis no se pudo terminar de analizar: "+ s.value +" Linea "+(s.right+1)+" columna "+(s.left+1)+"\n" );
        
}


/** Cup generated class to encapsulate user supplied action code.*/
@SuppressWarnings({"rawtypes", "unchecked", "unused"})
class CUP$sintactical$actions {
  private final sintactical parser;

  /** Constructor */
  CUP$sintactical$actions(sintactical parser) {
    this.parser = parser;
  }

  /** Method 0 with the actual generated action code for actions 0 to 300. */
  public final java_cup.runtime.Symbol CUP$sintactical$do_action_part00000000(
    int                        CUP$sintactical$act_num,
    java_cup.runtime.lr_parser CUP$sintactical$parser,
    java.util.Stack            CUP$sintactical$stack,
    int                        CUP$sintactical$top)
    throws java.lang.Exception
    {
      /* Symbol object for return from actions */
      java_cup.runtime.Symbol CUP$sintactical$result;

      /* select the action based on the action number */
      switch (CUP$sintactical$act_num)
        {
          /*. . . . . . . . . . . . . . . . . . . .*/
          case 0: // $START ::= inicio EOF 
            {
              Object RESULT =null;
		int start_valleft = ((java_cup.runtime.Symbol)CUP$sintactical$stack.elementAt(CUP$sintactical$top-1)).left;
		int start_valright = ((java_cup.runtime.Symbol)CUP$sintactical$stack.elementAt(CUP$sintactical$top-1)).right;
		Object start_val = (Object)((java_cup.runtime.Symbol) CUP$sintactical$stack.elementAt(CUP$sintactical$top-1)).value;
		RESULT = start_val;
              CUP$sintactical$result = parser.getSymbolFactory().newSymbol("$START",0, ((java_cup.runtime.Symbol)CUP$sintactical$stack.elementAt(CUP$sintactical$top-1)), ((java_cup.runtime.Symbol)CUP$sintactical$stack.peek()), RESULT);
            }
          /* ACCEPT */
          CUP$sintactical$parser.done_parsing();
          return CUP$sintactical$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 1: // NT$0 ::= 
            {
              Object RESULT =null;
lista_de_elementos.add(new proyecto1_oc1_202010770.lista("char_temp"));lista_de_elementos.add(new proyecto1_oc1_202010770.lista("double_temp"));
              CUP$sintactical$result = parser.getSymbolFactory().newSymbol("NT$0",28, ((java_cup.runtime.Symbol)CUP$sintactical$stack.peek()), RESULT);
            }
          return CUP$sintactical$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 2: // NT$1 ::= 
            {
              Object RESULT =(Object) ((java_cup.runtime.Symbol) CUP$sintactical$stack.elementAt(CUP$sintactical$top-4)).value;
RESULT="Se pudo!";
              CUP$sintactical$result = parser.getSymbolFactory().newSymbol("NT$1",29, ((java_cup.runtime.Symbol)CUP$sintactical$stack.peek()), RESULT);
            }
          return CUP$sintactical$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 3: // inicio ::= NT$0 PROGRAM instruccion END PROGRAM NT$1 error 
            {
              Object RESULT =null;
              // propagate RESULT from NT$1
                RESULT = (Object) ((java_cup.runtime.Symbol) CUP$sintactical$stack.elementAt(CUP$sintactical$top-1)).value;

              CUP$sintactical$result = parser.getSymbolFactory().newSymbol("inicio",0, ((java_cup.runtime.Symbol)CUP$sintactical$stack.elementAt(CUP$sintactical$top-6)), ((java_cup.runtime.Symbol)CUP$sintactical$stack.peek()), RESULT);
            }
          return CUP$sintactical$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 4: // instruccion ::= lista_de_instrucciones instruccion 
            {
              Object RESULT =null;

              CUP$sintactical$result = parser.getSymbolFactory().newSymbol("instruccion",15, ((java_cup.runtime.Symbol)CUP$sintactical$stack.elementAt(CUP$sintactical$top-1)), ((java_cup.runtime.Symbol)CUP$sintactical$stack.peek()), RESULT);
            }
          return CUP$sintactical$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 5: // instruccion ::= lista_de_instrucciones 
            {
              Object RESULT =null;

              CUP$sintactical$result = parser.getSymbolFactory().newSymbol("instruccion",15, ((java_cup.runtime.Symbol)CUP$sintactical$stack.peek()), ((java_cup.runtime.Symbol)CUP$sintactical$stack.peek()), RESULT);
            }
          return CUP$sintactical$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 6: // lista_de_instrucciones ::= asignacion 
            {
              Object RESULT =null;

              CUP$sintactical$result = parser.getSymbolFactory().newSymbol("lista_de_instrucciones",16, ((java_cup.runtime.Symbol)CUP$sintactical$stack.peek()), ((java_cup.runtime.Symbol)CUP$sintactical$stack.peek()), RESULT);
            }
          return CUP$sintactical$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 7: // lista_de_instrucciones ::= lista 
            {
              Object RESULT =null;

              CUP$sintactical$result = parser.getSymbolFactory().newSymbol("lista_de_instrucciones",16, ((java_cup.runtime.Symbol)CUP$sintactical$stack.peek()), ((java_cup.runtime.Symbol)CUP$sintactical$stack.peek()), RESULT);
            }
          return CUP$sintactical$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 8: // lista_de_instrucciones ::= impresiones 
            {
              Object RESULT =null;

              CUP$sintactical$result = parser.getSymbolFactory().newSymbol("lista_de_instrucciones",16, ((java_cup.runtime.Symbol)CUP$sintactical$stack.peek()), ((java_cup.runtime.Symbol)CUP$sintactical$stack.peek()), RESULT);
            }
          return CUP$sintactical$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 9: // lista_de_instrucciones ::= graficar 
            {
              Object RESULT =null;

              CUP$sintactical$result = parser.getSymbolFactory().newSymbol("lista_de_instrucciones",16, ((java_cup.runtime.Symbol)CUP$sintactical$stack.peek()), ((java_cup.runtime.Symbol)CUP$sintactical$stack.peek()), RESULT);
            }
          return CUP$sintactical$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 10: // graficar ::= grafica_barras 
            {
              Object RESULT =null;

              CUP$sintactical$result = parser.getSymbolFactory().newSymbol("graficar",12, ((java_cup.runtime.Symbol)CUP$sintactical$stack.peek()), ((java_cup.runtime.Symbol)CUP$sintactical$stack.peek()), RESULT);
            }
          return CUP$sintactical$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 11: // graficar ::= grafica_pie 
            {
              Object RESULT =null;

              CUP$sintactical$result = parser.getSymbolFactory().newSymbol("graficar",12, ((java_cup.runtime.Symbol)CUP$sintactical$stack.peek()), ((java_cup.runtime.Symbol)CUP$sintactical$stack.peek()), RESULT);
            }
          return CUP$sintactical$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 12: // graficar ::= grafica_linea 
            {
              Object RESULT =null;

              CUP$sintactical$result = parser.getSymbolFactory().newSymbol("graficar",12, ((java_cup.runtime.Symbol)CUP$sintactical$stack.peek()), ((java_cup.runtime.Symbol)CUP$sintactical$stack.peek()), RESULT);
            }
          return CUP$sintactical$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 13: // graficar ::= grafica_histograma 
            {
              Object RESULT =null;

              CUP$sintactical$result = parser.getSymbolFactory().newSymbol("graficar",12, ((java_cup.runtime.Symbol)CUP$sintactical$stack.peek()), ((java_cup.runtime.Symbol)CUP$sintactical$stack.peek()), RESULT);
            }
          return CUP$sintactical$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 14: // NT$2 ::= 
            {
              Object RESULT =null;

for (proyecto1_oc1_202010770.lista elemento : lista_de_elementos) {
                if(elemento.variable.equals("char_temp")){
                   //elemento.refresh_list();
}
}

for (proyecto1_oc1_202010770.lista elemento : lista_de_elementos) {
                if(elemento.variable.equals("double_temp")){
                    //elemento.refresh_list();
}
}




              CUP$sintactical$result = parser.getSymbolFactory().newSymbol("NT$2",30, ((java_cup.runtime.Symbol)CUP$sintactical$stack.peek()), RESULT);
            }
          return CUP$sintactical$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 15: // grafica_barras ::= BARRAS NT$2 PARENTESIS_ABIERTO asignacion_titulo eje_x eje_y titulo_x titulo_y EXEC BARRAS END PUNTO_Y_COMA PARENTESIS_CERRADO END PUNTO_Y_COMA 
            {
              Object RESULT =null;
              // propagate RESULT from NT$2
                RESULT = (Object) ((java_cup.runtime.Symbol) CUP$sintactical$stack.elementAt(CUP$sintactical$top-13)).value;
		int tituloleft = ((java_cup.runtime.Symbol)CUP$sintactical$stack.elementAt(CUP$sintactical$top-11)).left;
		int tituloright = ((java_cup.runtime.Symbol)CUP$sintactical$stack.elementAt(CUP$sintactical$top-11)).right;
		Object titulo = (Object)((java_cup.runtime.Symbol) CUP$sintactical$stack.elementAt(CUP$sintactical$top-11)).value;
		int variable_xleft = ((java_cup.runtime.Symbol)CUP$sintactical$stack.elementAt(CUP$sintactical$top-10)).left;
		int variable_xright = ((java_cup.runtime.Symbol)CUP$sintactical$stack.elementAt(CUP$sintactical$top-10)).right;
		Object variable_x = (Object)((java_cup.runtime.Symbol) CUP$sintactical$stack.elementAt(CUP$sintactical$top-10)).value;
		int variable_yleft = ((java_cup.runtime.Symbol)CUP$sintactical$stack.elementAt(CUP$sintactical$top-9)).left;
		int variable_yright = ((java_cup.runtime.Symbol)CUP$sintactical$stack.elementAt(CUP$sintactical$top-9)).right;
		Object variable_y = (Object)((java_cup.runtime.Symbol) CUP$sintactical$stack.elementAt(CUP$sintactical$top-9)).value;
		int title_xleft = ((java_cup.runtime.Symbol)CUP$sintactical$stack.elementAt(CUP$sintactical$top-8)).left;
		int title_xright = ((java_cup.runtime.Symbol)CUP$sintactical$stack.elementAt(CUP$sintactical$top-8)).right;
		Object title_x = (Object)((java_cup.runtime.Symbol) CUP$sintactical$stack.elementAt(CUP$sintactical$top-8)).value;
		int title_yleft = ((java_cup.runtime.Symbol)CUP$sintactical$stack.elementAt(CUP$sintactical$top-7)).left;
		int title_yright = ((java_cup.runtime.Symbol)CUP$sintactical$stack.elementAt(CUP$sintactical$top-7)).right;
		Object title_y = (Object)((java_cup.runtime.Symbol) CUP$sintactical$stack.elementAt(CUP$sintactical$top-7)).value;
		

proyecto1_oc1_202010770.lista lista_double = null;
for (proyecto1_oc1_202010770.lista elemento : lista_de_elementos) {
               
                    if(elemento.variable.equals(variable_x.toString())){
                        
                        lista_double = elemento;
                        //lista_double.mostrarElementos();
                        break;
                    }
}      

proyecto1_oc1_202010770.lista lista_string = null;
for (proyecto1_oc1_202010770.lista elemento : lista_de_elementos) {
               
                    if(elemento.variable.equals(variable_y.toString())){
                       
                        lista_string = elemento;
                        //lista_string.mostrarElementos();
                       
                        break;
                    }
}

graficals.barras(titulo.toString(), title_x.toString(), title_y.toString(),lista_double.lista, lista_string.lista);
RESULT= "Impresion";

              CUP$sintactical$result = parser.getSymbolFactory().newSymbol("grafica_barras",13, ((java_cup.runtime.Symbol)CUP$sintactical$stack.elementAt(CUP$sintactical$top-14)), ((java_cup.runtime.Symbol)CUP$sintactical$stack.peek()), RESULT);
            }
          return CUP$sintactical$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 16: // NT$3 ::= 
            {
              Object RESULT =null;


for (proyecto1_oc1_202010770.lista elemento : lista_de_elementos) {
                if(elemento.variable.equals("char_temp")){
                   elemento.refresh_list();
}
}

for (proyecto1_oc1_202010770.lista elemento : lista_de_elementos) {
                if(elemento.variable.equals("double_temp")){
                    elemento.refresh_list();
}
}




              CUP$sintactical$result = parser.getSymbolFactory().newSymbol("NT$3",31, ((java_cup.runtime.Symbol)CUP$sintactical$stack.peek()), RESULT);
            }
          return CUP$sintactical$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 17: // grafica_pie ::= PIE NT$3 PARENTESIS_ABIERTO label_pie valores_pie asignacion_titulo EXEC PIE END PUNTO_Y_COMA PARENTESIS_CERRADO END PUNTO_Y_COMA 
            {
              Object RESULT =null;
              // propagate RESULT from NT$3
                RESULT = (Object) ((java_cup.runtime.Symbol) CUP$sintactical$stack.elementAt(CUP$sintactical$top-11)).value;
		int labelesleft = ((java_cup.runtime.Symbol)CUP$sintactical$stack.elementAt(CUP$sintactical$top-9)).left;
		int labelesright = ((java_cup.runtime.Symbol)CUP$sintactical$stack.elementAt(CUP$sintactical$top-9)).right;
		Object labeles = (Object)((java_cup.runtime.Symbol) CUP$sintactical$stack.elementAt(CUP$sintactical$top-9)).value;
		int valor_variableleft = ((java_cup.runtime.Symbol)CUP$sintactical$stack.elementAt(CUP$sintactical$top-8)).left;
		int valor_variableright = ((java_cup.runtime.Symbol)CUP$sintactical$stack.elementAt(CUP$sintactical$top-8)).right;
		Object valor_variable = (Object)((java_cup.runtime.Symbol) CUP$sintactical$stack.elementAt(CUP$sintactical$top-8)).value;
		int tituloleft = ((java_cup.runtime.Symbol)CUP$sintactical$stack.elementAt(CUP$sintactical$top-7)).left;
		int tituloright = ((java_cup.runtime.Symbol)CUP$sintactical$stack.elementAt(CUP$sintactical$top-7)).right;
		Object titulo = (Object)((java_cup.runtime.Symbol) CUP$sintactical$stack.elementAt(CUP$sintactical$top-7)).value;
		

proyecto1_oc1_202010770.lista lista_double = null;
proyecto1_oc1_202010770.lista lista_string = null;
for (proyecto1_oc1_202010770.lista elemento : lista_de_elementos) {
               
                    if(elemento.variable.equals(labeles.toString())){
           
                        lista_string = elemento;
                        
                        break;
                    }
}  

for (proyecto1_oc1_202010770.lista elemento : lista_de_elementos) {
               
                    if(elemento.variable.equals(valor_variable.toString())){
                        
                        lista_double = elemento;
                        
                        break;
                    }
}  
graficals.Pie(titulo.toString(), lista_double.lista, lista_string.lista);
RESULT= "AS";

              CUP$sintactical$result = parser.getSymbolFactory().newSymbol("grafica_pie",3, ((java_cup.runtime.Symbol)CUP$sintactical$stack.elementAt(CUP$sintactical$top-12)), ((java_cup.runtime.Symbol)CUP$sintactical$stack.peek()), RESULT);
            }
          return CUP$sintactical$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 18: // NT$4 ::= 
            {
              Object RESULT =null;
operacion_grafica= "double";
              CUP$sintactical$result = parser.getSymbolFactory().newSymbol("NT$4",32, ((java_cup.runtime.Symbol)CUP$sintactical$stack.peek()), RESULT);
            }
          return CUP$sintactical$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 19: // valores_pie ::= VALUES DOS_PUNTOS DOS_PUNTOS DOUBLE NT$4 IGUAL lista_grafica END PUNTO_Y_COMA 
            {
              Object RESULT =null;
              // propagate RESULT from NT$4
                RESULT = (Object) ((java_cup.runtime.Symbol) CUP$sintactical$stack.elementAt(CUP$sintactical$top-4)).value;
		int valorleft = ((java_cup.runtime.Symbol)CUP$sintactical$stack.elementAt(CUP$sintactical$top-2)).left;
		int valorright = ((java_cup.runtime.Symbol)CUP$sintactical$stack.elementAt(CUP$sintactical$top-2)).right;
		Object valor = (Object)((java_cup.runtime.Symbol) CUP$sintactical$stack.elementAt(CUP$sintactical$top-2)).value;
		RESULT = valor.toString();
              CUP$sintactical$result = parser.getSymbolFactory().newSymbol("valores_pie",2, ((java_cup.runtime.Symbol)CUP$sintactical$stack.elementAt(CUP$sintactical$top-8)), ((java_cup.runtime.Symbol)CUP$sintactical$stack.peek()), RESULT);
            }
          return CUP$sintactical$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 20: // NT$5 ::= 
            {
              Object RESULT =null;
operacion_grafica= "cadena";
              CUP$sintactical$result = parser.getSymbolFactory().newSymbol("NT$5",33, ((java_cup.runtime.Symbol)CUP$sintactical$stack.peek()), RESULT);
            }
          return CUP$sintactical$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 21: // label_pie ::= LABEL DOS_PUNTOS DOS_PUNTOS CADENA NT$5 IGUAL lista_grafica END PUNTO_Y_COMA 
            {
              Object RESULT =null;
              // propagate RESULT from NT$5
                RESULT = (Object) ((java_cup.runtime.Symbol) CUP$sintactical$stack.elementAt(CUP$sintactical$top-4)).value;
		int valorleft = ((java_cup.runtime.Symbol)CUP$sintactical$stack.elementAt(CUP$sintactical$top-2)).left;
		int valorright = ((java_cup.runtime.Symbol)CUP$sintactical$stack.elementAt(CUP$sintactical$top-2)).right;
		Object valor = (Object)((java_cup.runtime.Symbol) CUP$sintactical$stack.elementAt(CUP$sintactical$top-2)).value;
		 RESULT = valor.toString();
              CUP$sintactical$result = parser.getSymbolFactory().newSymbol("label_pie",5, ((java_cup.runtime.Symbol)CUP$sintactical$stack.elementAt(CUP$sintactical$top-8)), ((java_cup.runtime.Symbol)CUP$sintactical$stack.peek()), RESULT);
            }
          return CUP$sintactical$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 22: // asignacion_titulo ::= TITULO DOS_PUNTOS DOS_PUNTOS CADENA IGUAL dato END PUNTO_Y_COMA 
            {
              Object RESULT =null;
		int resultadoleft = ((java_cup.runtime.Symbol)CUP$sintactical$stack.elementAt(CUP$sintactical$top-2)).left;
		int resultadoright = ((java_cup.runtime.Symbol)CUP$sintactical$stack.elementAt(CUP$sintactical$top-2)).right;
		Object resultado = (Object)((java_cup.runtime.Symbol) CUP$sintactical$stack.elementAt(CUP$sintactical$top-2)).value;
		RESULT = resultado.toString();
              CUP$sintactical$result = parser.getSymbolFactory().newSymbol("asignacion_titulo",14, ((java_cup.runtime.Symbol)CUP$sintactical$stack.elementAt(CUP$sintactical$top-7)), ((java_cup.runtime.Symbol)CUP$sintactical$stack.peek()), RESULT);
            }
          return CUP$sintactical$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 23: // NT$6 ::= 
            {
              Object RESULT =null;
operacion_grafica= "cadena";
              CUP$sintactical$result = parser.getSymbolFactory().newSymbol("NT$6",34, ((java_cup.runtime.Symbol)CUP$sintactical$stack.peek()), RESULT);
            }
          return CUP$sintactical$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 24: // eje_x ::= EJE_X DOS_PUNTOS DOS_PUNTOS CADENA NT$6 IGUAL lista_grafica END PUNTO_Y_COMA 
            {
              Object RESULT =null;
              // propagate RESULT from NT$6
                RESULT = (Object) ((java_cup.runtime.Symbol) CUP$sintactical$stack.elementAt(CUP$sintactical$top-4)).value;
		int bleft = ((java_cup.runtime.Symbol)CUP$sintactical$stack.elementAt(CUP$sintactical$top-2)).left;
		int bright = ((java_cup.runtime.Symbol)CUP$sintactical$stack.elementAt(CUP$sintactical$top-2)).right;
		Object b = (Object)((java_cup.runtime.Symbol) CUP$sintactical$stack.elementAt(CUP$sintactical$top-2)).value;
		RESULT=b;
              CUP$sintactical$result = parser.getSymbolFactory().newSymbol("eje_x",8, ((java_cup.runtime.Symbol)CUP$sintactical$stack.elementAt(CUP$sintactical$top-8)), ((java_cup.runtime.Symbol)CUP$sintactical$stack.peek()), RESULT);
            }
          return CUP$sintactical$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 25: // NT$7 ::= 
            {
              Object RESULT =null;
operacion_grafica= "double";
              CUP$sintactical$result = parser.getSymbolFactory().newSymbol("NT$7",35, ((java_cup.runtime.Symbol)CUP$sintactical$stack.peek()), RESULT);
            }
          return CUP$sintactical$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 26: // eje_y ::= EJE_Y DOS_PUNTOS DOS_PUNTOS DOUBLE NT$7 IGUAL lista_grafica END PUNTO_Y_COMA 
            {
              Object RESULT =null;
              // propagate RESULT from NT$7
                RESULT = (Object) ((java_cup.runtime.Symbol) CUP$sintactical$stack.elementAt(CUP$sintactical$top-4)).value;
		int bleft = ((java_cup.runtime.Symbol)CUP$sintactical$stack.elementAt(CUP$sintactical$top-2)).left;
		int bright = ((java_cup.runtime.Symbol)CUP$sintactical$stack.elementAt(CUP$sintactical$top-2)).right;
		Object b = (Object)((java_cup.runtime.Symbol) CUP$sintactical$stack.elementAt(CUP$sintactical$top-2)).value;
		RESULT=b;
              CUP$sintactical$result = parser.getSymbolFactory().newSymbol("eje_y",9, ((java_cup.runtime.Symbol)CUP$sintactical$stack.elementAt(CUP$sintactical$top-8)), ((java_cup.runtime.Symbol)CUP$sintactical$stack.peek()), RESULT);
            }
          return CUP$sintactical$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 27: // lista_grafica ::= ARROBA VARIABLE 
            {
              Object RESULT =null;
		int varleft = ((java_cup.runtime.Symbol)CUP$sintactical$stack.peek()).left;
		int varright = ((java_cup.runtime.Symbol)CUP$sintactical$stack.peek()).right;
		String var = (String)((java_cup.runtime.Symbol) CUP$sintactical$stack.peek()).value;
		RESULT = var;
              CUP$sintactical$result = parser.getSymbolFactory().newSymbol("lista_grafica",10, ((java_cup.runtime.Symbol)CUP$sintactical$stack.elementAt(CUP$sintactical$top-1)), ((java_cup.runtime.Symbol)CUP$sintactical$stack.peek()), RESULT);
            }
          return CUP$sintactical$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 28: // lista_grafica ::= CORCHETE_ABIERTO ultima_asignacion CORCHETE_CERRADO 
            {
              Object RESULT =null;
		


String vals = "char_temp";
lista_de_elementos.add(new proyecto1_oc1_202010770.lista(vals));
double numero = 0.0;
Scanner scanner = new Scanner(datos_en_lista);


while (scanner.hasNext()) {
            
            String numeroStr = scanner.next();
            
           
            for (proyecto1_oc1_202010770.lista elemento : lista_de_elementos) {
                if(operacion_grafica.equals("cadena")){
                   
                    if(elemento.variable.equals("char_temp")){
                        elemento.agregarElemento("char[]",vals, numeroStr.replace("Ñ", " "));
                    }
                }else{
                    if(elemento.variable.equals("double_temp")){
                        elemento.agregarElemento("double",vals, numeroStr.replace("Ñ", " "));
                    }
                }
                
                //elemento.mostrarElementos();
            }
        }
        if(operacion_grafica.equals("cadena")){
           
            RESULT ="char_temp";
            
        }else{
        RESULT ="double_temp";
        }

              CUP$sintactical$result = parser.getSymbolFactory().newSymbol("lista_grafica",10, ((java_cup.runtime.Symbol)CUP$sintactical$stack.elementAt(CUP$sintactical$top-2)), ((java_cup.runtime.Symbol)CUP$sintactical$stack.peek()), RESULT);
            }
          return CUP$sintactical$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 29: // ultima_asignacion ::= ultima_asignacion COMMA dato 
            {
              Object RESULT =null;
		int dataleft = ((java_cup.runtime.Symbol)CUP$sintactical$stack.peek()).left;
		int dataright = ((java_cup.runtime.Symbol)CUP$sintactical$stack.peek()).right;
		Object data = (Object)((java_cup.runtime.Symbol) CUP$sintactical$stack.peek()).value;
		datos_en_lista += " "+data.toString().replace(" ", "Ñ");
              CUP$sintactical$result = parser.getSymbolFactory().newSymbol("ultima_asignacion",11, ((java_cup.runtime.Symbol)CUP$sintactical$stack.elementAt(CUP$sintactical$top-2)), ((java_cup.runtime.Symbol)CUP$sintactical$stack.peek()), RESULT);
            }
          return CUP$sintactical$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 30: // ultima_asignacion ::= dato 
            {
              Object RESULT =null;
		int dataleft = ((java_cup.runtime.Symbol)CUP$sintactical$stack.peek()).left;
		int dataright = ((java_cup.runtime.Symbol)CUP$sintactical$stack.peek()).right;
		Object data = (Object)((java_cup.runtime.Symbol) CUP$sintactical$stack.peek()).value;
		datos_en_lista = data.toString().replace(" ", "Ñ");
              CUP$sintactical$result = parser.getSymbolFactory().newSymbol("ultima_asignacion",11, ((java_cup.runtime.Symbol)CUP$sintactical$stack.peek()), ((java_cup.runtime.Symbol)CUP$sintactical$stack.peek()), RESULT);
            }
          return CUP$sintactical$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 31: // titulo_x ::= TITULO_X DOS_PUNTOS DOS_PUNTOS CADENA IGUAL dato END PUNTO_Y_COMA 
            {
              Object RESULT =null;
		int dataleft = ((java_cup.runtime.Symbol)CUP$sintactical$stack.elementAt(CUP$sintactical$top-2)).left;
		int dataright = ((java_cup.runtime.Symbol)CUP$sintactical$stack.elementAt(CUP$sintactical$top-2)).right;
		Object data = (Object)((java_cup.runtime.Symbol) CUP$sintactical$stack.elementAt(CUP$sintactical$top-2)).value;
		RESULT = data.toString();
              CUP$sintactical$result = parser.getSymbolFactory().newSymbol("titulo_x",6, ((java_cup.runtime.Symbol)CUP$sintactical$stack.elementAt(CUP$sintactical$top-7)), ((java_cup.runtime.Symbol)CUP$sintactical$stack.peek()), RESULT);
            }
          return CUP$sintactical$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 32: // titulo_y ::= TITULO_Y DOS_PUNTOS DOS_PUNTOS CADENA IGUAL dato END PUNTO_Y_COMA 
            {
              Object RESULT =null;
		int dataleft = ((java_cup.runtime.Symbol)CUP$sintactical$stack.elementAt(CUP$sintactical$top-2)).left;
		int dataright = ((java_cup.runtime.Symbol)CUP$sintactical$stack.elementAt(CUP$sintactical$top-2)).right;
		Object data = (Object)((java_cup.runtime.Symbol) CUP$sintactical$stack.elementAt(CUP$sintactical$top-2)).value;
		RESULT = data.toString();
              CUP$sintactical$result = parser.getSymbolFactory().newSymbol("titulo_y",7, ((java_cup.runtime.Symbol)CUP$sintactical$stack.elementAt(CUP$sintactical$top-7)), ((java_cup.runtime.Symbol)CUP$sintactical$stack.peek()), RESULT);
            }
          return CUP$sintactical$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 33: // NT$8 ::= 
            {
              Object RESULT =null;

for (proyecto1_oc1_202010770.lista elemento : lista_de_elementos) {
                if(elemento.variable.equals("char_temp")){
                   elemento.refresh_list();
}
}

for (proyecto1_oc1_202010770.lista elemento : lista_de_elementos) {
                if(elemento.variable.equals("double_temp")){
                    elemento.refresh_list();
}
}




              CUP$sintactical$result = parser.getSymbolFactory().newSymbol("NT$8",36, ((java_cup.runtime.Symbol)CUP$sintactical$stack.peek()), RESULT);
            }
          return CUP$sintactical$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 34: // grafica_linea ::= LINEA NT$8 PARENTESIS_ABIERTO asignacion_titulo eje_x eje_y titulo_x titulo_y EXEC LINEA END PUNTO_Y_COMA PARENTESIS_CERRADO END PUNTO_Y_COMA 
            {
              Object RESULT =null;
              // propagate RESULT from NT$8
                RESULT = (Object) ((java_cup.runtime.Symbol) CUP$sintactical$stack.elementAt(CUP$sintactical$top-13)).value;
		int tituloleft = ((java_cup.runtime.Symbol)CUP$sintactical$stack.elementAt(CUP$sintactical$top-11)).left;
		int tituloright = ((java_cup.runtime.Symbol)CUP$sintactical$stack.elementAt(CUP$sintactical$top-11)).right;
		Object titulo = (Object)((java_cup.runtime.Symbol) CUP$sintactical$stack.elementAt(CUP$sintactical$top-11)).value;
		int variable_xleft = ((java_cup.runtime.Symbol)CUP$sintactical$stack.elementAt(CUP$sintactical$top-10)).left;
		int variable_xright = ((java_cup.runtime.Symbol)CUP$sintactical$stack.elementAt(CUP$sintactical$top-10)).right;
		Object variable_x = (Object)((java_cup.runtime.Symbol) CUP$sintactical$stack.elementAt(CUP$sintactical$top-10)).value;
		int variable_yleft = ((java_cup.runtime.Symbol)CUP$sintactical$stack.elementAt(CUP$sintactical$top-9)).left;
		int variable_yright = ((java_cup.runtime.Symbol)CUP$sintactical$stack.elementAt(CUP$sintactical$top-9)).right;
		Object variable_y = (Object)((java_cup.runtime.Symbol) CUP$sintactical$stack.elementAt(CUP$sintactical$top-9)).value;
		int title_xleft = ((java_cup.runtime.Symbol)CUP$sintactical$stack.elementAt(CUP$sintactical$top-8)).left;
		int title_xright = ((java_cup.runtime.Symbol)CUP$sintactical$stack.elementAt(CUP$sintactical$top-8)).right;
		Object title_x = (Object)((java_cup.runtime.Symbol) CUP$sintactical$stack.elementAt(CUP$sintactical$top-8)).value;
		int title_yleft = ((java_cup.runtime.Symbol)CUP$sintactical$stack.elementAt(CUP$sintactical$top-7)).left;
		int title_yright = ((java_cup.runtime.Symbol)CUP$sintactical$stack.elementAt(CUP$sintactical$top-7)).right;
		Object title_y = (Object)((java_cup.runtime.Symbol) CUP$sintactical$stack.elementAt(CUP$sintactical$top-7)).value;
		RESULT= "AS"; System.out.println(titulo.toString()+" "+variable_x +" "+variable_y+" " +title_x +" "+title_y);
              CUP$sintactical$result = parser.getSymbolFactory().newSymbol("grafica_linea",4, ((java_cup.runtime.Symbol)CUP$sintactical$stack.elementAt(CUP$sintactical$top-14)), ((java_cup.runtime.Symbol)CUP$sintactical$stack.peek()), RESULT);
            }
          return CUP$sintactical$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 35: // NT$9 ::= 
            {
              Object RESULT =null;

for (proyecto1_oc1_202010770.lista elemento : lista_de_elementos) {
                if(elemento.variable.equals("char_temp")){
                   elemento.refresh_list();
}
}

for (proyecto1_oc1_202010770.lista elemento : lista_de_elementos) {
                if(elemento.variable.equals("double_temp")){
                    elemento.refresh_list();
}
}




              CUP$sintactical$result = parser.getSymbolFactory().newSymbol("NT$9",37, ((java_cup.runtime.Symbol)CUP$sintactical$stack.peek()), RESULT);
            }
          return CUP$sintactical$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 36: // grafica_histograma ::= HISTOGRAM NT$9 PARENTESIS_ABIERTO asignacion_titulo label_pie EXEC LINEA END PUNTO_Y_COMA PARENTESIS_CERRADO END PUNTO_Y_COMA 
            {
              Object RESULT =null;
              // propagate RESULT from NT$9
                RESULT = (Object) ((java_cup.runtime.Symbol) CUP$sintactical$stack.elementAt(CUP$sintactical$top-10)).value;
		int tituloleft = ((java_cup.runtime.Symbol)CUP$sintactical$stack.elementAt(CUP$sintactical$top-8)).left;
		int tituloright = ((java_cup.runtime.Symbol)CUP$sintactical$stack.elementAt(CUP$sintactical$top-8)).right;
		Object titulo = (Object)((java_cup.runtime.Symbol) CUP$sintactical$stack.elementAt(CUP$sintactical$top-8)).value;
		int labelesleft = ((java_cup.runtime.Symbol)CUP$sintactical$stack.elementAt(CUP$sintactical$top-7)).left;
		int labelesright = ((java_cup.runtime.Symbol)CUP$sintactical$stack.elementAt(CUP$sintactical$top-7)).right;
		Object labeles = (Object)((java_cup.runtime.Symbol) CUP$sintactical$stack.elementAt(CUP$sintactical$top-7)).value;
		RESULT= "AS"; System.out.println(titulo.toString()+" "+labeles);
              CUP$sintactical$result = parser.getSymbolFactory().newSymbol("grafica_histograma",1, ((java_cup.runtime.Symbol)CUP$sintactical$stack.elementAt(CUP$sintactical$top-11)), ((java_cup.runtime.Symbol)CUP$sintactical$stack.peek()), RESULT);
            }
          return CUP$sintactical$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 37: // impresiones ::= CONSOLE DOS_PUNTOS DOS_PUNTOS PRINT IGUAL datos_de_impresion END PUNTO_Y_COMA 
            {
              Object RESULT =null;
		System.out.println("");
              CUP$sintactical$result = parser.getSymbolFactory().newSymbol("impresiones",24, ((java_cup.runtime.Symbol)CUP$sintactical$stack.elementAt(CUP$sintactical$top-7)), ((java_cup.runtime.Symbol)CUP$sintactical$stack.peek()), RESULT);
            }
          return CUP$sintactical$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 38: // NT$10 ::= 
            {
              Object RESULT =null;
		int actleft = ((java_cup.runtime.Symbol)CUP$sintactical$stack.peek()).left;
		int actright = ((java_cup.runtime.Symbol)CUP$sintactical$stack.peek()).right;
		Object act = (Object)((java_cup.runtime.Symbol) CUP$sintactical$stack.peek()).value;
        
        System.out.println("----------");
        System.out.println(act);
        System.out.println("----------");
              CUP$sintactical$result = parser.getSymbolFactory().newSymbol("NT$10",38, ((java_cup.runtime.Symbol)CUP$sintactical$stack.peek()), RESULT);
            }
          return CUP$sintactical$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 39: // impresiones ::= CONSOLE DOS_PUNTOS DOS_PUNTOS COLUMN IGUAL dato NT$10 DIAGONAL SLASH_MAYOR impresion_de_la_lista END PUNTO_Y_COMA 
            {
              Object RESULT =null;
              // propagate RESULT from NT$10
                RESULT = (Object) ((java_cup.runtime.Symbol) CUP$sintactical$stack.elementAt(CUP$sintactical$top-5)).value;
		int actleft = ((java_cup.runtime.Symbol)CUP$sintactical$stack.elementAt(CUP$sintactical$top-6)).left;
		int actright = ((java_cup.runtime.Symbol)CUP$sintactical$stack.elementAt(CUP$sintactical$top-6)).right;
		Object act = (Object)((java_cup.runtime.Symbol) CUP$sintactical$stack.elementAt(CUP$sintactical$top-6)).value;

              CUP$sintactical$result = parser.getSymbolFactory().newSymbol("impresiones",24, ((java_cup.runtime.Symbol)CUP$sintactical$stack.elementAt(CUP$sintactical$top-11)), ((java_cup.runtime.Symbol)CUP$sintactical$stack.peek()), RESULT);
            }
          return CUP$sintactical$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 40: // datos_de_impresion ::= datos_de_impresion COMMA dato 
            {
              Object RESULT =null;
		int datleft = ((java_cup.runtime.Symbol)CUP$sintactical$stack.peek()).left;
		int datright = ((java_cup.runtime.Symbol)CUP$sintactical$stack.peek()).right;
		Object dat = (Object)((java_cup.runtime.Symbol) CUP$sintactical$stack.peek()).value;
		impresion.imprimir(", "+dat.toString());
              CUP$sintactical$result = parser.getSymbolFactory().newSymbol("datos_de_impresion",26, ((java_cup.runtime.Symbol)CUP$sintactical$stack.elementAt(CUP$sintactical$top-2)), ((java_cup.runtime.Symbol)CUP$sintactical$stack.peek()), RESULT);
            }
          return CUP$sintactical$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 41: // datos_de_impresion ::= dato 
            {
              Object RESULT =null;
		int datleft = ((java_cup.runtime.Symbol)CUP$sintactical$stack.peek()).left;
		int datright = ((java_cup.runtime.Symbol)CUP$sintactical$stack.peek()).right;
		Object dat = (Object)((java_cup.runtime.Symbol) CUP$sintactical$stack.peek()).value;
		impresion.imprimir(dat.toString());
              CUP$sintactical$result = parser.getSymbolFactory().newSymbol("datos_de_impresion",26, ((java_cup.runtime.Symbol)CUP$sintactical$stack.peek()), ((java_cup.runtime.Symbol)CUP$sintactical$stack.peek()), RESULT);
            }
          return CUP$sintactical$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 42: // impresion_de_la_lista ::= ARROBA VARIABLE 
            {
              Object RESULT =null;
		int varleft = ((java_cup.runtime.Symbol)CUP$sintactical$stack.peek()).left;
		int varright = ((java_cup.runtime.Symbol)CUP$sintactical$stack.peek()).right;
		String var = (String)((java_cup.runtime.Symbol) CUP$sintactical$stack.peek()).value;
		
        for (proyecto1_oc1_202010770.lista elemento : lista_de_elementos) {
            
            if(elemento.variable.equals(var)){
                impresion.imprimir_lista(actual, elemento);
            }        
        }
              CUP$sintactical$result = parser.getSymbolFactory().newSymbol("impresion_de_la_lista",27, ((java_cup.runtime.Symbol)CUP$sintactical$stack.elementAt(CUP$sintactical$top-1)), ((java_cup.runtime.Symbol)CUP$sintactical$stack.peek()), RESULT);
            }
          return CUP$sintactical$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 43: // impresion_de_la_lista ::= CORCHETE_ABIERTO mas_listas CORCHETE_CERRADO 
            {
              Object RESULT =null;

              CUP$sintactical$result = parser.getSymbolFactory().newSymbol("impresion_de_la_lista",27, ((java_cup.runtime.Symbol)CUP$sintactical$stack.elementAt(CUP$sintactical$top-2)), ((java_cup.runtime.Symbol)CUP$sintactical$stack.peek()), RESULT);
            }
          return CUP$sintactical$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 44: // mas_listas ::= mas_listas COMMA dato 
            {
              Object RESULT =null;
		int valleft = ((java_cup.runtime.Symbol)CUP$sintactical$stack.peek()).left;
		int valright = ((java_cup.runtime.Symbol)CUP$sintactical$stack.peek()).right;
		Object val = (Object)((java_cup.runtime.Symbol) CUP$sintactical$stack.peek()).value;
		//System.out.println(val);
              CUP$sintactical$result = parser.getSymbolFactory().newSymbol("mas_listas",25, ((java_cup.runtime.Symbol)CUP$sintactical$stack.elementAt(CUP$sintactical$top-2)), ((java_cup.runtime.Symbol)CUP$sintactical$stack.peek()), RESULT);
            }
          return CUP$sintactical$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 45: // mas_listas ::= dato 
            {
              Object RESULT =null;
		int valleft = ((java_cup.runtime.Symbol)CUP$sintactical$stack.peek()).left;
		int valright = ((java_cup.runtime.Symbol)CUP$sintactical$stack.peek()).right;
		Object val = (Object)((java_cup.runtime.Symbol) CUP$sintactical$stack.peek()).value;
		//System.out.println(val);
              CUP$sintactical$result = parser.getSymbolFactory().newSymbol("mas_listas",25, ((java_cup.runtime.Symbol)CUP$sintactical$stack.peek()), ((java_cup.runtime.Symbol)CUP$sintactical$stack.peek()), RESULT);
            }
          return CUP$sintactical$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 46: // asignacion ::= VAR DOS_PUNTOS tipo_de_dato DOS_PUNTOS DOS_PUNTOS VARIABLE SLASH_MENOR DIAGONAL dato END PUNTO_Y_COMA 
            {
              Object RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$sintactical$stack.elementAt(CUP$sintactical$top-8)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$sintactical$stack.elementAt(CUP$sintactical$top-8)).right;
		Object a = (Object)((java_cup.runtime.Symbol) CUP$sintactical$stack.elementAt(CUP$sintactical$top-8)).value;
		int bleft = ((java_cup.runtime.Symbol)CUP$sintactical$stack.elementAt(CUP$sintactical$top-5)).left;
		int bright = ((java_cup.runtime.Symbol)CUP$sintactical$stack.elementAt(CUP$sintactical$top-5)).right;
		String b = (String)((java_cup.runtime.Symbol) CUP$sintactical$stack.elementAt(CUP$sintactical$top-5)).value;
		int cleft = ((java_cup.runtime.Symbol)CUP$sintactical$stack.elementAt(CUP$sintactical$top-2)).left;
		int cright = ((java_cup.runtime.Symbol)CUP$sintactical$stack.elementAt(CUP$sintactical$top-2)).right;
		Object c = (Object)((java_cup.runtime.Symbol) CUP$sintactical$stack.elementAt(CUP$sintactical$top-2)).value;
		

            tabla_simbolos.add(new proyecto1_oc1_202010770.tabla_de_simbolos(a.toString(),b.toString(),c.toString()));
    
              CUP$sintactical$result = parser.getSymbolFactory().newSymbol("asignacion",17, ((java_cup.runtime.Symbol)CUP$sintactical$stack.elementAt(CUP$sintactical$top-10)), ((java_cup.runtime.Symbol)CUP$sintactical$stack.peek()), RESULT);
            }
          return CUP$sintactical$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 47: // lista ::= ARREGLO DOS_PUNTOS tipo_de_dato DOS_PUNTOS DOS_PUNTOS ARROBA VARIABLE SLASH_MENOR DIAGONAL CORCHETE_ABIERTO datos_de_lista CORCHETE_CERRADO END PUNTO_Y_COMA 
            {
              Object RESULT =null;
		int tipoleft = ((java_cup.runtime.Symbol)CUP$sintactical$stack.elementAt(CUP$sintactical$top-11)).left;
		int tiporight = ((java_cup.runtime.Symbol)CUP$sintactical$stack.elementAt(CUP$sintactical$top-11)).right;
		Object tipo = (Object)((java_cup.runtime.Symbol) CUP$sintactical$stack.elementAt(CUP$sintactical$top-11)).value;
		int varleft = ((java_cup.runtime.Symbol)CUP$sintactical$stack.elementAt(CUP$sintactical$top-7)).left;
		int varright = ((java_cup.runtime.Symbol)CUP$sintactical$stack.elementAt(CUP$sintactical$top-7)).right;
		String var = (String)((java_cup.runtime.Symbol) CUP$sintactical$stack.elementAt(CUP$sintactical$top-7)).value;
		
        //Se agrega el nombre de la variable
        String vals = var.toString();
        lista_de_elementos.add(new proyecto1_oc1_202010770.lista(vals));
        double numero = 0.0;
        Scanner scanner = new Scanner(datos_en_lista);
        if(tipo.toString().equals("double")){
        
        while (scanner.hasNext()) {
            
            String numeroStr = scanner.next();
            numero = Double.parseDouble(numeroStr);
            for (proyecto1_oc1_202010770.lista elemento : lista_de_elementos) {
                if(elemento.variable.equals(vals)){
                    elemento.agregarElemento(tipo.toString(),vals, numero);
                }
                
            }
        }}else{
        while (scanner.hasNext()) {
            
            String numeroStr = scanner.next();
            
           
            for (proyecto1_oc1_202010770.lista elemento : lista_de_elementos) {
                if(elemento.variable.equals(vals)){
                    elemento.agregarElemento(tipo.toString(),vals, numeroStr);
                }
                
            }
        }
        }

        //Se limpia la variable con los datos
        datos_en_lista = "";


              CUP$sintactical$result = parser.getSymbolFactory().newSymbol("lista",22, ((java_cup.runtime.Symbol)CUP$sintactical$stack.elementAt(CUP$sintactical$top-13)), ((java_cup.runtime.Symbol)CUP$sintactical$stack.peek()), RESULT);
            }
          return CUP$sintactical$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 48: // tipo_de_dato ::= DOUBLE 
            {
              Object RESULT =null;
		RESULT = "double"; 
              CUP$sintactical$result = parser.getSymbolFactory().newSymbol("tipo_de_dato",20, ((java_cup.runtime.Symbol)CUP$sintactical$stack.peek()), ((java_cup.runtime.Symbol)CUP$sintactical$stack.peek()), RESULT);
            }
          return CUP$sintactical$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 49: // tipo_de_dato ::= CADENA 
            {
              Object RESULT =null;
		RESULT = "cadena"; 
              CUP$sintactical$result = parser.getSymbolFactory().newSymbol("tipo_de_dato",20, ((java_cup.runtime.Symbol)CUP$sintactical$stack.peek()), ((java_cup.runtime.Symbol)CUP$sintactical$stack.peek()), RESULT);
            }
          return CUP$sintactical$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 50: // datos_de_lista ::= datos_de_lista COMMA dato 
            {
              Object RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$sintactical$stack.elementAt(CUP$sintactical$top-2)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$sintactical$stack.elementAt(CUP$sintactical$top-2)).right;
		Object a = (Object)((java_cup.runtime.Symbol) CUP$sintactical$stack.elementAt(CUP$sintactical$top-2)).value;
		int bleft = ((java_cup.runtime.Symbol)CUP$sintactical$stack.peek()).left;
		int bright = ((java_cup.runtime.Symbol)CUP$sintactical$stack.peek()).right;
		Object b = (Object)((java_cup.runtime.Symbol) CUP$sintactical$stack.peek()).value;
		 datos_en_lista += " "+b.toString().replace(" ", "Ñ"); RESULT = b.toString().replace(" ", "Ñ");;
              CUP$sintactical$result = parser.getSymbolFactory().newSymbol("datos_de_lista",23, ((java_cup.runtime.Symbol)CUP$sintactical$stack.elementAt(CUP$sintactical$top-2)), ((java_cup.runtime.Symbol)CUP$sintactical$stack.peek()), RESULT);
            }
          return CUP$sintactical$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 51: // datos_de_lista ::= dato 
            {
              Object RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$sintactical$stack.peek()).left;
		int aright = ((java_cup.runtime.Symbol)CUP$sintactical$stack.peek()).right;
		Object a = (Object)((java_cup.runtime.Symbol) CUP$sintactical$stack.peek()).value;
		datos_en_lista = " "+a.toString().replace(" ", "Ñ");  RESULT = a.toString().replace(" ", "Ñ");;
              CUP$sintactical$result = parser.getSymbolFactory().newSymbol("datos_de_lista",23, ((java_cup.runtime.Symbol)CUP$sintactical$stack.peek()), ((java_cup.runtime.Symbol)CUP$sintactical$stack.peek()), RESULT);
            }
          return CUP$sintactical$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 52: // dato ::= CADENAS 
            {
              Object RESULT =null;
		int datosleft = ((java_cup.runtime.Symbol)CUP$sintactical$stack.peek()).left;
		int datosright = ((java_cup.runtime.Symbol)CUP$sintactical$stack.peek()).right;
		String datos = (String)((java_cup.runtime.Symbol) CUP$sintactical$stack.peek()).value;
		
        String salida = "";
        if (datos.toString().startsWith("\"") && datos.toString().endsWith("\"")) {
            // Quitar las comillas usando substring
            salida = datos.toString().substring(1, datos.length() - 1);
            actual = salida;
            RESULT = salida;
        }else{
        actual = datos.toString();
        RESULT = datos.toString();
        } 
              CUP$sintactical$result = parser.getSymbolFactory().newSymbol("dato",21, ((java_cup.runtime.Symbol)CUP$sintactical$stack.peek()), ((java_cup.runtime.Symbol)CUP$sintactical$stack.peek()), RESULT);
            }
          return CUP$sintactical$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 53: // dato ::= NUMERO_FLOTANTE 
            {
              Object RESULT =null;
		int datosleft = ((java_cup.runtime.Symbol)CUP$sintactical$stack.peek()).left;
		int datosright = ((java_cup.runtime.Symbol)CUP$sintactical$stack.peek()).right;
		String datos = (String)((java_cup.runtime.Symbol) CUP$sintactical$stack.peek()).value;
		RESULT = datos.toString(); 
              CUP$sintactical$result = parser.getSymbolFactory().newSymbol("dato",21, ((java_cup.runtime.Symbol)CUP$sintactical$stack.peek()), ((java_cup.runtime.Symbol)CUP$sintactical$stack.peek()), RESULT);
            }
          return CUP$sintactical$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 54: // dato ::= NUMERO_ENTERO 
            {
              Object RESULT =null;
		int datosleft = ((java_cup.runtime.Symbol)CUP$sintactical$stack.peek()).left;
		int datosright = ((java_cup.runtime.Symbol)CUP$sintactical$stack.peek()).right;
		String datos = (String)((java_cup.runtime.Symbol) CUP$sintactical$stack.peek()).value;
		RESULT = datos.toString(); 
              CUP$sintactical$result = parser.getSymbolFactory().newSymbol("dato",21, ((java_cup.runtime.Symbol)CUP$sintactical$stack.peek()), ((java_cup.runtime.Symbol)CUP$sintactical$stack.peek()), RESULT);
            }
          return CUP$sintactical$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 55: // dato ::= VARIABLE 
            {
              Object RESULT =null;
		int datosleft = ((java_cup.runtime.Symbol)CUP$sintactical$stack.peek()).left;
		int datosright = ((java_cup.runtime.Symbol)CUP$sintactical$stack.peek()).right;
		String datos = (String)((java_cup.runtime.Symbol) CUP$sintactical$stack.peek()).value;
		
        String variable_a_buscar = datos.toString();
        for (proyecto1_oc1_202010770.tabla_de_simbolos simbolo : tabla_simbolos){
            if(variable_a_buscar.equals(simbolo.variable)){
            actual = simbolo.dato.toString();
            RESULT = simbolo.dato;
            break;
            }
        }
    
              CUP$sintactical$result = parser.getSymbolFactory().newSymbol("dato",21, ((java_cup.runtime.Symbol)CUP$sintactical$stack.peek()), ((java_cup.runtime.Symbol)CUP$sintactical$stack.peek()), RESULT);
            }
          return CUP$sintactical$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 56: // dato ::= SUMA PARENTESIS_ABIERTO dato COMMA dato PARENTESIS_CERRADO 
            {
              Object RESULT =null;
		int izqleft = ((java_cup.runtime.Symbol)CUP$sintactical$stack.elementAt(CUP$sintactical$top-3)).left;
		int izqright = ((java_cup.runtime.Symbol)CUP$sintactical$stack.elementAt(CUP$sintactical$top-3)).right;
		Object izq = (Object)((java_cup.runtime.Symbol) CUP$sintactical$stack.elementAt(CUP$sintactical$top-3)).value;
		int derleft = ((java_cup.runtime.Symbol)CUP$sintactical$stack.elementAt(CUP$sintactical$top-1)).left;
		int derright = ((java_cup.runtime.Symbol)CUP$sintactical$stack.elementAt(CUP$sintactical$top-1)).right;
		Object der = (Object)((java_cup.runtime.Symbol) CUP$sintactical$stack.elementAt(CUP$sintactical$top-1)).value;
		
    RESULT = operaciones.Suma(izq.toString(), der.toString());
    
              CUP$sintactical$result = parser.getSymbolFactory().newSymbol("dato",21, ((java_cup.runtime.Symbol)CUP$sintactical$stack.elementAt(CUP$sintactical$top-5)), ((java_cup.runtime.Symbol)CUP$sintactical$stack.peek()), RESULT);
            }
          return CUP$sintactical$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 57: // dato ::= RESTA PARENTESIS_ABIERTO dato COMMA dato PARENTESIS_CERRADO 
            {
              Object RESULT =null;
		int izqleft = ((java_cup.runtime.Symbol)CUP$sintactical$stack.elementAt(CUP$sintactical$top-3)).left;
		int izqright = ((java_cup.runtime.Symbol)CUP$sintactical$stack.elementAt(CUP$sintactical$top-3)).right;
		Object izq = (Object)((java_cup.runtime.Symbol) CUP$sintactical$stack.elementAt(CUP$sintactical$top-3)).value;
		int derleft = ((java_cup.runtime.Symbol)CUP$sintactical$stack.elementAt(CUP$sintactical$top-1)).left;
		int derright = ((java_cup.runtime.Symbol)CUP$sintactical$stack.elementAt(CUP$sintactical$top-1)).right;
		Object der = (Object)((java_cup.runtime.Symbol) CUP$sintactical$stack.elementAt(CUP$sintactical$top-1)).value;
		
    RESULT = operaciones.Resta(izq.toString(), der.toString());
    
              CUP$sintactical$result = parser.getSymbolFactory().newSymbol("dato",21, ((java_cup.runtime.Symbol)CUP$sintactical$stack.elementAt(CUP$sintactical$top-5)), ((java_cup.runtime.Symbol)CUP$sintactical$stack.peek()), RESULT);
            }
          return CUP$sintactical$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 58: // dato ::= MULTIPLICACION PARENTESIS_ABIERTO dato COMMA dato PARENTESIS_CERRADO 
            {
              Object RESULT =null;
		int izqleft = ((java_cup.runtime.Symbol)CUP$sintactical$stack.elementAt(CUP$sintactical$top-3)).left;
		int izqright = ((java_cup.runtime.Symbol)CUP$sintactical$stack.elementAt(CUP$sintactical$top-3)).right;
		Object izq = (Object)((java_cup.runtime.Symbol) CUP$sintactical$stack.elementAt(CUP$sintactical$top-3)).value;
		int derleft = ((java_cup.runtime.Symbol)CUP$sintactical$stack.elementAt(CUP$sintactical$top-1)).left;
		int derright = ((java_cup.runtime.Symbol)CUP$sintactical$stack.elementAt(CUP$sintactical$top-1)).right;
		Object der = (Object)((java_cup.runtime.Symbol) CUP$sintactical$stack.elementAt(CUP$sintactical$top-1)).value;
		
    RESULT = operaciones.Multiplicacion(izq.toString(), der.toString());
    
              CUP$sintactical$result = parser.getSymbolFactory().newSymbol("dato",21, ((java_cup.runtime.Symbol)CUP$sintactical$stack.elementAt(CUP$sintactical$top-5)), ((java_cup.runtime.Symbol)CUP$sintactical$stack.peek()), RESULT);
            }
          return CUP$sintactical$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 59: // dato ::= DIVISION PARENTESIS_ABIERTO dato COMMA dato PARENTESIS_CERRADO 
            {
              Object RESULT =null;
		int izqleft = ((java_cup.runtime.Symbol)CUP$sintactical$stack.elementAt(CUP$sintactical$top-3)).left;
		int izqright = ((java_cup.runtime.Symbol)CUP$sintactical$stack.elementAt(CUP$sintactical$top-3)).right;
		Object izq = (Object)((java_cup.runtime.Symbol) CUP$sintactical$stack.elementAt(CUP$sintactical$top-3)).value;
		int derleft = ((java_cup.runtime.Symbol)CUP$sintactical$stack.elementAt(CUP$sintactical$top-1)).left;
		int derright = ((java_cup.runtime.Symbol)CUP$sintactical$stack.elementAt(CUP$sintactical$top-1)).right;
		Object der = (Object)((java_cup.runtime.Symbol) CUP$sintactical$stack.elementAt(CUP$sintactical$top-1)).value;
		
    RESULT = operaciones.Division(izq.toString(), der.toString());
    
              CUP$sintactical$result = parser.getSymbolFactory().newSymbol("dato",21, ((java_cup.runtime.Symbol)CUP$sintactical$stack.elementAt(CUP$sintactical$top-5)), ((java_cup.runtime.Symbol)CUP$sintactical$stack.peek()), RESULT);
            }
          return CUP$sintactical$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 60: // dato ::= MODULO PARENTESIS_ABIERTO dato COMMA dato PARENTESIS_CERRADO 
            {
              Object RESULT =null;
		int izqleft = ((java_cup.runtime.Symbol)CUP$sintactical$stack.elementAt(CUP$sintactical$top-3)).left;
		int izqright = ((java_cup.runtime.Symbol)CUP$sintactical$stack.elementAt(CUP$sintactical$top-3)).right;
		Object izq = (Object)((java_cup.runtime.Symbol) CUP$sintactical$stack.elementAt(CUP$sintactical$top-3)).value;
		int derleft = ((java_cup.runtime.Symbol)CUP$sintactical$stack.elementAt(CUP$sintactical$top-1)).left;
		int derright = ((java_cup.runtime.Symbol)CUP$sintactical$stack.elementAt(CUP$sintactical$top-1)).right;
		Object der = (Object)((java_cup.runtime.Symbol) CUP$sintactical$stack.elementAt(CUP$sintactical$top-1)).value;
		
    RESULT = operaciones.Modulo(izq.toString(), der.toString());
    
              CUP$sintactical$result = parser.getSymbolFactory().newSymbol("dato",21, ((java_cup.runtime.Symbol)CUP$sintactical$stack.elementAt(CUP$sintactical$top-5)), ((java_cup.runtime.Symbol)CUP$sintactical$stack.peek()), RESULT);
            }
          return CUP$sintactical$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 61: // NT$11 ::= 
            {
              Object RESULT =null;
operacion_estadistica = "media";


    for (proyecto1_oc1_202010770.lista elemento : lista_de_elementos) {
                if(elemento.variable.equals("Tremdo")){
                    elemento.refresh_list();
    }
    }



              CUP$sintactical$result = parser.getSymbolFactory().newSymbol("NT$11",39, ((java_cup.runtime.Symbol)CUP$sintactical$stack.peek()), RESULT);
            }
          return CUP$sintactical$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 62: // dato ::= MEDIA NT$11 PARENTESIS_ABIERTO listas_operaciones PARENTESIS_CERRADO 
            {
              Object RESULT =null;
              // propagate RESULT from NT$11
                RESULT = (Object) ((java_cup.runtime.Symbol) CUP$sintactical$stack.elementAt(CUP$sintactical$top-3)).value;
		int resultadoleft = ((java_cup.runtime.Symbol)CUP$sintactical$stack.elementAt(CUP$sintactical$top-1)).left;
		int resultadoright = ((java_cup.runtime.Symbol)CUP$sintactical$stack.elementAt(CUP$sintactical$top-1)).right;
		Object resultado = (Object)((java_cup.runtime.Symbol) CUP$sintactical$stack.elementAt(CUP$sintactical$top-1)).value;
		RESULT = resultado;
              CUP$sintactical$result = parser.getSymbolFactory().newSymbol("dato",21, ((java_cup.runtime.Symbol)CUP$sintactical$stack.elementAt(CUP$sintactical$top-4)), ((java_cup.runtime.Symbol)CUP$sintactical$stack.peek()), RESULT);
            }
          return CUP$sintactical$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 63: // NT$12 ::= 
            {
              Object RESULT =null;
operacion_estadistica = "mediana";

for (proyecto1_oc1_202010770.lista elemento : lista_de_elementos) {
                if(elemento.variable.equals("Tremdo")){
                    elemento.refresh_list();
}
}




              CUP$sintactical$result = parser.getSymbolFactory().newSymbol("NT$12",40, ((java_cup.runtime.Symbol)CUP$sintactical$stack.peek()), RESULT);
            }
          return CUP$sintactical$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 64: // dato ::= MEDIANA NT$12 PARENTESIS_ABIERTO listas_operaciones PARENTESIS_CERRADO 
            {
              Object RESULT =null;
              // propagate RESULT from NT$12
                RESULT = (Object) ((java_cup.runtime.Symbol) CUP$sintactical$stack.elementAt(CUP$sintactical$top-3)).value;
		int resultadoleft = ((java_cup.runtime.Symbol)CUP$sintactical$stack.elementAt(CUP$sintactical$top-1)).left;
		int resultadoright = ((java_cup.runtime.Symbol)CUP$sintactical$stack.elementAt(CUP$sintactical$top-1)).right;
		Object resultado = (Object)((java_cup.runtime.Symbol) CUP$sintactical$stack.elementAt(CUP$sintactical$top-1)).value;
		RESULT = resultado;
              CUP$sintactical$result = parser.getSymbolFactory().newSymbol("dato",21, ((java_cup.runtime.Symbol)CUP$sintactical$stack.elementAt(CUP$sintactical$top-4)), ((java_cup.runtime.Symbol)CUP$sintactical$stack.peek()), RESULT);
            }
          return CUP$sintactical$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 65: // NT$13 ::= 
            {
              Object RESULT =null;
operacion_estadistica = "moda";


for (proyecto1_oc1_202010770.lista elemento : lista_de_elementos) {
                if(elemento.variable.equals("Tremdo")){
                    elemento.refresh_list();
}
}


              CUP$sintactical$result = parser.getSymbolFactory().newSymbol("NT$13",41, ((java_cup.runtime.Symbol)CUP$sintactical$stack.peek()), RESULT);
            }
          return CUP$sintactical$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 66: // dato ::= MODA NT$13 PARENTESIS_ABIERTO listas_operaciones PARENTESIS_CERRADO 
            {
              Object RESULT =null;
              // propagate RESULT from NT$13
                RESULT = (Object) ((java_cup.runtime.Symbol) CUP$sintactical$stack.elementAt(CUP$sintactical$top-3)).value;
		int resultadoleft = ((java_cup.runtime.Symbol)CUP$sintactical$stack.elementAt(CUP$sintactical$top-1)).left;
		int resultadoright = ((java_cup.runtime.Symbol)CUP$sintactical$stack.elementAt(CUP$sintactical$top-1)).right;
		Object resultado = (Object)((java_cup.runtime.Symbol) CUP$sintactical$stack.elementAt(CUP$sintactical$top-1)).value;
		RESULT = resultado;
              CUP$sintactical$result = parser.getSymbolFactory().newSymbol("dato",21, ((java_cup.runtime.Symbol)CUP$sintactical$stack.elementAt(CUP$sintactical$top-4)), ((java_cup.runtime.Symbol)CUP$sintactical$stack.peek()), RESULT);
            }
          return CUP$sintactical$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 67: // NT$14 ::= 
            {
              Object RESULT =null;
operacion_estadistica = "varianza";


for (proyecto1_oc1_202010770.lista elemento : lista_de_elementos) {
                if(elemento.variable.equals("Tremdo")){
                    elemento.refresh_list();
}
}



              CUP$sintactical$result = parser.getSymbolFactory().newSymbol("NT$14",42, ((java_cup.runtime.Symbol)CUP$sintactical$stack.peek()), RESULT);
            }
          return CUP$sintactical$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 68: // dato ::= VARIANZA NT$14 PARENTESIS_ABIERTO listas_operaciones PARENTESIS_CERRADO 
            {
              Object RESULT =null;
              // propagate RESULT from NT$14
                RESULT = (Object) ((java_cup.runtime.Symbol) CUP$sintactical$stack.elementAt(CUP$sintactical$top-3)).value;
		int resultadoleft = ((java_cup.runtime.Symbol)CUP$sintactical$stack.elementAt(CUP$sintactical$top-1)).left;
		int resultadoright = ((java_cup.runtime.Symbol)CUP$sintactical$stack.elementAt(CUP$sintactical$top-1)).right;
		Object resultado = (Object)((java_cup.runtime.Symbol) CUP$sintactical$stack.elementAt(CUP$sintactical$top-1)).value;
		RESULT = resultado;
              CUP$sintactical$result = parser.getSymbolFactory().newSymbol("dato",21, ((java_cup.runtime.Symbol)CUP$sintactical$stack.elementAt(CUP$sintactical$top-4)), ((java_cup.runtime.Symbol)CUP$sintactical$stack.peek()), RESULT);
            }
          return CUP$sintactical$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 69: // NT$15 ::= 
            {
              Object RESULT =null;
operacion_estadistica = "maximo";


for (proyecto1_oc1_202010770.lista elemento : lista_de_elementos) {
                if(elemento.variable.equals("Tremdo")){
                    elemento.refresh_list();
}
}



              CUP$sintactical$result = parser.getSymbolFactory().newSymbol("NT$15",43, ((java_cup.runtime.Symbol)CUP$sintactical$stack.peek()), RESULT);
            }
          return CUP$sintactical$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 70: // dato ::= MAX NT$15 PARENTESIS_ABIERTO listas_operaciones PARENTESIS_CERRADO 
            {
              Object RESULT =null;
              // propagate RESULT from NT$15
                RESULT = (Object) ((java_cup.runtime.Symbol) CUP$sintactical$stack.elementAt(CUP$sintactical$top-3)).value;
		int resultadoleft = ((java_cup.runtime.Symbol)CUP$sintactical$stack.elementAt(CUP$sintactical$top-1)).left;
		int resultadoright = ((java_cup.runtime.Symbol)CUP$sintactical$stack.elementAt(CUP$sintactical$top-1)).right;
		Object resultado = (Object)((java_cup.runtime.Symbol) CUP$sintactical$stack.elementAt(CUP$sintactical$top-1)).value;
		RESULT = resultado;
              CUP$sintactical$result = parser.getSymbolFactory().newSymbol("dato",21, ((java_cup.runtime.Symbol)CUP$sintactical$stack.elementAt(CUP$sintactical$top-4)), ((java_cup.runtime.Symbol)CUP$sintactical$stack.peek()), RESULT);
            }
          return CUP$sintactical$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 71: // NT$16 ::= 
            {
              Object RESULT =null;
operacion_estadistica = "minimo";

for (proyecto1_oc1_202010770.lista elemento : lista_de_elementos) {
                if(elemento.variable.equals("Tremdo")){
                    elemento.refresh_list();
}
}



              CUP$sintactical$result = parser.getSymbolFactory().newSymbol("NT$16",44, ((java_cup.runtime.Symbol)CUP$sintactical$stack.peek()), RESULT);
            }
          return CUP$sintactical$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 72: // dato ::= MIN NT$16 PARENTESIS_ABIERTO listas_operaciones PARENTESIS_CERRADO 
            {
              Object RESULT =null;
              // propagate RESULT from NT$16
                RESULT = (Object) ((java_cup.runtime.Symbol) CUP$sintactical$stack.elementAt(CUP$sintactical$top-3)).value;
		int resultadoleft = ((java_cup.runtime.Symbol)CUP$sintactical$stack.elementAt(CUP$sintactical$top-1)).left;
		int resultadoright = ((java_cup.runtime.Symbol)CUP$sintactical$stack.elementAt(CUP$sintactical$top-1)).right;
		Object resultado = (Object)((java_cup.runtime.Symbol) CUP$sintactical$stack.elementAt(CUP$sintactical$top-1)).value;
		RESULT = resultado;
              CUP$sintactical$result = parser.getSymbolFactory().newSymbol("dato",21, ((java_cup.runtime.Symbol)CUP$sintactical$stack.elementAt(CUP$sintactical$top-4)), ((java_cup.runtime.Symbol)CUP$sintactical$stack.peek()), RESULT);
            }
          return CUP$sintactical$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 73: // listas_operaciones ::= ARROBA VARIABLE 
            {
              Object RESULT =null;
		int varleft = ((java_cup.runtime.Symbol)CUP$sintactical$stack.peek()).left;
		int varright = ((java_cup.runtime.Symbol)CUP$sintactical$stack.peek()).right;
		String var = (String)((java_cup.runtime.Symbol) CUP$sintactical$stack.peek()).value;
		
                        for (proyecto1_oc1_202010770.lista lista : lista_de_elementos) {
                            if (lista.variable.equals(var.toString())) {
                            
                            if(operacion_estadistica.equals("media")){
                                    RESULT = lista.la_media();
                                     break;
                                    }
                            
                            }
                            if(operacion_estadistica.equals("mediana")){
                                    RESULT = lista.la_mediana();
                                    break;
                                    }
                            if(operacion_estadistica.equals("moda")){
                                    RESULT = lista.la_moda();
                                    break;
                                    }
                            if(operacion_estadistica.equals("varianza")){
                                    RESULT = lista.la_varianza();
                                    break;
                                    }
                            if(operacion_estadistica.equals("maximo")){
                                    RESULT = lista.la_maxima();
                                    break;
                                    }
                            if(operacion_estadistica.equals("minimo")){
                                    RESULT = lista.la_minima();
                                    break;
                                    }
                           
                        }
                        
              CUP$sintactical$result = parser.getSymbolFactory().newSymbol("listas_operaciones",19, ((java_cup.runtime.Symbol)CUP$sintactical$stack.elementAt(CUP$sintactical$top-1)), ((java_cup.runtime.Symbol)CUP$sintactical$stack.peek()), RESULT);
            }
          return CUP$sintactical$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 74: // listas_operaciones ::= CORCHETE_ABIERTO listas_operacion CORCHETE_CERRADO 
            {
              Object RESULT =null;
		
                        
                        boolean es_temporal = false;
                        for (proyecto1_oc1_202010770.lista lista : lista_de_elementos) {
                            if (lista.variable.equals("Tremdo")) {
                            es_temporal = true;
                            break; // Terminamos la búsqueda una vez que encontramos la variable
                            }
                        }
                        if(!es_temporal){
                        lista_de_elementos.add(new proyecto1_oc1_202010770.lista("Tremdo"));
                        }else{

                            for (proyecto1_oc1_202010770.lista lista : lista_de_elementos) {
                                if (lista.variable.equals("Tremdo")) {
                                lista.lista.clear();
                                }
                            }
                        }
                        
                        double numero = 0.0;
                        Scanner scanner = new Scanner(datos_en_lista);
                        while (scanner.hasNext()) {
                            String numeroStr = scanner.next();
                            numero = Double.parseDouble(numeroStr);
                            for (proyecto1_oc1_202010770.lista elemento : lista_de_elementos) {
                                if(elemento.variable.equals("Tremdo")){
                                    elemento.agregarElemento("double","Tremdo", numero);
                            }
                            //System.out.println("Gotica");
                            //elemento.mostrarElementos();
                            //System.out.println("Culona");
                            
                            }

                        }
                        datos_en_lista = "";
                        for (proyecto1_oc1_202010770.lista elemento : lista_de_elementos) {
                                if(elemento.variable.equals("Tremdo")){
                                    if(operacion_estadistica.equals("media")){
                                    RESULT = elemento.la_media();
                                    break;
                                    }
                                if(operacion_estadistica.equals("mediana")){
                                    RESULT = elemento.la_mediana();
                                break;    
                                }
                                if(operacion_estadistica.equals("moda")){
                                    RESULT = elemento.la_moda();
                                break;    
                                }
                                if(operacion_estadistica.equals("varianza")){
                                    RESULT = elemento.la_varianza();
                                    break;
                                    }
                                if(operacion_estadistica.equals("maximo")){
                                    RESULT = elemento.la_maxima();
                                    break;
                                    }
                                if(operacion_estadistica.equals("minimo")){
                                    RESULT = elemento.la_minima();
                                    break;
                                    }
                                    
                            
                                    
                            
                        }}

                             

              CUP$sintactical$result = parser.getSymbolFactory().newSymbol("listas_operaciones",19, ((java_cup.runtime.Symbol)CUP$sintactical$stack.elementAt(CUP$sintactical$top-2)), ((java_cup.runtime.Symbol)CUP$sintactical$stack.peek()), RESULT);
            }
          return CUP$sintactical$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 75: // listas_operacion ::= listas_operacion COMMA dato 
            {
              Object RESULT =null;
		int datleft = ((java_cup.runtime.Symbol)CUP$sintactical$stack.peek()).left;
		int datright = ((java_cup.runtime.Symbol)CUP$sintactical$stack.peek()).right;
		Object dat = (Object)((java_cup.runtime.Symbol) CUP$sintactical$stack.peek()).value;
		datos_en_lista += " "+dat.toString();
              CUP$sintactical$result = parser.getSymbolFactory().newSymbol("listas_operacion",18, ((java_cup.runtime.Symbol)CUP$sintactical$stack.elementAt(CUP$sintactical$top-2)), ((java_cup.runtime.Symbol)CUP$sintactical$stack.peek()), RESULT);
            }
          return CUP$sintactical$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 76: // listas_operacion ::= dato 
            {
              Object RESULT =null;
		int datleft = ((java_cup.runtime.Symbol)CUP$sintactical$stack.peek()).left;
		int datright = ((java_cup.runtime.Symbol)CUP$sintactical$stack.peek()).right;
		Object dat = (Object)((java_cup.runtime.Symbol) CUP$sintactical$stack.peek()).value;
		datos_en_lista = " "+dat.toString();
              CUP$sintactical$result = parser.getSymbolFactory().newSymbol("listas_operacion",18, ((java_cup.runtime.Symbol)CUP$sintactical$stack.peek()), ((java_cup.runtime.Symbol)CUP$sintactical$stack.peek()), RESULT);
            }
          return CUP$sintactical$result;

          /* . . . . . .*/
          default:
            throw new Exception(
               "Invalid action number "+CUP$sintactical$act_num+"found in internal parse table");

        }
    } /* end of method */

  /** Method splitting the generated action code into several parts. */
  public final java_cup.runtime.Symbol CUP$sintactical$do_action(
    int                        CUP$sintactical$act_num,
    java_cup.runtime.lr_parser CUP$sintactical$parser,
    java.util.Stack            CUP$sintactical$stack,
    int                        CUP$sintactical$top)
    throws java.lang.Exception
    {
              return CUP$sintactical$do_action_part00000000(
                               CUP$sintactical$act_num,
                               CUP$sintactical$parser,
                               CUP$sintactical$stack,
                               CUP$sintactical$top);
    }
}

}

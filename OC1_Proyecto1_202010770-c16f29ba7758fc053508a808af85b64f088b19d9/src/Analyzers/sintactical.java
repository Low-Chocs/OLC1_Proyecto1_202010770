
//----------------------------------------------------
// The following code was generated by CUP v0.11b 20160615 (GIT 4ac7450)
//----------------------------------------------------

package Analyzers;

import java_cup.runtime.*;
import java.util.ArrayList;
import proyecto1_oc1_202010770.tabla_de_simbolos;
import proyecto1_oc1_202010770.operaciones_aritmeticas;
import proyecto1_oc1_202010770.Impresion;
import proyecto1_oc1_202010770.lista;
import java.util.Scanner;
import java_cup.runtime.XMLElement;

/** CUP v0.11b 20160615 (GIT 4ac7450) generated parser.
  */
@SuppressWarnings({"rawtypes"})
public class sintactical extends java_cup.runtime.lr_parser {

 public final Class getSymbolContainer() {
    return sym.class;
}

  /** Default constructor. */
  @Deprecated
  public sintactical() {super();}

  /** Constructor which sets the default scanner. */
  @Deprecated
  public sintactical(java_cup.runtime.Scanner s) {super(s);}

  /** Constructor which sets the default scanner. */
  public sintactical(java_cup.runtime.Scanner s, java_cup.runtime.SymbolFactory sf) {super(s,sf);}

  /** Production table. */
  protected static final short _production_table[][] = 
    unpackFromStrings(new String[] {
    "\000\106\000\002\002\004\000\002\036\002\000\002\002" +
    "\010\000\002\021\004\000\002\021\003\000\002\022\003" +
    "\000\002\022\003\000\002\022\003\000\002\022\003\000" +
    "\002\016\003\000\002\016\003\000\002\016\003\000\002" +
    "\016\003\000\002\017\016\000\002\020\012\000\002\037" +
    "\002\000\002\012\013\000\002\040\002\000\002\013\013" +
    "\000\002\014\004\000\002\014\005\000\002\015\005\000" +
    "\002\015\003\000\002\010\012\000\002\011\012\000\002" +
    "\005\014\000\002\004\012\000\002\007\012\000\002\006" +
    "\016\000\002\003\013\000\002\032\012\000\002\041\002" +
    "\000\002\032\016\000\002\034\005\000\002\034\003\000" +
    "\002\035\004\000\002\035\005\000\002\033\005\000\002" +
    "\033\003\000\002\023\015\000\002\030\020\000\002\026" +
    "\003\000\002\026\003\000\002\031\005\000\002\031\003" +
    "\000\002\027\003\000\002\027\003\000\002\027\003\000" +
    "\002\027\003\000\002\027\010\000\002\027\010\000\002" +
    "\027\010\000\002\027\010\000\002\027\010\000\002\042" +
    "\002\000\002\027\007\000\002\043\002\000\002\027\007" +
    "\000\002\044\002\000\002\027\007\000\002\045\002\000" +
    "\002\027\007\000\002\046\002\000\002\027\007\000\002" +
    "\047\002\000\002\027\007\000\002\025\004\000\002\025" +
    "\005\000\002\024\005\000\002\024\003" });

  /** Access to production table. */
  public short[][] production_table() {return _production_table;}

  /** Parse-action table. */
  protected static final short[][] _action_table = 
    unpackFromStrings(new String[] {
    "\000\u0102\000\004\043\000\001\002\000\004\043\007\001" +
    "\002\000\004\002\006\001\002\000\004\002\001\001\002" +
    "\000\020\004\017\010\023\036\024\060\022\061\030\062" +
    "\016\063\014\001\002\000\022\004\ufff8\010\ufff8\036\ufff8" +
    "\042\ufff8\060\ufff8\061\ufff8\062\ufff8\063\ufff8\001\002\000" +
    "\022\004\ufff7\010\ufff7\036\ufff7\042\ufff7\060\ufff7\061\ufff7" +
    "\062\ufff7\063\ufff7\001\002\000\022\004\ufff6\010\ufff6\036" +
    "\ufff6\042\ufff6\060\ufff6\061\ufff6\062\ufff6\063\ufff6\001\002" +
    "\000\022\004\ufff5\010\ufff5\036\ufff5\042\ufff5\060\ufff5\061" +
    "\ufff5\062\ufff5\063\ufff5\001\002\000\004\017\375\001\002" +
    "\000\004\042\372\001\002\000\004\017\357\001\002\000" +
    "\004\012\345\001\002\000\022\004\ufffc\010\ufffc\036\ufffc" +
    "\042\ufffc\060\ufffc\061\ufffc\062\ufffc\063\ufffc\001\002\000" +
    "\022\004\ufffb\010\ufffb\036\ufffb\042\ufffb\060\ufffb\061\ufffb" +
    "\062\ufffb\063\ufffb\001\002\000\004\017\270\001\002\000" +
    "\004\012\246\001\002\000\004\012\213\001\002\000\022" +
    "\004\ufff9\010\ufff9\036\ufff9\042\ufff9\060\ufff9\061\ufff9\062" +
    "\ufff9\063\ufff9\001\002\000\022\004\017\010\023\036\024" +
    "\042\ufffd\060\022\061\030\062\016\063\014\001\002\000" +
    "\022\004\ufffa\010\ufffa\036\ufffa\042\ufffa\060\ufffa\061\ufffa" +
    "\062\ufffa\063\ufffa\001\002\000\004\017\031\001\002\000" +
    "\004\057\033\001\002\000\004\056\163\001\002\000\004" +
    "\012\034\001\002\000\004\012\035\001\002\000\004\007" +
    "\036\001\002\000\004\040\037\001\002\000\006\011\041" +
    "\021\040\001\002\000\040\005\056\023\050\024\065\025" +
    "\055\026\062\027\061\030\064\031\047\032\057\033\053" +
    "\034\051\035\066\044\046\045\060\046\052\001\002\000" +
    "\004\005\045\001\002\000\004\042\043\001\002\000\004" +
    "\047\044\001\002\000\006\050\uffe6\056\uffe6\001\002\000" +
    "\004\042\uffee\001\002\000\014\015\uffd4\016\uffd4\020\uffd4" +
    "\022\uffd4\042\uffd4\001\002\000\004\017\uffc9\001\002\000" +
    "\004\017\152\001\002\000\004\017\uffc3\001\002\000\014" +
    "\015\uffd2\016\uffd2\020\uffd2\022\uffd2\042\uffd2\001\002\000" +
    "\004\017\uffc5\001\002\000\006\016\140\022\137\001\002" +
    "\000\004\017\132\001\002\000\014\015\uffd1\016\uffd1\020" +
    "\uffd1\022\uffd1\042\uffd1\001\002\000\004\017\uffc7\001\002" +
    "\000\014\015\uffd3\016\uffd3\020\uffd3\022\uffd3\042\uffd3\001" +
    "\002\000\004\017\121\001\002\000\004\017\114\001\002" +
    "\000\006\016\uffeb\022\uffeb\001\002\000\004\017\uffcb\001" +
    "\002\000\004\017\103\001\002\000\004\017\uffc1\001\002" +
    "\000\004\017\070\001\002\000\006\011\073\021\072\001" +
    "\002\000\004\020\102\001\002\000\040\005\056\023\050" +
    "\024\065\025\055\026\062\027\061\030\064\031\047\032" +
    "\057\033\053\034\051\035\066\044\046\045\060\046\052" +
    "\001\002\000\004\005\074\001\002\000\004\020\uffbf\001" +
    "\002\000\006\016\100\022\077\001\002\000\006\016\uffbc" +
    "\022\uffbc\001\002\000\004\020\uffbe\001\002\000\040\005" +
    "\056\023\050\024\065\025\055\026\062\027\061\030\064" +
    "\031\047\032\057\033\053\034\051\035\066\044\046\045" +
    "\060\046\052\001\002\000\006\016\uffbd\022\uffbd\001\002" +
    "\000\014\015\uffc0\016\uffc0\020\uffc0\022\uffc0\042\uffc0\001" +
    "\002\000\040\005\056\023\050\024\065\025\055\026\062" +
    "\027\061\030\064\031\047\032\057\033\053\034\051\035" +
    "\066\044\046\045\060\046\052\001\002\000\004\016\105" +
    "\001\002\000\040\005\056\023\050\024\065\025\055\026" +
    "\062\027\061\030\064\031\047\032\057\033\053\034\051" +
    "\035\066\044\046\045\060\046\052\001\002\000\004\020" +
    "\107\001\002\000\014\015\uffcf\016\uffcf\020\uffcf\022\uffcf" +
    "\042\uffcf\001\002\000\004\017\111\001\002\000\006\011" +
    "\073\021\072\001\002\000\004\020\113\001\002\000\014" +
    "\015\uffca\016\uffca\020\uffca\022\uffca\042\uffca\001\002\000" +
    "\040\005\056\023\050\024\065\025\055\026\062\027\061" +
    "\030\064\031\047\032\057\033\053\034\051\035\066\044" +
    "\046\045\060\046\052\001\002\000\004\016\116\001\002" +
    "\000\040\005\056\023\050\024\065\025\055\026\062\027" +
    "\061\030\064\031\047\032\057\033\053\034\051\035\066" +
    "\044\046\045\060\046\052\001\002\000\004\020\120\001" +
    "\002\000\014\015\uffcd\016\uffcd\020\uffcd\022\uffcd\042\uffcd" +
    "\001\002\000\040\005\056\023\050\024\065\025\055\026" +
    "\062\027\061\030\064\031\047\032\057\033\053\034\051" +
    "\035\066\044\046\045\060\046\052\001\002\000\004\016" +
    "\123\001\002\000\040\005\056\023\050\024\065\025\055" +
    "\026\062\027\061\030\064\031\047\032\057\033\053\034" +
    "\051\035\066\044\046\045\060\046\052\001\002\000\004" +
    "\020\125\001\002\000\014\015\uffcc\016\uffcc\020\uffcc\022" +
    "\uffcc\042\uffcc\001\002\000\004\017\127\001\002\000\006" +
    "\011\073\021\072\001\002\000\004\020\131\001\002\000" +
    "\014\015\uffc6\016\uffc6\020\uffc6\022\uffc6\042\uffc6\001\002" +
    "\000\040\005\056\023\050\024\065\025\055\026\062\027" +
    "\061\030\064\031\047\032\057\033\053\034\051\035\066" +
    "\044\046\045\060\046\052\001\002\000\004\016\134\001" +
    "\002\000\040\005\056\023\050\024\065\025\055\026\062" +
    "\027\061\030\064\031\047\032\057\033\053\034\051\035" +
    "\066\044\046\045\060\046\052\001\002\000\004\020\136" +
    "\001\002\000\014\015\uffce\016\uffce\020\uffce\022\uffce\042" +
    "\uffce\001\002\000\004\042\uffed\001\002\000\040\005\056" +
    "\023\050\024\065\025\055\026\062\027\061\030\064\031" +
    "\047\032\057\033\053\034\051\035\066\044\046\045\060" +
    "\046\052\001\002\000\006\016\uffec\022\uffec\001\002\000" +
    "\004\017\143\001\002\000\006\011\073\021\072\001\002" +
    "\000\004\020\145\001\002\000\014\015\uffc4\016\uffc4\020" +
    "\uffc4\022\uffc4\042\uffc4\001\002\000\004\017\147\001\002" +
    "\000\006\011\073\021\072\001\002\000\004\020\151\001" +
    "\002\000\014\015\uffc2\016\uffc2\020\uffc2\022\uffc2\042\uffc2" +
    "\001\002\000\040\005\056\023\050\024\065\025\055\026" +
    "\062\027\061\030\064\031\047\032\057\033\053\034\051" +
    "\035\066\044\046\045\060\046\052\001\002\000\004\016" +
    "\154\001\002\000\040\005\056\023\050\024\065\025\055" +
    "\026\062\027\061\030\064\031\047\032\057\033\053\034" +
    "\051\035\066\044\046\045\060\046\052\001\002\000\004" +
    "\020\156\001\002\000\014\015\uffd0\016\uffd0\020\uffd0\022" +
    "\uffd0\042\uffd0\001\002\000\004\017\160\001\002\000\006" +
    "\011\073\021\072\001\002\000\004\020\162\001\002\000" +
    "\014\015\uffc8\016\uffc8\020\uffc8\022\uffc8\042\uffc8\001\002" +
    "\000\004\012\203\001\002\000\004\051\165\001\002\000" +
    "\004\012\174\001\002\000\004\050\167\001\002\000\004" +
    "\061\170\001\002\000\004\020\171\001\002\000\004\042" +
    "\172\001\002\000\004\047\173\001\002\000\022\004\uffe8" +
    "\010\uffe8\036\uffe8\042\uffe8\060\uffe8\061\uffe8\062\uffe8\063" +
    "\uffe8\001\002\000\004\012\175\001\002\000\004\007\176" +
    "\001\002\000\004\040\177\001\002\000\040\005\056\023" +
    "\050\024\065\025\055\026\062\027\061\030\064\031\047" +
    "\032\057\033\053\034\051\035\066\044\046\045\060\046" +
    "\052\001\002\000\004\042\201\001\002\000\004\047\202" +
    "\001\002\000\010\050\ufff3\052\ufff3\057\ufff3\001\002\000" +
    "\004\012\204\001\002\000\004\006\205\001\002\000\004" +
    "\040\206\001\002\000\006\011\041\021\040\001\002\000" +
    "\004\042\210\001\002\000\004\047\211\001\002\000\004" +
    "\051\uffe7\001\002\000\004\042\ufffe\001\002\000\004\012" +
    "\214\001\002\000\006\037\215\041\216\001\002\000\004" +
    "\040\237\001\002\000\004\040\217\001\002\000\040\005" +
    "\056\023\050\024\065\025\055\026\062\027\061\030\064" +
    "\031\047\032\057\033\053\034\051\035\066\044\046\045" +
    "\060\046\052\001\002\000\004\015\uffe2\001\002\000\004" +
    "\015\222\001\002\000\004\014\223\001\002\000\006\011" +
    "\226\021\224\001\002\000\040\005\056\023\050\024\065" +
    "\025\055\026\062\027\061\030\064\031\047\032\057\033" +
    "\053\034\051\035\066\044\046\045\060\046\052\001\002" +
    "\000\004\042\230\001\002\000\004\005\227\001\002\000" +
    "\004\042\uffde\001\002\000\004\047\231\001\002\000\022" +
    "\004\uffe1\010\uffe1\036\uffe1\042\uffe1\060\uffe1\061\uffe1\062" +
    "\uffe1\063\uffe1\001\002\000\006\016\235\022\234\001\002" +
    "\000\006\016\uffdb\022\uffdb\001\002\000\004\042\uffdd\001" +
    "\002\000\040\005\056\023\050\024\065\025\055\026\062" +
    "\027\061\030\064\031\047\032\057\033\053\034\051\035" +
    "\066\044\046\045\060\046\052\001\002\000\006\016\uffdc" +
    "\022\uffdc\001\002\000\040\005\056\023\050\024\065\025" +
    "\055\026\062\027\061\030\064\031\047\032\057\033\053" +
    "\034\051\035\066\044\046\045\060\046\052\001\002\000" +
    "\006\016\242\042\243\001\002\000\006\016\uffdf\042\uffdf" +
    "\001\002\000\040\005\056\023\050\024\065\025\055\026" +
    "\062\027\061\030\064\031\047\032\057\033\053\034\051" +
    "\035\066\044\046\045\060\046\052\001\002\000\004\047" +
    "\244\001\002\000\022\004\uffe3\010\uffe3\036\uffe3\042\uffe3" +
    "\060\uffe3\061\uffe3\062\uffe3\063\uffe3\001\002\000\006\016" +
    "\uffe0\042\uffe0\001\002\000\006\006\247\007\251\001\002" +
    "\000\004\012\uffd8\001\002\000\004\012\252\001\002\000" +
    "\004\012\uffd7\001\002\000\004\012\253\001\002\000\004" +
    "\011\254\001\002\000\004\005\255\001\002\000\004\013" +
    "\256\001\002\000\004\015\257\001\002\000\004\021\260" +
    "\001\002\000\040\005\056\023\050\024\065\025\055\026" +
    "\062\027\061\030\064\031\047\032\057\033\053\034\051" +
    "\035\066\044\046\045\060\046\052\001\002\000\006\016" +
    "\264\022\263\001\002\000\006\016\uffd5\022\uffd5\001\002" +
    "\000\004\042\266\001\002\000\040\005\056\023\050\024" +
    "\065\025\055\026\062\027\061\030\064\031\047\032\057" +
    "\033\053\034\051\035\066\044\046\045\060\046\052\001" +
    "\002\000\006\016\uffd6\022\uffd6\001\002\000\004\047\267" +
    "\001\002\000\022\004\uffd9\010\uffd9\036\uffd9\042\uffd9\060" +
    "\uffd9\061\uffd9\062\uffd9\063\uffd9\001\002\000\004\051\165" +
    "\001\002\000\004\052\272\001\002\000\004\012\335\001" +
    "\002\000\004\053\274\001\002\000\004\012\325\001\002" +
    "\000\004\054\277\001\002\000\004\055\307\001\002\000" +
    "\004\012\300\001\002\000\004\012\301\001\002\000\004" +
    "\007\302\001\002\000\004\040\303\001\002\000\040\005" +
    "\056\023\050\024\065\025\055\026\062\027\061\030\064" +
    "\031\047\032\057\033\053\034\051\035\066\044\046\045" +
    "\060\046\052\001\002\000\004\042\305\001\002\000\004" +
    "\047\306\001\002\000\004\055\uffea\001\002\000\004\012" +
    "\316\001\002\000\004\050\311\001\002\000\004\060\312" +
    "\001\002\000\004\020\313\001\002\000\004\042\314\001" +
    "\002\000\004\047\315\001\002\000\022\004\ufff4\010\ufff4" +
    "\036\ufff4\042\ufff4\060\ufff4\061\ufff4\062\ufff4\063\ufff4\001" +
    "\002\000\004\012\317\001\002\000\004\007\320\001\002" +
    "\000\004\040\321\001\002\000\040\005\056\023\050\024" +
    "\065\025\055\026\062\027\061\030\064\031\047\032\057" +
    "\033\053\034\051\035\066\044\046\045\060\046\052\001" +
    "\002\000\004\042\323\001\002\000\004\047\324\001\002" +
    "\000\004\050\uffe9\001\002\000\004\012\326\001\002\000" +
    "\004\006\327\001\002\000\004\040\ufff0\001\002\000\004" +
    "\040\331\001\002\000\006\011\041\021\040\001\002\000" +
    "\004\042\333\001\002\000\004\047\334\001\002\000\004" +
    "\054\uffef\001\002\000\004\012\336\001\002\000\004\007" +
    "\337\001\002\000\004\040\ufff2\001\002\000\004\040\341" +
    "\001\002\000\006\011\041\021\040\001\002\000\004\042" +
    "\343\001\002\000\004\047\344\001\002\000\004\053\ufff1" +
    "\001\002\000\006\006\247\007\251\001\002\000\004\012" +
    "\347\001\002\000\004\012\350\001\002\000\004\005\351" +
    "\001\002\000\004\013\352\001\002\000\004\015\353\001" +
    "\002\000\040\005\056\023\050\024\065\025\055\026\062" +
    "\027\061\030\064\031\047\032\057\033\053\034\051\035" +
    "\066\044\046\045\060\046\052\001\002\000\004\042\355" +
    "\001\002\000\004\047\356\001\002\000\022\004\uffda\010" +
    "\uffda\036\uffda\042\uffda\060\uffda\061\uffda\062\uffda\063\uffda" +
    "\001\002\000\004\051\165\001\002\000\004\052\272\001" +
    "\002\000\004\053\274\001\002\000\004\054\277\001\002" +
    "\000\004\055\307\001\002\000\004\050\365\001\002\000" +
    "\004\062\366\001\002\000\004\020\367\001\002\000\004" +
    "\042\370\001\002\000\004\047\371\001\002\000\022\004" +
    "\uffe5\010\uffe5\036\uffe5\042\uffe5\060\uffe5\061\uffe5\062\uffe5" +
    "\063\uffe5\001\002\000\004\043\373\001\002\000\004\003" +
    "\374\001\002\000\004\002\uffff\001\002\000\004\051\165" +
    "\001\002\000\004\057\033\001\002\000\004\050\u0100\001" +
    "\002\000\004\062\u0101\001\002\000\004\020\u0102\001\002" +
    "\000\004\042\u0103\001\002\000\004\047\u0104\001\002\000" +
    "\022\004\uffe4\010\uffe4\036\uffe4\042\uffe4\060\uffe4\061\uffe4" +
    "\062\uffe4\063\uffe4\001\002" });

  /** Access to parse-action table. */
  public short[][] action_table() {return _action_table;}

  /** <code>reduce_goto</code> table. */
  protected static final short[][] _reduce_table = 
    unpackFromStrings(new String[] {
    "\000\u0102\000\006\002\004\036\003\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\026\003\012" +
    "\005\010\006\011\016\024\017\007\021\014\022\025\023" +
    "\017\030\020\032\026\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\026" +
    "\003\012\005\010\006\011\016\024\017\007\021\211\022" +
    "\025\023\017\030\020\032\026\001\001\000\002\001\001" +
    "\000\002\001\001\000\004\007\031\001\001\000\004\004" +
    "\163\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\004\014\041\001\001\000" +
    "\006\015\053\027\062\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\004\043\156\001\001\000\002" +
    "\001\001\000\004\046\145\001\001\000\002\001\001\000" +
    "\004\045\141\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\004\044\125\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\004\042\107\001\001\000\002\001\001\000\004\047" +
    "\066\001\001\000\002\001\001\000\004\025\070\001\001" +
    "\000\002\001\001\000\006\024\074\027\075\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\004\027\100\001\001\000" +
    "\002\001\001\000\002\001\001\000\004\027\103\001\001" +
    "\000\002\001\001\000\004\027\105\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\004\025\111" +
    "\001\001\000\002\001\001\000\002\001\001\000\004\027" +
    "\114\001\001\000\002\001\001\000\004\027\116\001\001" +
    "\000\002\001\001\000\002\001\001\000\004\027\121\001" +
    "\001\000\002\001\001\000\004\027\123\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\004\025" +
    "\127\001\001\000\002\001\001\000\002\001\001\000\004" +
    "\027\132\001\001\000\002\001\001\000\004\027\134\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\004\027\140\001\001\000\002\001\001\000\002\001" +
    "\001\000\004\025\143\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\004\025\147\001\001\000" +
    "\002\001\001\000\002\001\001\000\004\027\152\001\001" +
    "\000\002\001\001\000\004\027\154\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\004\025\160" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\004\020\165\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\004\027\177\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\004\014\206\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\004" +
    "\027\217\001\001\000\004\041\220\001\001\000\002\001" +
    "\001\000\002\001\001\000\004\035\224\001\001\000\006" +
    "\027\232\033\231\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\004\027\235\001\001\000\002\001\001\000\006\027\240" +
    "\034\237\001\001\000\002\001\001\000\002\001\001\000" +
    "\004\027\244\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\004\026\247\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\006\027\261\031\260" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\004\027\264\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\004\020\270\001\001\000" +
    "\004\012\272\001\001\000\002\001\001\000\004\013\274" +
    "\001\001\000\002\001\001\000\004\010\275\001\001\000" +
    "\004\011\307\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\004\027\303\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\004\027\321\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\004\040\327\001\001\000\002\001\001\000\004" +
    "\014\331\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\004" +
    "\037\337\001\001\000\002\001\001\000\004\014\341\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\004\026\345\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\004\027\353\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\004\020\357\001\001\000\004" +
    "\012\360\001\001\000\004\013\361\001\001\000\004\010" +
    "\362\001\001\000\004\011\363\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\004\020\375\001\001\000" +
    "\004\007\376\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001" });

  /** Access to <code>reduce_goto</code> table. */
  public short[][] reduce_table() {return _reduce_table;}

  /** Instance of action encapsulation class. */
  protected CUP$sintactical$actions action_obj;

  /** Action encapsulation object initializer. */
  protected void init_actions()
    {
      action_obj = new CUP$sintactical$actions(this);
    }

  /** Invoke a user supplied parse action. */
  public java_cup.runtime.Symbol do_action(
    int                        act_num,
    java_cup.runtime.lr_parser parser,
    java.util.Stack            stack,
    int                        top)
    throws java.lang.Exception
  {
    /* call code in generated class */
    return action_obj.CUP$sintactical$do_action(act_num, parser, stack, top);
  }

  /** Indicates start state. */
  public int start_state() {return 0;}
  /** Indicates start production. */
  public int start_production() {return 0;}

  /** <code>EOF</code> Symbol index. */
  public int EOF_sym() {return 0;}

  /** <code>error</code> Symbol index. */
  public int error_sym() {return 1;}



    public ArrayList<proyecto1_oc1_202010770.tabla_de_simbolos> tabla_simbolos = new ArrayList<>();
    public ArrayList<proyecto1_oc1_202010770.lista> lista_de_elementos = new ArrayList<>();
    public proyecto1_oc1_202010770.operaciones_aritmeticas operaciones = new operaciones_aritmeticas();
    public proyecto1_oc1_202010770.Impresion impresion = new Impresion();
    public String actual = "";
    public String datos_en_lista = "";
    public String operacion_estadistica = "";
    public String operacion_grafica ="";
 
    public int num_global = 0;
    public void syntax_error(Symbol s){
        System.out.println("Error Sintactico: "+ s.value +" Linea "+(s.right+1)+" columna "+(s.left+1)+"\n"  );
    }

    public void unrecovered_syntax_error(Symbol s) throws java.lang.Exception{ 
        System.out.println("Error de sintaxis no se pudo terminar de analizar: "+ s.value +" Linea "+(s.right+1)+" columna "+(s.left+1)+"\n" );
        
}


/** Cup generated class to encapsulate user supplied action code.*/
@SuppressWarnings({"rawtypes", "unchecked", "unused"})
class CUP$sintactical$actions {
  private final sintactical parser;

  /** Constructor */
  CUP$sintactical$actions(sintactical parser) {
    this.parser = parser;
  }

  /** Method 0 with the actual generated action code for actions 0 to 300. */
  public final java_cup.runtime.Symbol CUP$sintactical$do_action_part00000000(
    int                        CUP$sintactical$act_num,
    java_cup.runtime.lr_parser CUP$sintactical$parser,
    java.util.Stack            CUP$sintactical$stack,
    int                        CUP$sintactical$top)
    throws java.lang.Exception
    {
      /* Symbol object for return from actions */
      java_cup.runtime.Symbol CUP$sintactical$result;

      /* select the action based on the action number */
      switch (CUP$sintactical$act_num)
        {
          /*. . . . . . . . . . . . . . . . . . . .*/
          case 0: // $START ::= inicio EOF 
            {
              Object RESULT =null;
		int start_valleft = ((java_cup.runtime.Symbol)CUP$sintactical$stack.elementAt(CUP$sintactical$top-1)).left;
		int start_valright = ((java_cup.runtime.Symbol)CUP$sintactical$stack.elementAt(CUP$sintactical$top-1)).right;
		Object start_val = (Object)((java_cup.runtime.Symbol) CUP$sintactical$stack.elementAt(CUP$sintactical$top-1)).value;
		RESULT = start_val;
              CUP$sintactical$result = parser.getSymbolFactory().newSymbol("$START",0, ((java_cup.runtime.Symbol)CUP$sintactical$stack.elementAt(CUP$sintactical$top-1)), ((java_cup.runtime.Symbol)CUP$sintactical$stack.peek()), RESULT);
            }
          /* ACCEPT */
          CUP$sintactical$parser.done_parsing();
          return CUP$sintactical$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 1: // NT$0 ::= 
            {
              Object RESULT =null;
lista_de_elementos.add(new proyecto1_oc1_202010770.lista("char_temp"));lista_de_elementos.add(new proyecto1_oc1_202010770.lista("double_temp"));
              CUP$sintactical$result = parser.getSymbolFactory().newSymbol("NT$0",28, ((java_cup.runtime.Symbol)CUP$sintactical$stack.peek()), RESULT);
            }
          return CUP$sintactical$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 2: // inicio ::= NT$0 PROGRAM instruccion END PROGRAM error 
            {
              Object RESULT =null;
              // propagate RESULT from NT$0
                RESULT = (Object) ((java_cup.runtime.Symbol) CUP$sintactical$stack.elementAt(CUP$sintactical$top-5)).value;

              CUP$sintactical$result = parser.getSymbolFactory().newSymbol("inicio",0, ((java_cup.runtime.Symbol)CUP$sintactical$stack.elementAt(CUP$sintactical$top-5)), ((java_cup.runtime.Symbol)CUP$sintactical$stack.peek()), RESULT);
            }
          return CUP$sintactical$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 3: // instruccion ::= lista_de_instrucciones instruccion 
            {
              Object RESULT =null;

              CUP$sintactical$result = parser.getSymbolFactory().newSymbol("instruccion",15, ((java_cup.runtime.Symbol)CUP$sintactical$stack.elementAt(CUP$sintactical$top-1)), ((java_cup.runtime.Symbol)CUP$sintactical$stack.peek()), RESULT);
            }
          return CUP$sintactical$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 4: // instruccion ::= lista_de_instrucciones 
            {
              Object RESULT =null;

              CUP$sintactical$result = parser.getSymbolFactory().newSymbol("instruccion",15, ((java_cup.runtime.Symbol)CUP$sintactical$stack.peek()), ((java_cup.runtime.Symbol)CUP$sintactical$stack.peek()), RESULT);
            }
          return CUP$sintactical$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 5: // lista_de_instrucciones ::= asignacion 
            {
              Object RESULT =null;

              CUP$sintactical$result = parser.getSymbolFactory().newSymbol("lista_de_instrucciones",16, ((java_cup.runtime.Symbol)CUP$sintactical$stack.peek()), ((java_cup.runtime.Symbol)CUP$sintactical$stack.peek()), RESULT);
            }
          return CUP$sintactical$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 6: // lista_de_instrucciones ::= lista 
            {
              Object RESULT =null;

              CUP$sintactical$result = parser.getSymbolFactory().newSymbol("lista_de_instrucciones",16, ((java_cup.runtime.Symbol)CUP$sintactical$stack.peek()), ((java_cup.runtime.Symbol)CUP$sintactical$stack.peek()), RESULT);
            }
          return CUP$sintactical$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 7: // lista_de_instrucciones ::= impresiones 
            {
              Object RESULT =null;

              CUP$sintactical$result = parser.getSymbolFactory().newSymbol("lista_de_instrucciones",16, ((java_cup.runtime.Symbol)CUP$sintactical$stack.peek()), ((java_cup.runtime.Symbol)CUP$sintactical$stack.peek()), RESULT);
            }
          return CUP$sintactical$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 8: // lista_de_instrucciones ::= graficar 
            {
              Object RESULT =null;

              CUP$sintactical$result = parser.getSymbolFactory().newSymbol("lista_de_instrucciones",16, ((java_cup.runtime.Symbol)CUP$sintactical$stack.peek()), ((java_cup.runtime.Symbol)CUP$sintactical$stack.peek()), RESULT);
            }
          return CUP$sintactical$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 9: // graficar ::= grafica_barras 
            {
              Object RESULT =null;

              CUP$sintactical$result = parser.getSymbolFactory().newSymbol("graficar",12, ((java_cup.runtime.Symbol)CUP$sintactical$stack.peek()), ((java_cup.runtime.Symbol)CUP$sintactical$stack.peek()), RESULT);
            }
          return CUP$sintactical$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 10: // graficar ::= grafica_pie 
            {
              Object RESULT =null;

              CUP$sintactical$result = parser.getSymbolFactory().newSymbol("graficar",12, ((java_cup.runtime.Symbol)CUP$sintactical$stack.peek()), ((java_cup.runtime.Symbol)CUP$sintactical$stack.peek()), RESULT);
            }
          return CUP$sintactical$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 11: // graficar ::= grafica_linea 
            {
              Object RESULT =null;

              CUP$sintactical$result = parser.getSymbolFactory().newSymbol("graficar",12, ((java_cup.runtime.Symbol)CUP$sintactical$stack.peek()), ((java_cup.runtime.Symbol)CUP$sintactical$stack.peek()), RESULT);
            }
          return CUP$sintactical$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 12: // graficar ::= grafica_histograma 
            {
              Object RESULT =null;

              CUP$sintactical$result = parser.getSymbolFactory().newSymbol("graficar",12, ((java_cup.runtime.Symbol)CUP$sintactical$stack.peek()), ((java_cup.runtime.Symbol)CUP$sintactical$stack.peek()), RESULT);
            }
          return CUP$sintactical$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 13: // grafica_barras ::= BARRAS PARENTESIS_ABIERTO asignacion_titulo eje_x eje_y titulo_x titulo_y EXEC BARRAS PARENTESIS_CERRADO END PUNTO_Y_COMA 
            {
              Object RESULT =null;
		int tituloleft = ((java_cup.runtime.Symbol)CUP$sintactical$stack.elementAt(CUP$sintactical$top-9)).left;
		int tituloright = ((java_cup.runtime.Symbol)CUP$sintactical$stack.elementAt(CUP$sintactical$top-9)).right;
		Object titulo = (Object)((java_cup.runtime.Symbol) CUP$sintactical$stack.elementAt(CUP$sintactical$top-9)).value;
		int variable_xleft = ((java_cup.runtime.Symbol)CUP$sintactical$stack.elementAt(CUP$sintactical$top-8)).left;
		int variable_xright = ((java_cup.runtime.Symbol)CUP$sintactical$stack.elementAt(CUP$sintactical$top-8)).right;
		Object variable_x = (Object)((java_cup.runtime.Symbol) CUP$sintactical$stack.elementAt(CUP$sintactical$top-8)).value;
		int variable_yleft = ((java_cup.runtime.Symbol)CUP$sintactical$stack.elementAt(CUP$sintactical$top-7)).left;
		int variable_yright = ((java_cup.runtime.Symbol)CUP$sintactical$stack.elementAt(CUP$sintactical$top-7)).right;
		Object variable_y = (Object)((java_cup.runtime.Symbol) CUP$sintactical$stack.elementAt(CUP$sintactical$top-7)).value;
		int title_xleft = ((java_cup.runtime.Symbol)CUP$sintactical$stack.elementAt(CUP$sintactical$top-6)).left;
		int title_xright = ((java_cup.runtime.Symbol)CUP$sintactical$stack.elementAt(CUP$sintactical$top-6)).right;
		Object title_x = (Object)((java_cup.runtime.Symbol) CUP$sintactical$stack.elementAt(CUP$sintactical$top-6)).value;
		int title_yleft = ((java_cup.runtime.Symbol)CUP$sintactical$stack.elementAt(CUP$sintactical$top-5)).left;
		int title_yright = ((java_cup.runtime.Symbol)CUP$sintactical$stack.elementAt(CUP$sintactical$top-5)).right;
		Object title_y = (Object)((java_cup.runtime.Symbol) CUP$sintactical$stack.elementAt(CUP$sintactical$top-5)).value;
		RESULT= "AS"; System.out.println(titulo.toString()+" "+variable_x +" "+variable_y+" " +title_x +" "+title_y);
              CUP$sintactical$result = parser.getSymbolFactory().newSymbol("grafica_barras",13, ((java_cup.runtime.Symbol)CUP$sintactical$stack.elementAt(CUP$sintactical$top-11)), ((java_cup.runtime.Symbol)CUP$sintactical$stack.peek()), RESULT);
            }
          return CUP$sintactical$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 14: // asignacion_titulo ::= TITULO DOS_PUNTOS DOS_PUNTOS CADENA IGUAL dato END PUNTO_Y_COMA 
            {
              Object RESULT =null;
		int resultadoleft = ((java_cup.runtime.Symbol)CUP$sintactical$stack.elementAt(CUP$sintactical$top-2)).left;
		int resultadoright = ((java_cup.runtime.Symbol)CUP$sintactical$stack.elementAt(CUP$sintactical$top-2)).right;
		Object resultado = (Object)((java_cup.runtime.Symbol) CUP$sintactical$stack.elementAt(CUP$sintactical$top-2)).value;
		RESULT = resultado;
              CUP$sintactical$result = parser.getSymbolFactory().newSymbol("asignacion_titulo",14, ((java_cup.runtime.Symbol)CUP$sintactical$stack.elementAt(CUP$sintactical$top-7)), ((java_cup.runtime.Symbol)CUP$sintactical$stack.peek()), RESULT);
            }
          return CUP$sintactical$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 15: // NT$1 ::= 
            {
              Object RESULT =null;
operacion_grafica= "cadena";
              CUP$sintactical$result = parser.getSymbolFactory().newSymbol("NT$1",29, ((java_cup.runtime.Symbol)CUP$sintactical$stack.peek()), RESULT);
            }
          return CUP$sintactical$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 16: // eje_x ::= EJE_X DOS_PUNTOS DOS_PUNTOS CADENA NT$1 IGUAL lista_grafica END PUNTO_Y_COMA 
            {
              Object RESULT =null;
              // propagate RESULT from NT$1
                RESULT = (Object) ((java_cup.runtime.Symbol) CUP$sintactical$stack.elementAt(CUP$sintactical$top-4)).value;
		int bleft = ((java_cup.runtime.Symbol)CUP$sintactical$stack.elementAt(CUP$sintactical$top-2)).left;
		int bright = ((java_cup.runtime.Symbol)CUP$sintactical$stack.elementAt(CUP$sintactical$top-2)).right;
		Object b = (Object)((java_cup.runtime.Symbol) CUP$sintactical$stack.elementAt(CUP$sintactical$top-2)).value;
		RESULT=b;
              CUP$sintactical$result = parser.getSymbolFactory().newSymbol("eje_x",8, ((java_cup.runtime.Symbol)CUP$sintactical$stack.elementAt(CUP$sintactical$top-8)), ((java_cup.runtime.Symbol)CUP$sintactical$stack.peek()), RESULT);
            }
          return CUP$sintactical$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 17: // NT$2 ::= 
            {
              Object RESULT =null;
operacion_grafica= "double";
              CUP$sintactical$result = parser.getSymbolFactory().newSymbol("NT$2",30, ((java_cup.runtime.Symbol)CUP$sintactical$stack.peek()), RESULT);
            }
          return CUP$sintactical$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 18: // eje_y ::= EJE_Y DOS_PUNTOS DOS_PUNTOS DOUBLE NT$2 IGUAL lista_grafica END PUNTO_Y_COMA 
            {
              Object RESULT =null;
              // propagate RESULT from NT$2
                RESULT = (Object) ((java_cup.runtime.Symbol) CUP$sintactical$stack.elementAt(CUP$sintactical$top-4)).value;
		int bleft = ((java_cup.runtime.Symbol)CUP$sintactical$stack.elementAt(CUP$sintactical$top-2)).left;
		int bright = ((java_cup.runtime.Symbol)CUP$sintactical$stack.elementAt(CUP$sintactical$top-2)).right;
		Object b = (Object)((java_cup.runtime.Symbol) CUP$sintactical$stack.elementAt(CUP$sintactical$top-2)).value;
		RESULT=b;
              CUP$sintactical$result = parser.getSymbolFactory().newSymbol("eje_y",9, ((java_cup.runtime.Symbol)CUP$sintactical$stack.elementAt(CUP$sintactical$top-8)), ((java_cup.runtime.Symbol)CUP$sintactical$stack.peek()), RESULT);
            }
          return CUP$sintactical$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 19: // lista_grafica ::= ARROBA VARIABLE 
            {
              Object RESULT =null;
		int varleft = ((java_cup.runtime.Symbol)CUP$sintactical$stack.peek()).left;
		int varright = ((java_cup.runtime.Symbol)CUP$sintactical$stack.peek()).right;
		String var = (String)((java_cup.runtime.Symbol) CUP$sintactical$stack.peek()).value;
		RESULT = var;
              CUP$sintactical$result = parser.getSymbolFactory().newSymbol("lista_grafica",10, ((java_cup.runtime.Symbol)CUP$sintactical$stack.elementAt(CUP$sintactical$top-1)), ((java_cup.runtime.Symbol)CUP$sintactical$stack.peek()), RESULT);
            }
          return CUP$sintactical$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 20: // lista_grafica ::= CORCHETE_ABIERTO ultima_asignacion CORCHETE_CERRADO 
            {
              Object RESULT =null;
		


String vals = "char_temp";
lista_de_elementos.add(new proyecto1_oc1_202010770.lista(vals));
double numero = 0.0;
Scanner scanner = new Scanner(datos_en_lista);
for (proyecto1_oc1_202010770.lista elemento : lista_de_elementos) {
                if(elemento.variable.equals("char_temp")){
                    elemento.refresh_list();
}
}
while (scanner.hasNext()) {
            
            String numeroStr = scanner.next();
            
           
            for (proyecto1_oc1_202010770.lista elemento : lista_de_elementos) {
                if(operacion_grafica.equals("cadena")){
                    if(elemento.variable.equals("char_temp")){
                        elemento.agregarElemento("char[]",vals, numeroStr.replace("Ñ", " "));
                    }
                }else{
                    if(elemento.variable.equals("double_temp")){
                        elemento.agregarElemento("double",vals, numeroStr.replace("Ñ", " "));
                    }
                }
                
                elemento.mostrarElementos();
            }
        }
        if(operacion_grafica.equals("cadena")){
            RESULT ="char_temp";
        }else{
        RESULT ="double_temp";
        }

              CUP$sintactical$result = parser.getSymbolFactory().newSymbol("lista_grafica",10, ((java_cup.runtime.Symbol)CUP$sintactical$stack.elementAt(CUP$sintactical$top-2)), ((java_cup.runtime.Symbol)CUP$sintactical$stack.peek()), RESULT);
            }
          return CUP$sintactical$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 21: // ultima_asignacion ::= ultima_asignacion COMMA dato 
            {
              Object RESULT =null;
		int dataleft = ((java_cup.runtime.Symbol)CUP$sintactical$stack.peek()).left;
		int dataright = ((java_cup.runtime.Symbol)CUP$sintactical$stack.peek()).right;
		Object data = (Object)((java_cup.runtime.Symbol) CUP$sintactical$stack.peek()).value;
		datos_en_lista += " "+data.toString().replace(" ", "Ñ");
              CUP$sintactical$result = parser.getSymbolFactory().newSymbol("ultima_asignacion",11, ((java_cup.runtime.Symbol)CUP$sintactical$stack.elementAt(CUP$sintactical$top-2)), ((java_cup.runtime.Symbol)CUP$sintactical$stack.peek()), RESULT);
            }
          return CUP$sintactical$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 22: // ultima_asignacion ::= dato 
            {
              Object RESULT =null;
		int dataleft = ((java_cup.runtime.Symbol)CUP$sintactical$stack.peek()).left;
		int dataright = ((java_cup.runtime.Symbol)CUP$sintactical$stack.peek()).right;
		Object data = (Object)((java_cup.runtime.Symbol) CUP$sintactical$stack.peek()).value;
		datos_en_lista = data.toString().replace(" ", "Ñ");
              CUP$sintactical$result = parser.getSymbolFactory().newSymbol("ultima_asignacion",11, ((java_cup.runtime.Symbol)CUP$sintactical$stack.peek()), ((java_cup.runtime.Symbol)CUP$sintactical$stack.peek()), RESULT);
            }
          return CUP$sintactical$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 23: // titulo_x ::= TITULO_X DOS_PUNTOS DOS_PUNTOS CADENA IGUAL dato END PUNTO_Y_COMA 
            {
              Object RESULT =null;
		int dataleft = ((java_cup.runtime.Symbol)CUP$sintactical$stack.elementAt(CUP$sintactical$top-2)).left;
		int dataright = ((java_cup.runtime.Symbol)CUP$sintactical$stack.elementAt(CUP$sintactical$top-2)).right;
		Object data = (Object)((java_cup.runtime.Symbol) CUP$sintactical$stack.elementAt(CUP$sintactical$top-2)).value;
		RESULT = data.toString();
              CUP$sintactical$result = parser.getSymbolFactory().newSymbol("titulo_x",6, ((java_cup.runtime.Symbol)CUP$sintactical$stack.elementAt(CUP$sintactical$top-7)), ((java_cup.runtime.Symbol)CUP$sintactical$stack.peek()), RESULT);
            }
          return CUP$sintactical$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 24: // titulo_y ::= TITULO_Y DOS_PUNTOS DOS_PUNTOS CADENA IGUAL dato END PUNTO_Y_COMA 
            {
              Object RESULT =null;
		int dataleft = ((java_cup.runtime.Symbol)CUP$sintactical$stack.elementAt(CUP$sintactical$top-2)).left;
		int dataright = ((java_cup.runtime.Symbol)CUP$sintactical$stack.elementAt(CUP$sintactical$top-2)).right;
		Object data = (Object)((java_cup.runtime.Symbol) CUP$sintactical$stack.elementAt(CUP$sintactical$top-2)).value;
		RESULT = data.toString();
              CUP$sintactical$result = parser.getSymbolFactory().newSymbol("titulo_y",7, ((java_cup.runtime.Symbol)CUP$sintactical$stack.elementAt(CUP$sintactical$top-7)), ((java_cup.runtime.Symbol)CUP$sintactical$stack.peek()), RESULT);
            }
          return CUP$sintactical$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 25: // grafica_pie ::= PIE PARENTESIS_ABIERTO label_pie valores_pie asignacion_titulo EXEC PIE PARENTESIS_CERRADO END PUNTO_Y_COMA 
            {
              Object RESULT =null;
		int labelesleft = ((java_cup.runtime.Symbol)CUP$sintactical$stack.elementAt(CUP$sintactical$top-7)).left;
		int labelesright = ((java_cup.runtime.Symbol)CUP$sintactical$stack.elementAt(CUP$sintactical$top-7)).right;
		Object labeles = (Object)((java_cup.runtime.Symbol) CUP$sintactical$stack.elementAt(CUP$sintactical$top-7)).value;
		int valor_variableleft = ((java_cup.runtime.Symbol)CUP$sintactical$stack.elementAt(CUP$sintactical$top-6)).left;
		int valor_variableright = ((java_cup.runtime.Symbol)CUP$sintactical$stack.elementAt(CUP$sintactical$top-6)).right;
		Object valor_variable = (Object)((java_cup.runtime.Symbol) CUP$sintactical$stack.elementAt(CUP$sintactical$top-6)).value;
		int tituloleft = ((java_cup.runtime.Symbol)CUP$sintactical$stack.elementAt(CUP$sintactical$top-5)).left;
		int tituloright = ((java_cup.runtime.Symbol)CUP$sintactical$stack.elementAt(CUP$sintactical$top-5)).right;
		Object titulo = (Object)((java_cup.runtime.Symbol) CUP$sintactical$stack.elementAt(CUP$sintactical$top-5)).value;
		RESULT= "AS"; System.out.println(labeles+ " " +valor_variable+" "+titulo);
              CUP$sintactical$result = parser.getSymbolFactory().newSymbol("grafica_pie",3, ((java_cup.runtime.Symbol)CUP$sintactical$stack.elementAt(CUP$sintactical$top-9)), ((java_cup.runtime.Symbol)CUP$sintactical$stack.peek()), RESULT);
            }
          return CUP$sintactical$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 26: // valores_pie ::= VALUES DOS_PUNTOS DOS_PUNTOS DOUBLE IGUAL lista_grafica END PUNTO_Y_COMA 
            {
              Object RESULT =null;
		int valorleft = ((java_cup.runtime.Symbol)CUP$sintactical$stack.elementAt(CUP$sintactical$top-2)).left;
		int valorright = ((java_cup.runtime.Symbol)CUP$sintactical$stack.elementAt(CUP$sintactical$top-2)).right;
		Object valor = (Object)((java_cup.runtime.Symbol) CUP$sintactical$stack.elementAt(CUP$sintactical$top-2)).value;
		RESULT = valor;
              CUP$sintactical$result = parser.getSymbolFactory().newSymbol("valores_pie",2, ((java_cup.runtime.Symbol)CUP$sintactical$stack.elementAt(CUP$sintactical$top-7)), ((java_cup.runtime.Symbol)CUP$sintactical$stack.peek()), RESULT);
            }
          return CUP$sintactical$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 27: // label_pie ::= LABEL DOS_PUNTOS DOS_PUNTOS CADENA IGUAL lista_grafica END PUNTO_Y_COMA 
            {
              Object RESULT =null;
		int valorleft = ((java_cup.runtime.Symbol)CUP$sintactical$stack.elementAt(CUP$sintactical$top-2)).left;
		int valorright = ((java_cup.runtime.Symbol)CUP$sintactical$stack.elementAt(CUP$sintactical$top-2)).right;
		Object valor = (Object)((java_cup.runtime.Symbol) CUP$sintactical$stack.elementAt(CUP$sintactical$top-2)).value;
		RESULT = valor;
              CUP$sintactical$result = parser.getSymbolFactory().newSymbol("label_pie",5, ((java_cup.runtime.Symbol)CUP$sintactical$stack.elementAt(CUP$sintactical$top-7)), ((java_cup.runtime.Symbol)CUP$sintactical$stack.peek()), RESULT);
            }
          return CUP$sintactical$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 28: // grafica_linea ::= LINEA PARENTESIS_ABIERTO asignacion_titulo eje_x eje_y titulo_x titulo_y EXEC LINEA PARENTESIS_CERRADO END PUNTO_Y_COMA 
            {
              Object RESULT =null;
		int tituloleft = ((java_cup.runtime.Symbol)CUP$sintactical$stack.elementAt(CUP$sintactical$top-9)).left;
		int tituloright = ((java_cup.runtime.Symbol)CUP$sintactical$stack.elementAt(CUP$sintactical$top-9)).right;
		Object titulo = (Object)((java_cup.runtime.Symbol) CUP$sintactical$stack.elementAt(CUP$sintactical$top-9)).value;
		int variable_xleft = ((java_cup.runtime.Symbol)CUP$sintactical$stack.elementAt(CUP$sintactical$top-8)).left;
		int variable_xright = ((java_cup.runtime.Symbol)CUP$sintactical$stack.elementAt(CUP$sintactical$top-8)).right;
		Object variable_x = (Object)((java_cup.runtime.Symbol) CUP$sintactical$stack.elementAt(CUP$sintactical$top-8)).value;
		int variable_yleft = ((java_cup.runtime.Symbol)CUP$sintactical$stack.elementAt(CUP$sintactical$top-7)).left;
		int variable_yright = ((java_cup.runtime.Symbol)CUP$sintactical$stack.elementAt(CUP$sintactical$top-7)).right;
		Object variable_y = (Object)((java_cup.runtime.Symbol) CUP$sintactical$stack.elementAt(CUP$sintactical$top-7)).value;
		int title_xleft = ((java_cup.runtime.Symbol)CUP$sintactical$stack.elementAt(CUP$sintactical$top-6)).left;
		int title_xright = ((java_cup.runtime.Symbol)CUP$sintactical$stack.elementAt(CUP$sintactical$top-6)).right;
		Object title_x = (Object)((java_cup.runtime.Symbol) CUP$sintactical$stack.elementAt(CUP$sintactical$top-6)).value;
		int title_yleft = ((java_cup.runtime.Symbol)CUP$sintactical$stack.elementAt(CUP$sintactical$top-5)).left;
		int title_yright = ((java_cup.runtime.Symbol)CUP$sintactical$stack.elementAt(CUP$sintactical$top-5)).right;
		Object title_y = (Object)((java_cup.runtime.Symbol) CUP$sintactical$stack.elementAt(CUP$sintactical$top-5)).value;
		RESULT= "AS"; System.out.println(titulo.toString()+" "+variable_x +" "+variable_y+" " +title_x +" "+title_y);
              CUP$sintactical$result = parser.getSymbolFactory().newSymbol("grafica_linea",4, ((java_cup.runtime.Symbol)CUP$sintactical$stack.elementAt(CUP$sintactical$top-11)), ((java_cup.runtime.Symbol)CUP$sintactical$stack.peek()), RESULT);
            }
          return CUP$sintactical$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 29: // grafica_histograma ::= HISTOGRAM PARENTESIS_ABIERTO asignacion_titulo label_pie EXEC LINEA PARENTESIS_CERRADO END PUNTO_Y_COMA 
            {
              Object RESULT =null;
		int tituloleft = ((java_cup.runtime.Symbol)CUP$sintactical$stack.elementAt(CUP$sintactical$top-6)).left;
		int tituloright = ((java_cup.runtime.Symbol)CUP$sintactical$stack.elementAt(CUP$sintactical$top-6)).right;
		Object titulo = (Object)((java_cup.runtime.Symbol) CUP$sintactical$stack.elementAt(CUP$sintactical$top-6)).value;
		int labelesleft = ((java_cup.runtime.Symbol)CUP$sintactical$stack.elementAt(CUP$sintactical$top-5)).left;
		int labelesright = ((java_cup.runtime.Symbol)CUP$sintactical$stack.elementAt(CUP$sintactical$top-5)).right;
		Object labeles = (Object)((java_cup.runtime.Symbol) CUP$sintactical$stack.elementAt(CUP$sintactical$top-5)).value;
		RESULT= "AS"; System.out.println(titulo.toString()+" "+labeles);
              CUP$sintactical$result = parser.getSymbolFactory().newSymbol("grafica_histograma",1, ((java_cup.runtime.Symbol)CUP$sintactical$stack.elementAt(CUP$sintactical$top-8)), ((java_cup.runtime.Symbol)CUP$sintactical$stack.peek()), RESULT);
            }
          return CUP$sintactical$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 30: // impresiones ::= CONSOLE DOS_PUNTOS DOS_PUNTOS PRINT IGUAL datos_de_impresion END PUNTO_Y_COMA 
            {
              Object RESULT =null;
		System.out.println("");
              CUP$sintactical$result = parser.getSymbolFactory().newSymbol("impresiones",24, ((java_cup.runtime.Symbol)CUP$sintactical$stack.elementAt(CUP$sintactical$top-7)), ((java_cup.runtime.Symbol)CUP$sintactical$stack.peek()), RESULT);
            }
          return CUP$sintactical$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 31: // NT$3 ::= 
            {
              Object RESULT =null;
		int actleft = ((java_cup.runtime.Symbol)CUP$sintactical$stack.peek()).left;
		int actright = ((java_cup.runtime.Symbol)CUP$sintactical$stack.peek()).right;
		Object act = (Object)((java_cup.runtime.Symbol) CUP$sintactical$stack.peek()).value;
        
        System.out.println("----------");
        System.out.println(act);
        System.out.println("----------");
              CUP$sintactical$result = parser.getSymbolFactory().newSymbol("NT$3",31, ((java_cup.runtime.Symbol)CUP$sintactical$stack.peek()), RESULT);
            }
          return CUP$sintactical$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 32: // impresiones ::= CONSOLE DOS_PUNTOS DOS_PUNTOS COLUMN IGUAL dato NT$3 DIAGONAL SLASH_MAYOR impresion_de_la_lista END PUNTO_Y_COMA 
            {
              Object RESULT =null;
              // propagate RESULT from NT$3
                RESULT = (Object) ((java_cup.runtime.Symbol) CUP$sintactical$stack.elementAt(CUP$sintactical$top-5)).value;
		int actleft = ((java_cup.runtime.Symbol)CUP$sintactical$stack.elementAt(CUP$sintactical$top-6)).left;
		int actright = ((java_cup.runtime.Symbol)CUP$sintactical$stack.elementAt(CUP$sintactical$top-6)).right;
		Object act = (Object)((java_cup.runtime.Symbol) CUP$sintactical$stack.elementAt(CUP$sintactical$top-6)).value;

              CUP$sintactical$result = parser.getSymbolFactory().newSymbol("impresiones",24, ((java_cup.runtime.Symbol)CUP$sintactical$stack.elementAt(CUP$sintactical$top-11)), ((java_cup.runtime.Symbol)CUP$sintactical$stack.peek()), RESULT);
            }
          return CUP$sintactical$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 33: // datos_de_impresion ::= datos_de_impresion COMMA dato 
            {
              Object RESULT =null;
		int datleft = ((java_cup.runtime.Symbol)CUP$sintactical$stack.peek()).left;
		int datright = ((java_cup.runtime.Symbol)CUP$sintactical$stack.peek()).right;
		Object dat = (Object)((java_cup.runtime.Symbol) CUP$sintactical$stack.peek()).value;
		impresion.imprimir(", "+dat.toString());
              CUP$sintactical$result = parser.getSymbolFactory().newSymbol("datos_de_impresion",26, ((java_cup.runtime.Symbol)CUP$sintactical$stack.elementAt(CUP$sintactical$top-2)), ((java_cup.runtime.Symbol)CUP$sintactical$stack.peek()), RESULT);
            }
          return CUP$sintactical$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 34: // datos_de_impresion ::= dato 
            {
              Object RESULT =null;
		int datleft = ((java_cup.runtime.Symbol)CUP$sintactical$stack.peek()).left;
		int datright = ((java_cup.runtime.Symbol)CUP$sintactical$stack.peek()).right;
		Object dat = (Object)((java_cup.runtime.Symbol) CUP$sintactical$stack.peek()).value;
		impresion.imprimir(dat.toString());
              CUP$sintactical$result = parser.getSymbolFactory().newSymbol("datos_de_impresion",26, ((java_cup.runtime.Symbol)CUP$sintactical$stack.peek()), ((java_cup.runtime.Symbol)CUP$sintactical$stack.peek()), RESULT);
            }
          return CUP$sintactical$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 35: // impresion_de_la_lista ::= ARROBA VARIABLE 
            {
              Object RESULT =null;
		int varleft = ((java_cup.runtime.Symbol)CUP$sintactical$stack.peek()).left;
		int varright = ((java_cup.runtime.Symbol)CUP$sintactical$stack.peek()).right;
		String var = (String)((java_cup.runtime.Symbol) CUP$sintactical$stack.peek()).value;
		
        for (proyecto1_oc1_202010770.lista elemento : lista_de_elementos) {
            
            if(elemento.variable.equals(var)){
                impresion.imprimir_lista(actual, elemento);
            }        
        }
              CUP$sintactical$result = parser.getSymbolFactory().newSymbol("impresion_de_la_lista",27, ((java_cup.runtime.Symbol)CUP$sintactical$stack.elementAt(CUP$sintactical$top-1)), ((java_cup.runtime.Symbol)CUP$sintactical$stack.peek()), RESULT);
            }
          return CUP$sintactical$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 36: // impresion_de_la_lista ::= CORCHETE_ABIERTO mas_listas CORCHETE_CERRADO 
            {
              Object RESULT =null;

              CUP$sintactical$result = parser.getSymbolFactory().newSymbol("impresion_de_la_lista",27, ((java_cup.runtime.Symbol)CUP$sintactical$stack.elementAt(CUP$sintactical$top-2)), ((java_cup.runtime.Symbol)CUP$sintactical$stack.peek()), RESULT);
            }
          return CUP$sintactical$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 37: // mas_listas ::= mas_listas COMMA dato 
            {
              Object RESULT =null;
		int valleft = ((java_cup.runtime.Symbol)CUP$sintactical$stack.peek()).left;
		int valright = ((java_cup.runtime.Symbol)CUP$sintactical$stack.peek()).right;
		Object val = (Object)((java_cup.runtime.Symbol) CUP$sintactical$stack.peek()).value;
		System.out.println(val);
              CUP$sintactical$result = parser.getSymbolFactory().newSymbol("mas_listas",25, ((java_cup.runtime.Symbol)CUP$sintactical$stack.elementAt(CUP$sintactical$top-2)), ((java_cup.runtime.Symbol)CUP$sintactical$stack.peek()), RESULT);
            }
          return CUP$sintactical$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 38: // mas_listas ::= dato 
            {
              Object RESULT =null;
		int valleft = ((java_cup.runtime.Symbol)CUP$sintactical$stack.peek()).left;
		int valright = ((java_cup.runtime.Symbol)CUP$sintactical$stack.peek()).right;
		Object val = (Object)((java_cup.runtime.Symbol) CUP$sintactical$stack.peek()).value;
		System.out.println(val);
              CUP$sintactical$result = parser.getSymbolFactory().newSymbol("mas_listas",25, ((java_cup.runtime.Symbol)CUP$sintactical$stack.peek()), ((java_cup.runtime.Symbol)CUP$sintactical$stack.peek()), RESULT);
            }
          return CUP$sintactical$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 39: // asignacion ::= VAR DOS_PUNTOS tipo_de_dato DOS_PUNTOS DOS_PUNTOS VARIABLE SLASH_MENOR DIAGONAL dato END PUNTO_Y_COMA 
            {
              Object RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$sintactical$stack.elementAt(CUP$sintactical$top-8)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$sintactical$stack.elementAt(CUP$sintactical$top-8)).right;
		Object a = (Object)((java_cup.runtime.Symbol) CUP$sintactical$stack.elementAt(CUP$sintactical$top-8)).value;
		int bleft = ((java_cup.runtime.Symbol)CUP$sintactical$stack.elementAt(CUP$sintactical$top-5)).left;
		int bright = ((java_cup.runtime.Symbol)CUP$sintactical$stack.elementAt(CUP$sintactical$top-5)).right;
		String b = (String)((java_cup.runtime.Symbol) CUP$sintactical$stack.elementAt(CUP$sintactical$top-5)).value;
		int cleft = ((java_cup.runtime.Symbol)CUP$sintactical$stack.elementAt(CUP$sintactical$top-2)).left;
		int cright = ((java_cup.runtime.Symbol)CUP$sintactical$stack.elementAt(CUP$sintactical$top-2)).right;
		Object c = (Object)((java_cup.runtime.Symbol) CUP$sintactical$stack.elementAt(CUP$sintactical$top-2)).value;
		

            tabla_simbolos.add(new proyecto1_oc1_202010770.tabla_de_simbolos(a.toString(),b.toString(),c.toString()));
    
              CUP$sintactical$result = parser.getSymbolFactory().newSymbol("asignacion",17, ((java_cup.runtime.Symbol)CUP$sintactical$stack.elementAt(CUP$sintactical$top-10)), ((java_cup.runtime.Symbol)CUP$sintactical$stack.peek()), RESULT);
            }
          return CUP$sintactical$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 40: // lista ::= ARREGLO DOS_PUNTOS tipo_de_dato DOS_PUNTOS DOS_PUNTOS ARROBA VARIABLE SLASH_MENOR DIAGONAL CORCHETE_ABIERTO datos_de_lista CORCHETE_CERRADO END PUNTO_Y_COMA 
            {
              Object RESULT =null;
		int tipoleft = ((java_cup.runtime.Symbol)CUP$sintactical$stack.elementAt(CUP$sintactical$top-11)).left;
		int tiporight = ((java_cup.runtime.Symbol)CUP$sintactical$stack.elementAt(CUP$sintactical$top-11)).right;
		Object tipo = (Object)((java_cup.runtime.Symbol) CUP$sintactical$stack.elementAt(CUP$sintactical$top-11)).value;
		int varleft = ((java_cup.runtime.Symbol)CUP$sintactical$stack.elementAt(CUP$sintactical$top-7)).left;
		int varright = ((java_cup.runtime.Symbol)CUP$sintactical$stack.elementAt(CUP$sintactical$top-7)).right;
		String var = (String)((java_cup.runtime.Symbol) CUP$sintactical$stack.elementAt(CUP$sintactical$top-7)).value;
		
        //Se agrega el nombre de la variable
        String vals = var.toString();
        lista_de_elementos.add(new proyecto1_oc1_202010770.lista(vals));
        double numero = 0.0;
        Scanner scanner = new Scanner(datos_en_lista);
        if(tipo.toString().equals("double")){
        
        while (scanner.hasNext()) {
            
            String numeroStr = scanner.next();
            numero = Double.parseDouble(numeroStr);
            for (proyecto1_oc1_202010770.lista elemento : lista_de_elementos) {
                if(elemento.variable.equals(vals)){
                    elemento.agregarElemento(tipo.toString(),vals, numero);
                }
                
            }
        }}else{
        while (scanner.hasNext()) {
            
            String numeroStr = scanner.next();
            
           
            for (proyecto1_oc1_202010770.lista elemento : lista_de_elementos) {
                if(elemento.variable.equals(vals)){
                    elemento.agregarElemento(tipo.toString(),vals, numeroStr);
                }
                
            }
        }
        }

        //Se limpia la variable con los datos
        datos_en_lista = "";


              CUP$sintactical$result = parser.getSymbolFactory().newSymbol("lista",22, ((java_cup.runtime.Symbol)CUP$sintactical$stack.elementAt(CUP$sintactical$top-13)), ((java_cup.runtime.Symbol)CUP$sintactical$stack.peek()), RESULT);
            }
          return CUP$sintactical$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 41: // tipo_de_dato ::= DOUBLE 
            {
              Object RESULT =null;
		RESULT = "double"; 
              CUP$sintactical$result = parser.getSymbolFactory().newSymbol("tipo_de_dato",20, ((java_cup.runtime.Symbol)CUP$sintactical$stack.peek()), ((java_cup.runtime.Symbol)CUP$sintactical$stack.peek()), RESULT);
            }
          return CUP$sintactical$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 42: // tipo_de_dato ::= CADENA 
            {
              Object RESULT =null;
		RESULT = "cadena"; 
              CUP$sintactical$result = parser.getSymbolFactory().newSymbol("tipo_de_dato",20, ((java_cup.runtime.Symbol)CUP$sintactical$stack.peek()), ((java_cup.runtime.Symbol)CUP$sintactical$stack.peek()), RESULT);
            }
          return CUP$sintactical$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 43: // datos_de_lista ::= datos_de_lista COMMA dato 
            {
              Object RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$sintactical$stack.elementAt(CUP$sintactical$top-2)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$sintactical$stack.elementAt(CUP$sintactical$top-2)).right;
		Object a = (Object)((java_cup.runtime.Symbol) CUP$sintactical$stack.elementAt(CUP$sintactical$top-2)).value;
		int bleft = ((java_cup.runtime.Symbol)CUP$sintactical$stack.peek()).left;
		int bright = ((java_cup.runtime.Symbol)CUP$sintactical$stack.peek()).right;
		Object b = (Object)((java_cup.runtime.Symbol) CUP$sintactical$stack.peek()).value;
		 datos_en_lista += " "+b.toString().replace(" ", "Ñ"); RESULT = b.toString().replace(" ", "Ñ");;
              CUP$sintactical$result = parser.getSymbolFactory().newSymbol("datos_de_lista",23, ((java_cup.runtime.Symbol)CUP$sintactical$stack.elementAt(CUP$sintactical$top-2)), ((java_cup.runtime.Symbol)CUP$sintactical$stack.peek()), RESULT);
            }
          return CUP$sintactical$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 44: // datos_de_lista ::= dato 
            {
              Object RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$sintactical$stack.peek()).left;
		int aright = ((java_cup.runtime.Symbol)CUP$sintactical$stack.peek()).right;
		Object a = (Object)((java_cup.runtime.Symbol) CUP$sintactical$stack.peek()).value;
		datos_en_lista = " "+a.toString().replace(" ", "Ñ");  RESULT = a.toString().replace(" ", "Ñ");;
              CUP$sintactical$result = parser.getSymbolFactory().newSymbol("datos_de_lista",23, ((java_cup.runtime.Symbol)CUP$sintactical$stack.peek()), ((java_cup.runtime.Symbol)CUP$sintactical$stack.peek()), RESULT);
            }
          return CUP$sintactical$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 45: // dato ::= CADENAS 
            {
              Object RESULT =null;
		int datosleft = ((java_cup.runtime.Symbol)CUP$sintactical$stack.peek()).left;
		int datosright = ((java_cup.runtime.Symbol)CUP$sintactical$stack.peek()).right;
		String datos = (String)((java_cup.runtime.Symbol) CUP$sintactical$stack.peek()).value;
		
        String salida = "";
        if (datos.toString().startsWith("\"") && datos.toString().endsWith("\"")) {
            // Quitar las comillas usando substring
            salida = datos.toString().substring(1, datos.length() - 1);
            actual = salida;
            RESULT = salida;
        }else{
        actual = datos.toString();
        RESULT = datos.toString();
        } 
              CUP$sintactical$result = parser.getSymbolFactory().newSymbol("dato",21, ((java_cup.runtime.Symbol)CUP$sintactical$stack.peek()), ((java_cup.runtime.Symbol)CUP$sintactical$stack.peek()), RESULT);
            }
          return CUP$sintactical$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 46: // dato ::= NUMERO_FLOTANTE 
            {
              Object RESULT =null;
		int datosleft = ((java_cup.runtime.Symbol)CUP$sintactical$stack.peek()).left;
		int datosright = ((java_cup.runtime.Symbol)CUP$sintactical$stack.peek()).right;
		String datos = (String)((java_cup.runtime.Symbol) CUP$sintactical$stack.peek()).value;
		RESULT = datos.toString(); 
              CUP$sintactical$result = parser.getSymbolFactory().newSymbol("dato",21, ((java_cup.runtime.Symbol)CUP$sintactical$stack.peek()), ((java_cup.runtime.Symbol)CUP$sintactical$stack.peek()), RESULT);
            }
          return CUP$sintactical$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 47: // dato ::= NUMERO_ENTERO 
            {
              Object RESULT =null;
		int datosleft = ((java_cup.runtime.Symbol)CUP$sintactical$stack.peek()).left;
		int datosright = ((java_cup.runtime.Symbol)CUP$sintactical$stack.peek()).right;
		String datos = (String)((java_cup.runtime.Symbol) CUP$sintactical$stack.peek()).value;
		RESULT = datos.toString(); 
              CUP$sintactical$result = parser.getSymbolFactory().newSymbol("dato",21, ((java_cup.runtime.Symbol)CUP$sintactical$stack.peek()), ((java_cup.runtime.Symbol)CUP$sintactical$stack.peek()), RESULT);
            }
          return CUP$sintactical$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 48: // dato ::= VARIABLE 
            {
              Object RESULT =null;
		int datosleft = ((java_cup.runtime.Symbol)CUP$sintactical$stack.peek()).left;
		int datosright = ((java_cup.runtime.Symbol)CUP$sintactical$stack.peek()).right;
		String datos = (String)((java_cup.runtime.Symbol) CUP$sintactical$stack.peek()).value;
		
        String variable_a_buscar = datos.toString();
        for (proyecto1_oc1_202010770.tabla_de_simbolos simbolo : tabla_simbolos){
            if(variable_a_buscar.equals(simbolo.variable)){
            actual = simbolo.dato.toString();
            RESULT = simbolo.dato;
            break;
            }
        }
    
              CUP$sintactical$result = parser.getSymbolFactory().newSymbol("dato",21, ((java_cup.runtime.Symbol)CUP$sintactical$stack.peek()), ((java_cup.runtime.Symbol)CUP$sintactical$stack.peek()), RESULT);
            }
          return CUP$sintactical$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 49: // dato ::= SUMA PARENTESIS_ABIERTO dato COMMA dato PARENTESIS_CERRADO 
            {
              Object RESULT =null;
		int izqleft = ((java_cup.runtime.Symbol)CUP$sintactical$stack.elementAt(CUP$sintactical$top-3)).left;
		int izqright = ((java_cup.runtime.Symbol)CUP$sintactical$stack.elementAt(CUP$sintactical$top-3)).right;
		Object izq = (Object)((java_cup.runtime.Symbol) CUP$sintactical$stack.elementAt(CUP$sintactical$top-3)).value;
		int derleft = ((java_cup.runtime.Symbol)CUP$sintactical$stack.elementAt(CUP$sintactical$top-1)).left;
		int derright = ((java_cup.runtime.Symbol)CUP$sintactical$stack.elementAt(CUP$sintactical$top-1)).right;
		Object der = (Object)((java_cup.runtime.Symbol) CUP$sintactical$stack.elementAt(CUP$sintactical$top-1)).value;
		
    RESULT = operaciones.Suma(izq.toString(), der.toString());
    
              CUP$sintactical$result = parser.getSymbolFactory().newSymbol("dato",21, ((java_cup.runtime.Symbol)CUP$sintactical$stack.elementAt(CUP$sintactical$top-5)), ((java_cup.runtime.Symbol)CUP$sintactical$stack.peek()), RESULT);
            }
          return CUP$sintactical$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 50: // dato ::= RESTA PARENTESIS_ABIERTO dato COMMA dato PARENTESIS_CERRADO 
            {
              Object RESULT =null;
		int izqleft = ((java_cup.runtime.Symbol)CUP$sintactical$stack.elementAt(CUP$sintactical$top-3)).left;
		int izqright = ((java_cup.runtime.Symbol)CUP$sintactical$stack.elementAt(CUP$sintactical$top-3)).right;
		Object izq = (Object)((java_cup.runtime.Symbol) CUP$sintactical$stack.elementAt(CUP$sintactical$top-3)).value;
		int derleft = ((java_cup.runtime.Symbol)CUP$sintactical$stack.elementAt(CUP$sintactical$top-1)).left;
		int derright = ((java_cup.runtime.Symbol)CUP$sintactical$stack.elementAt(CUP$sintactical$top-1)).right;
		Object der = (Object)((java_cup.runtime.Symbol) CUP$sintactical$stack.elementAt(CUP$sintactical$top-1)).value;
		
    RESULT = operaciones.Resta(izq.toString(), der.toString());
    
              CUP$sintactical$result = parser.getSymbolFactory().newSymbol("dato",21, ((java_cup.runtime.Symbol)CUP$sintactical$stack.elementAt(CUP$sintactical$top-5)), ((java_cup.runtime.Symbol)CUP$sintactical$stack.peek()), RESULT);
            }
          return CUP$sintactical$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 51: // dato ::= MULTIPLICACION PARENTESIS_ABIERTO dato COMMA dato PARENTESIS_CERRADO 
            {
              Object RESULT =null;
		int izqleft = ((java_cup.runtime.Symbol)CUP$sintactical$stack.elementAt(CUP$sintactical$top-3)).left;
		int izqright = ((java_cup.runtime.Symbol)CUP$sintactical$stack.elementAt(CUP$sintactical$top-3)).right;
		Object izq = (Object)((java_cup.runtime.Symbol) CUP$sintactical$stack.elementAt(CUP$sintactical$top-3)).value;
		int derleft = ((java_cup.runtime.Symbol)CUP$sintactical$stack.elementAt(CUP$sintactical$top-1)).left;
		int derright = ((java_cup.runtime.Symbol)CUP$sintactical$stack.elementAt(CUP$sintactical$top-1)).right;
		Object der = (Object)((java_cup.runtime.Symbol) CUP$sintactical$stack.elementAt(CUP$sintactical$top-1)).value;
		
    RESULT = operaciones.Multiplicacion(izq.toString(), der.toString());
    
              CUP$sintactical$result = parser.getSymbolFactory().newSymbol("dato",21, ((java_cup.runtime.Symbol)CUP$sintactical$stack.elementAt(CUP$sintactical$top-5)), ((java_cup.runtime.Symbol)CUP$sintactical$stack.peek()), RESULT);
            }
          return CUP$sintactical$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 52: // dato ::= DIVISION PARENTESIS_ABIERTO dato COMMA dato PARENTESIS_CERRADO 
            {
              Object RESULT =null;
		int izqleft = ((java_cup.runtime.Symbol)CUP$sintactical$stack.elementAt(CUP$sintactical$top-3)).left;
		int izqright = ((java_cup.runtime.Symbol)CUP$sintactical$stack.elementAt(CUP$sintactical$top-3)).right;
		Object izq = (Object)((java_cup.runtime.Symbol) CUP$sintactical$stack.elementAt(CUP$sintactical$top-3)).value;
		int derleft = ((java_cup.runtime.Symbol)CUP$sintactical$stack.elementAt(CUP$sintactical$top-1)).left;
		int derright = ((java_cup.runtime.Symbol)CUP$sintactical$stack.elementAt(CUP$sintactical$top-1)).right;
		Object der = (Object)((java_cup.runtime.Symbol) CUP$sintactical$stack.elementAt(CUP$sintactical$top-1)).value;
		
    RESULT = operaciones.Division(izq.toString(), der.toString());
    
              CUP$sintactical$result = parser.getSymbolFactory().newSymbol("dato",21, ((java_cup.runtime.Symbol)CUP$sintactical$stack.elementAt(CUP$sintactical$top-5)), ((java_cup.runtime.Symbol)CUP$sintactical$stack.peek()), RESULT);
            }
          return CUP$sintactical$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 53: // dato ::= MODULO PARENTESIS_ABIERTO dato COMMA dato PARENTESIS_CERRADO 
            {
              Object RESULT =null;
		int izqleft = ((java_cup.runtime.Symbol)CUP$sintactical$stack.elementAt(CUP$sintactical$top-3)).left;
		int izqright = ((java_cup.runtime.Symbol)CUP$sintactical$stack.elementAt(CUP$sintactical$top-3)).right;
		Object izq = (Object)((java_cup.runtime.Symbol) CUP$sintactical$stack.elementAt(CUP$sintactical$top-3)).value;
		int derleft = ((java_cup.runtime.Symbol)CUP$sintactical$stack.elementAt(CUP$sintactical$top-1)).left;
		int derright = ((java_cup.runtime.Symbol)CUP$sintactical$stack.elementAt(CUP$sintactical$top-1)).right;
		Object der = (Object)((java_cup.runtime.Symbol) CUP$sintactical$stack.elementAt(CUP$sintactical$top-1)).value;
		
    RESULT = operaciones.Modulo(izq.toString(), der.toString());
    
              CUP$sintactical$result = parser.getSymbolFactory().newSymbol("dato",21, ((java_cup.runtime.Symbol)CUP$sintactical$stack.elementAt(CUP$sintactical$top-5)), ((java_cup.runtime.Symbol)CUP$sintactical$stack.peek()), RESULT);
            }
          return CUP$sintactical$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 54: // NT$4 ::= 
            {
              Object RESULT =null;
operacion_estadistica = "media";
              CUP$sintactical$result = parser.getSymbolFactory().newSymbol("NT$4",32, ((java_cup.runtime.Symbol)CUP$sintactical$stack.peek()), RESULT);
            }
          return CUP$sintactical$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 55: // dato ::= MEDIA NT$4 PARENTESIS_ABIERTO listas_operaciones PARENTESIS_CERRADO 
            {
              Object RESULT =null;
              // propagate RESULT from NT$4
                RESULT = (Object) ((java_cup.runtime.Symbol) CUP$sintactical$stack.elementAt(CUP$sintactical$top-3)).value;
		int resultadoleft = ((java_cup.runtime.Symbol)CUP$sintactical$stack.elementAt(CUP$sintactical$top-1)).left;
		int resultadoright = ((java_cup.runtime.Symbol)CUP$sintactical$stack.elementAt(CUP$sintactical$top-1)).right;
		Object resultado = (Object)((java_cup.runtime.Symbol) CUP$sintactical$stack.elementAt(CUP$sintactical$top-1)).value;
		RESULT = resultado;
              CUP$sintactical$result = parser.getSymbolFactory().newSymbol("dato",21, ((java_cup.runtime.Symbol)CUP$sintactical$stack.elementAt(CUP$sintactical$top-4)), ((java_cup.runtime.Symbol)CUP$sintactical$stack.peek()), RESULT);
            }
          return CUP$sintactical$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 56: // NT$5 ::= 
            {
              Object RESULT =null;
operacion_estadistica = "mediana";
              CUP$sintactical$result = parser.getSymbolFactory().newSymbol("NT$5",33, ((java_cup.runtime.Symbol)CUP$sintactical$stack.peek()), RESULT);
            }
          return CUP$sintactical$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 57: // dato ::= MEDIANA NT$5 PARENTESIS_ABIERTO listas_operaciones PARENTESIS_CERRADO 
            {
              Object RESULT =null;
              // propagate RESULT from NT$5
                RESULT = (Object) ((java_cup.runtime.Symbol) CUP$sintactical$stack.elementAt(CUP$sintactical$top-3)).value;
		int resultadoleft = ((java_cup.runtime.Symbol)CUP$sintactical$stack.elementAt(CUP$sintactical$top-1)).left;
		int resultadoright = ((java_cup.runtime.Symbol)CUP$sintactical$stack.elementAt(CUP$sintactical$top-1)).right;
		Object resultado = (Object)((java_cup.runtime.Symbol) CUP$sintactical$stack.elementAt(CUP$sintactical$top-1)).value;
		RESULT = resultado;
              CUP$sintactical$result = parser.getSymbolFactory().newSymbol("dato",21, ((java_cup.runtime.Symbol)CUP$sintactical$stack.elementAt(CUP$sintactical$top-4)), ((java_cup.runtime.Symbol)CUP$sintactical$stack.peek()), RESULT);
            }
          return CUP$sintactical$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 58: // NT$6 ::= 
            {
              Object RESULT =null;
operacion_estadistica = "moda";
              CUP$sintactical$result = parser.getSymbolFactory().newSymbol("NT$6",34, ((java_cup.runtime.Symbol)CUP$sintactical$stack.peek()), RESULT);
            }
          return CUP$sintactical$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 59: // dato ::= MODA NT$6 PARENTESIS_ABIERTO listas_operaciones PARENTESIS_CERRADO 
            {
              Object RESULT =null;
              // propagate RESULT from NT$6
                RESULT = (Object) ((java_cup.runtime.Symbol) CUP$sintactical$stack.elementAt(CUP$sintactical$top-3)).value;
		int resultadoleft = ((java_cup.runtime.Symbol)CUP$sintactical$stack.elementAt(CUP$sintactical$top-1)).left;
		int resultadoright = ((java_cup.runtime.Symbol)CUP$sintactical$stack.elementAt(CUP$sintactical$top-1)).right;
		Object resultado = (Object)((java_cup.runtime.Symbol) CUP$sintactical$stack.elementAt(CUP$sintactical$top-1)).value;
		RESULT = resultado;
              CUP$sintactical$result = parser.getSymbolFactory().newSymbol("dato",21, ((java_cup.runtime.Symbol)CUP$sintactical$stack.elementAt(CUP$sintactical$top-4)), ((java_cup.runtime.Symbol)CUP$sintactical$stack.peek()), RESULT);
            }
          return CUP$sintactical$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 60: // NT$7 ::= 
            {
              Object RESULT =null;
operacion_estadistica = "varianza";
              CUP$sintactical$result = parser.getSymbolFactory().newSymbol("NT$7",35, ((java_cup.runtime.Symbol)CUP$sintactical$stack.peek()), RESULT);
            }
          return CUP$sintactical$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 61: // dato ::= VARIANZA NT$7 PARENTESIS_ABIERTO listas_operaciones PARENTESIS_CERRADO 
            {
              Object RESULT =null;
              // propagate RESULT from NT$7
                RESULT = (Object) ((java_cup.runtime.Symbol) CUP$sintactical$stack.elementAt(CUP$sintactical$top-3)).value;
		int resultadoleft = ((java_cup.runtime.Symbol)CUP$sintactical$stack.elementAt(CUP$sintactical$top-1)).left;
		int resultadoright = ((java_cup.runtime.Symbol)CUP$sintactical$stack.elementAt(CUP$sintactical$top-1)).right;
		Object resultado = (Object)((java_cup.runtime.Symbol) CUP$sintactical$stack.elementAt(CUP$sintactical$top-1)).value;
		RESULT = resultado;
              CUP$sintactical$result = parser.getSymbolFactory().newSymbol("dato",21, ((java_cup.runtime.Symbol)CUP$sintactical$stack.elementAt(CUP$sintactical$top-4)), ((java_cup.runtime.Symbol)CUP$sintactical$stack.peek()), RESULT);
            }
          return CUP$sintactical$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 62: // NT$8 ::= 
            {
              Object RESULT =null;
operacion_estadistica = "maximo";
              CUP$sintactical$result = parser.getSymbolFactory().newSymbol("NT$8",36, ((java_cup.runtime.Symbol)CUP$sintactical$stack.peek()), RESULT);
            }
          return CUP$sintactical$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 63: // dato ::= MAX NT$8 PARENTESIS_ABIERTO listas_operaciones PARENTESIS_CERRADO 
            {
              Object RESULT =null;
              // propagate RESULT from NT$8
                RESULT = (Object) ((java_cup.runtime.Symbol) CUP$sintactical$stack.elementAt(CUP$sintactical$top-3)).value;
		int resultadoleft = ((java_cup.runtime.Symbol)CUP$sintactical$stack.elementAt(CUP$sintactical$top-1)).left;
		int resultadoright = ((java_cup.runtime.Symbol)CUP$sintactical$stack.elementAt(CUP$sintactical$top-1)).right;
		Object resultado = (Object)((java_cup.runtime.Symbol) CUP$sintactical$stack.elementAt(CUP$sintactical$top-1)).value;
		RESULT = resultado;
              CUP$sintactical$result = parser.getSymbolFactory().newSymbol("dato",21, ((java_cup.runtime.Symbol)CUP$sintactical$stack.elementAt(CUP$sintactical$top-4)), ((java_cup.runtime.Symbol)CUP$sintactical$stack.peek()), RESULT);
            }
          return CUP$sintactical$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 64: // NT$9 ::= 
            {
              Object RESULT =null;
operacion_estadistica = "minimo";
              CUP$sintactical$result = parser.getSymbolFactory().newSymbol("NT$9",37, ((java_cup.runtime.Symbol)CUP$sintactical$stack.peek()), RESULT);
            }
          return CUP$sintactical$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 65: // dato ::= MIN NT$9 PARENTESIS_ABIERTO listas_operaciones PARENTESIS_CERRADO 
            {
              Object RESULT =null;
              // propagate RESULT from NT$9
                RESULT = (Object) ((java_cup.runtime.Symbol) CUP$sintactical$stack.elementAt(CUP$sintactical$top-3)).value;
		int resultadoleft = ((java_cup.runtime.Symbol)CUP$sintactical$stack.elementAt(CUP$sintactical$top-1)).left;
		int resultadoright = ((java_cup.runtime.Symbol)CUP$sintactical$stack.elementAt(CUP$sintactical$top-1)).right;
		Object resultado = (Object)((java_cup.runtime.Symbol) CUP$sintactical$stack.elementAt(CUP$sintactical$top-1)).value;
		RESULT = resultado;
              CUP$sintactical$result = parser.getSymbolFactory().newSymbol("dato",21, ((java_cup.runtime.Symbol)CUP$sintactical$stack.elementAt(CUP$sintactical$top-4)), ((java_cup.runtime.Symbol)CUP$sintactical$stack.peek()), RESULT);
            }
          return CUP$sintactical$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 66: // listas_operaciones ::= ARROBA VARIABLE 
            {
              Object RESULT =null;
		int varleft = ((java_cup.runtime.Symbol)CUP$sintactical$stack.peek()).left;
		int varright = ((java_cup.runtime.Symbol)CUP$sintactical$stack.peek()).right;
		String var = (String)((java_cup.runtime.Symbol) CUP$sintactical$stack.peek()).value;
		
                        for (proyecto1_oc1_202010770.lista lista : lista_de_elementos) {
                            if (lista.variable.equals(var.toString())) {
                            
                            if(operacion_estadistica.equals("media")){
                                    RESULT = lista.la_media();
                                     break;
                                    }
                            
                            }
                            if(operacion_estadistica.equals("mediana")){
                                    RESULT = lista.la_mediana();
                                    break;
                                    }
                            if(operacion_estadistica.equals("moda")){
                                    RESULT = lista.la_moda();
                                    break;
                                    }
                            if(operacion_estadistica.equals("varianza")){
                                    RESULT = lista.la_varianza();
                                    break;
                                    }
                            if(operacion_estadistica.equals("maximo")){
                                    RESULT = lista.la_maxima();
                                    break;
                                    }
                            if(operacion_estadistica.equals("minimo")){
                                    RESULT = lista.la_minima();
                                    break;
                                    }
                           
                        }
                        
              CUP$sintactical$result = parser.getSymbolFactory().newSymbol("listas_operaciones",19, ((java_cup.runtime.Symbol)CUP$sintactical$stack.elementAt(CUP$sintactical$top-1)), ((java_cup.runtime.Symbol)CUP$sintactical$stack.peek()), RESULT);
            }
          return CUP$sintactical$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 67: // listas_operaciones ::= CORCHETE_ABIERTO listas_operacion CORCHETE_CERRADO 
            {
              Object RESULT =null;
		
                        
                        boolean es_temporal = false;
                        for (proyecto1_oc1_202010770.lista lista : lista_de_elementos) {
                            if (lista.variable.equals("Tremdo")) {
                            es_temporal = true;
                            break; // Terminamos la búsqueda una vez que encontramos la variable
                            }
                        }
                        if(!es_temporal){
                        lista_de_elementos.add(new proyecto1_oc1_202010770.lista("Tremdo"));
                        }else{

                            for (proyecto1_oc1_202010770.lista lista : lista_de_elementos) {
                                if (lista.variable.equals("Tremdo")) {
                                lista.lista.clear();
                                }
                            }
                        }
                        
                        double numero = 0.0;
                        Scanner scanner = new Scanner(datos_en_lista);
                        while (scanner.hasNext()) {
                            String numeroStr = scanner.next();
                            numero = Double.parseDouble(numeroStr);
                            for (proyecto1_oc1_202010770.lista elemento : lista_de_elementos) {
                                if(elemento.variable.equals("Tremdo")){
                                    elemento.agregarElemento("double","Tremdo", numero);
                            }
                            //System.out.println("Gotica");
                            //elemento.mostrarElementos();
                            //System.out.println("Culona");
                            
                            }

                        }
                        datos_en_lista = "";
                        for (proyecto1_oc1_202010770.lista elemento : lista_de_elementos) {
                                if(elemento.variable.equals("Tremdo")){
                                    if(operacion_estadistica.equals("media")){
                                    RESULT = elemento.la_media();
                                    break;
                                    }
                                if(operacion_estadistica.equals("mediana")){
                                    RESULT = elemento.la_mediana();
                                break;    
                                }
                                if(operacion_estadistica.equals("moda")){
                                    RESULT = elemento.la_moda();
                                break;    
                                }
                                if(operacion_estadistica.equals("varianza")){
                                    RESULT = elemento.la_varianza();
                                    break;
                                    }
                                if(operacion_estadistica.equals("maximo")){
                                    RESULT = elemento.la_maxima();
                                    break;
                                    }
                                if(operacion_estadistica.equals("minimo")){
                                    RESULT = elemento.la_minima();
                                    break;
                                    }
                                    
                            
                                    
                            
                        }}

                             

              CUP$sintactical$result = parser.getSymbolFactory().newSymbol("listas_operaciones",19, ((java_cup.runtime.Symbol)CUP$sintactical$stack.elementAt(CUP$sintactical$top-2)), ((java_cup.runtime.Symbol)CUP$sintactical$stack.peek()), RESULT);
            }
          return CUP$sintactical$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 68: // listas_operacion ::= listas_operacion COMMA dato 
            {
              Object RESULT =null;
		int datleft = ((java_cup.runtime.Symbol)CUP$sintactical$stack.peek()).left;
		int datright = ((java_cup.runtime.Symbol)CUP$sintactical$stack.peek()).right;
		Object dat = (Object)((java_cup.runtime.Symbol) CUP$sintactical$stack.peek()).value;
		datos_en_lista += " "+dat.toString();
              CUP$sintactical$result = parser.getSymbolFactory().newSymbol("listas_operacion",18, ((java_cup.runtime.Symbol)CUP$sintactical$stack.elementAt(CUP$sintactical$top-2)), ((java_cup.runtime.Symbol)CUP$sintactical$stack.peek()), RESULT);
            }
          return CUP$sintactical$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 69: // listas_operacion ::= dato 
            {
              Object RESULT =null;
		int datleft = ((java_cup.runtime.Symbol)CUP$sintactical$stack.peek()).left;
		int datright = ((java_cup.runtime.Symbol)CUP$sintactical$stack.peek()).right;
		Object dat = (Object)((java_cup.runtime.Symbol) CUP$sintactical$stack.peek()).value;
		datos_en_lista = " "+dat.toString();
              CUP$sintactical$result = parser.getSymbolFactory().newSymbol("listas_operacion",18, ((java_cup.runtime.Symbol)CUP$sintactical$stack.peek()), ((java_cup.runtime.Symbol)CUP$sintactical$stack.peek()), RESULT);
            }
          return CUP$sintactical$result;

          /* . . . . . .*/
          default:
            throw new Exception(
               "Invalid action number "+CUP$sintactical$act_num+"found in internal parse table");

        }
    } /* end of method */

  /** Method splitting the generated action code into several parts. */
  public final java_cup.runtime.Symbol CUP$sintactical$do_action(
    int                        CUP$sintactical$act_num,
    java_cup.runtime.lr_parser CUP$sintactical$parser,
    java.util.Stack            CUP$sintactical$stack,
    int                        CUP$sintactical$top)
    throws java.lang.Exception
    {
              return CUP$sintactical$do_action_part00000000(
                               CUP$sintactical$act_num,
                               CUP$sintactical$parser,
                               CUP$sintactical$stack,
                               CUP$sintactical$top);
    }
}

}

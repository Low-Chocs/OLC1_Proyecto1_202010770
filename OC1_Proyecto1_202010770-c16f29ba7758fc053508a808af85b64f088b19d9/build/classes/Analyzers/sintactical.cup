package Analyzers ;
import java_cup.runtime.*;
import java.util.ArrayList;
import proyecto1_oc1_202010770.tabla_de_simbolos;
import proyecto1_oc1_202010770.operaciones_aritmeticas;
import proyecto1_oc1_202010770.Impresion;
import proyecto1_oc1_202010770.lista;
import java.util.Scanner;
import proyecto1_oc1_202010770.Graficar;
parser code

{:
    public ArrayList<proyecto1_oc1_202010770.tabla_de_simbolos> tabla_simbolos = new ArrayList<>();
    public ArrayList<proyecto1_oc1_202010770.lista> lista_de_elementos = new ArrayList<>();
    public proyecto1_oc1_202010770.operaciones_aritmeticas operaciones = new operaciones_aritmeticas();
    public proyecto1_oc1_202010770.Impresion impresion = new Impresion();
    public String actual = "";
    public String datos_en_lista = "";
    public String operacion_estadistica = "";
    public String operacion_grafica ="";
    proyecto1_oc1_202010770.Graficar graficals = new proyecto1_oc1_202010770.Graficar();
    public String titulo_grafica = "";
    public String titulo_x_grafica = "";
    public String titulo_y_grafica = "";
    public String variable_en_x = "";
    public String variable_en_y = "";
    public String titulo_label = "";
    public String valor_de_pies = "";
 
    public int num_global = 0;
    public void syntax_error(Symbol s){
        System.out.println("Error Sintactico: "+ s.value +" Linea "+(s.right+1)+" columna "+(s.left+1)+"\n"  );
    }

    public void unrecovered_syntax_error(Symbol s) throws java.lang.Exception{ 
        System.out.println("Error de sintaxis no se pudo terminar de analizar: "+ s.value +" Linea "+(s.right+1)+" columna "+(s.left+1)+"\n" );
        
}
:}

terminal String VAR, VARIABLE, DOUBLE, CADENA, ARREGLO, ARROBA;
terminal String DOS_PUNTOS, SLASH_MENOR, SLASH_MAYOR, DIAGONAL, COMMA, PARENTESIS_ABIERTO, PARENTESIS_CERRADO, CORCHETE_ABIERTO, CORCHETE_CERRADO;
terminal String SUMA, RESTA, MULTIPLICACION, DIVISION, MODULO, MEDIA, MEDIANA, MODA, VARIANZA, MAX, MIN; 
terminal String CONSOLE, PRINT, IGUAL, COLUMN, END, PROGRAM, CADENAS, NUMERO_FLOTANTE, NUMERO_ENTERO, PUNTO_Y_COMA;
terminal String EXEC, TITULO, EJE_X, EJE_Y, TITULO_X, TITULO_Y, VALUES, LABEL, BARRAS, PIE, LINEA, HISTOGRAM, BARRAS_2, LINEA_2, PIE_2;

non terminal inicio, nueva_lista_graficas, set_graficas, grafica_histograma, valores_pie,grafica_pie, grafica_linea, label_pie, titulo_x,titulo_y, eje_x, eje_y, lista_grafica,ultima_asignacion, graficar, grafica_barras, asignacion_titulo, instruccion, lista_de_instrucciones, asignacion, listas_operacion, listas_operaciones, tipo_de_dato, dato, lista, datos_de_lista, impresiones, mas_listas, datos_de_impresion ,impresion_de_la_lista;


start with inicio;

inicio ::= {:lista_de_elementos.add(new proyecto1_oc1_202010770.lista("char_temp"));lista_de_elementos.add(new proyecto1_oc1_202010770.lista("double_temp"));:} 
        PROGRAM instruccion END PROGRAM{:RESULT="Se pudo!";:}

        |error;

instruccion ::= lista_de_instrucciones instruccion
                |lista_de_instrucciones;

lista_de_instrucciones ::= asignacion
                        |lista
                        |impresiones
                        |graficar
                        ;


graficar ::= grafica_barras
            | grafica_pie
            | grafica_linea
            | grafica_histograma
            ;

grafica_barras ::= BARRAS {:
for (proyecto1_oc1_202010770.lista elemento : lista_de_elementos) {
                if(elemento.variable.equals("char_temp")){
                   //elemento.refresh_list();
}
}

for (proyecto1_oc1_202010770.lista elemento : lista_de_elementos) {
                if(elemento.variable.equals("double_temp")){
                    //elemento.refresh_list();
}
}



:} PARENTESIS_ABIERTO set_graficas:var  EXEC BARRAS_2 END PUNTO_Y_COMA PARENTESIS_CERRADO END PUNTO_Y_COMA{:

proyecto1_oc1_202010770.lista lista_double = null;
for (proyecto1_oc1_202010770.lista elemento : lista_de_elementos) {
               
                    if(elemento.variable.equals(variable_en_x)){
                        System.out.println("vamos bien");
                        lista_double = elemento;
                        //lista_double.mostrarElementos();
                        break;
                    }
}      

proyecto1_oc1_202010770.lista lista_string = null;
for (proyecto1_oc1_202010770.lista elemento : lista_de_elementos) {
               
                    if(elemento.variable.equals(variable_en_y)){
                       System.out.println("vamos bie2n");
                        lista_string = elemento;
                        //lista_string.mostrarElementos();
                       
                        break;
                    }
}
System.out.println("El valor es: "+ 1);

graficals.barras(titulo_grafica, titulo_x_grafica, titulo_x_grafica,lista_double.lista, lista_string.lista);
RESULT= "Impresion";
:};

set_graficas ::= set_graficas nueva_lista_graficas {:RESULT ="O";:}
                |nueva_lista_graficas {:RESULT ="O";:};

nueva_lista_graficas ::= asignacion_titulo:titulo {:titulo_grafica = titulo.toString(); RESULT= "VOY";:} 
                        |eje_x:variable_x  {: variable_en_x= variable_x.toString(); RESULT= "VOY";:}
                        |eje_y:variable_y {:variable_en_y = variable_y.toString(); RESULT= "VOY";:}
                        |titulo_x:title_x {:titulo_x_grafica = title_x.toString();RESULT= "VOY";:}  
                        |titulo_y:title_y {:titulo_y_grafica = title_y.toString();RESULT= "VOY";:}
                        |label_pie:labeles {:titulo_label = labeles.toString();:}
                        |valores_pie:valor_variable {:valor_de_pies = valor_variable.toString();:};






grafica_pie ::= PIE{:

for (proyecto1_oc1_202010770.lista elemento : lista_de_elementos) {
                if(elemento.variable.equals("char_temp")){
                   elemento.refresh_list();
}
}

for (proyecto1_oc1_202010770.lista elemento : lista_de_elementos) {
                if(elemento.variable.equals("double_temp")){
                    elemento.refresh_list();
}
}



:} PARENTESIS_ABIERTO set_graficas  EXEC PIE_2 END PUNTO_Y_COMA PARENTESIS_CERRADO END PUNTO_Y_COMA{:

proyecto1_oc1_202010770.lista lista_double = null;
proyecto1_oc1_202010770.lista lista_string = null;
for (proyecto1_oc1_202010770.lista elemento : lista_de_elementos) {
               
                    if(elemento.variable.equals(titulo_label)){
           
                        lista_string = elemento;
                        
                        break;
                    }
}  

for (proyecto1_oc1_202010770.lista elemento : lista_de_elementos) {
               
                    if(elemento.variable.equals(valor_de_pies)){
                        
                        lista_double = elemento;
                        
                        break;
                    }
}  
graficals.Pie(titulo_grafica, lista_double.lista, lista_string.lista);
RESULT= "AS";
:};

valores_pie ::= VALUES DOS_PUNTOS DOS_PUNTOS DOUBLE {:operacion_grafica= "double";:} IGUAL lista_grafica:valor END PUNTO_Y_COMA {:RESULT = valor.toString();:};
label_pie ::= LABEL DOS_PUNTOS DOS_PUNTOS CADENA {:operacion_grafica= "cadena";:} IGUAL lista_grafica:valor  END PUNTO_Y_COMA {: RESULT = valor.toString();:};

asignacion_titulo ::= TITULO DOS_PUNTOS DOS_PUNTOS CADENA IGUAL  dato:resultado END PUNTO_Y_COMA {:RESULT = resultado.toString();:};
eje_x ::= EJE_X DOS_PUNTOS DOS_PUNTOS CADENA {:operacion_grafica= "cadena";:} IGUAL lista_grafica:b END PUNTO_Y_COMA {:RESULT=b;:};
eje_y ::= EJE_Y DOS_PUNTOS DOS_PUNTOS DOUBLE {:operacion_grafica= "double";:} IGUAL lista_grafica:b END PUNTO_Y_COMA {:RESULT=b;:};




lista_grafica ::= ARROBA VARIABLE:var {:RESULT = var;:}
               |CORCHETE_ABIERTO ultima_asignacion CORCHETE_CERRADO{:


String vals = "char_temp";
lista_de_elementos.add(new proyecto1_oc1_202010770.lista(vals));
double numero = 0.0;
Scanner scanner = new Scanner(datos_en_lista);


while (scanner.hasNext()) {
            
            String numeroStr = scanner.next();
            
           
            for (proyecto1_oc1_202010770.lista elemento : lista_de_elementos) {
                if(operacion_grafica.equals("cadena")){
                   
                    if(elemento.variable.equals("char_temp")){
                        elemento.agregarElemento("char[]",vals, numeroStr.replace("Ñ", " "));
                    }
                }else{
                    if(elemento.variable.equals("double_temp")){
                        elemento.agregarElemento("double",vals, numeroStr.replace("Ñ", " "));
                    }
                }
                
                //elemento.mostrarElementos();
            }
        }
        if(operacion_grafica.equals("cadena")){
           
            RESULT ="char_temp";
            
        }else{
        RESULT ="double_temp";
        }
:} ;
ultima_asignacion ::= ultima_asignacion COMMA dato:data {:datos_en_lista += " "+data.toString().replace(" ", "Ñ");:}
                    |dato:data {:datos_en_lista = data.toString().replace(" ", "Ñ");:};

titulo_x ::= TITULO_X DOS_PUNTOS DOS_PUNTOS CADENA IGUAL dato:data END PUNTO_Y_COMA{:RESULT = data.toString();:};
titulo_y ::= TITULO_Y DOS_PUNTOS DOS_PUNTOS CADENA IGUAL dato:data END PUNTO_Y_COMA{:RESULT = data.toString();:};


grafica_linea ::= LINEA{:
for (proyecto1_oc1_202010770.lista elemento : lista_de_elementos) {
                if(elemento.variable.equals("char_temp")){
                   elemento.refresh_list();
}
}

for (proyecto1_oc1_202010770.lista elemento : lista_de_elementos) {
                if(elemento.variable.equals("double_temp")){
                    elemento.refresh_list();
}
}



:} PARENTESIS_ABIERTO set_graficas EXEC LINEA_2 END PUNTO_Y_COMA PARENTESIS_CERRADO END PUNTO_Y_COMA{:

proyecto1_oc1_202010770.lista lista_double = null;
proyecto1_oc1_202010770.lista lista_string = null;
for (proyecto1_oc1_202010770.lista elemento : lista_de_elementos) {
               
                    if(elemento.variable.equals(variable_en_y)){
           
                        lista_string = elemento;
                        
                        break;
                    }
}  

for (proyecto1_oc1_202010770.lista elemento : lista_de_elementos) {
               
                    if(elemento.variable.equals(variable_en_x)){
                        
                        lista_double = elemento;
                        
                        break;
                    }
}  
graficals.linea(titulo_grafica,titulo_x_grafica, titulo_y_grafica, lista_double.lista, lista_string.lista);
RESULT= "AS";
:};



grafica_histograma ::= HISTOGRAM{:
for (proyecto1_oc1_202010770.lista elemento : lista_de_elementos) {
                if(elemento.variable.equals("char_temp")){
                   elemento.refresh_list();
}
}

for (proyecto1_oc1_202010770.lista elemento : lista_de_elementos) {
                if(elemento.variable.equals("double_temp")){
                    elemento.refresh_list();
}
}



:} PARENTESIS_ABIERTO  set_graficas EXEC HISTOGRAM END PUNTO_Y_COMA PARENTESIS_CERRADO END PUNTO_Y_COMA{:


proyecto1_oc1_202010770.lista lista_double = null;

for (proyecto1_oc1_202010770.lista elemento : lista_de_elementos) {
               
                    if(elemento.variable.equals(valor_de_pies)){
                        
                        lista_double = elemento;
                        
                        break;
                    }
}
graficals.createHistogram(lista_double.lista ,titulo_grafica);
RESULT= "AS";  
:};


impresiones ::= CONSOLE DOS_PUNTOS DOS_PUNTOS PRINT IGUAL datos_de_impresion END PUNTO_Y_COMA {:System.out.println("");:}  
               |CONSOLE DOS_PUNTOS DOS_PUNTOS  COLUMN  IGUAL dato:act {:        
        System.out.println("----------");
        System.out.println(act);
        System.out.println("----------");:} 
        DIAGONAL SLASH_MAYOR impresion_de_la_lista END PUNTO_Y_COMA ;


datos_de_impresion ::= datos_de_impresion COMMA dato:dat {:impresion.imprimir(", "+dat.toString());:}
                    | dato:dat {:impresion.imprimir(dat.toString());:};

impresion_de_la_lista ::= ARROBA VARIABLE:var {:
        for (proyecto1_oc1_202010770.lista elemento : lista_de_elementos) {
            
            if(elemento.variable.equals(var)){
                impresion.imprimir_lista(actual, elemento);
            }        
        }:}
        | CORCHETE_ABIERTO mas_listas CORCHETE_CERRADO;

mas_listas ::= mas_listas COMMA dato:val {://System.out.println(val);:}
            | dato:val {://System.out.println(val);:};

asignacion ::= VAR DOS_PUNTOS tipo_de_dato:a DOS_PUNTOS DOS_PUNTOS VARIABLE:b SLASH_MENOR DIAGONAL dato:c END PUNTO_Y_COMA
    {:

            tabla_simbolos.add(new proyecto1_oc1_202010770.tabla_de_simbolos(a.toString(),b.toString(),c.toString()));
    :};

lista ::= ARREGLO DOS_PUNTOS tipo_de_dato:tipo DOS_PUNTOS DOS_PUNTOS ARROBA VARIABLE:var SLASH_MENOR DIAGONAL CORCHETE_ABIERTO datos_de_lista CORCHETE_CERRADO END PUNTO_Y_COMA
{:
        //Se agrega el nombre de la variable
        String vals = var.toString();
        lista_de_elementos.add(new proyecto1_oc1_202010770.lista(vals));
        double numero = 0.0;
        Scanner scanner = new Scanner(datos_en_lista);
        if(tipo.toString().equals("double")){
        
        while (scanner.hasNext()) {
            
            String numeroStr = scanner.next();
            numero = Double.parseDouble(numeroStr);
            for (proyecto1_oc1_202010770.lista elemento : lista_de_elementos) {
                if(elemento.variable.equals(vals)){
                    elemento.agregarElemento(tipo.toString(),vals, numero);
                }
                
            }
        }}else{
        while (scanner.hasNext()) {
            
            String numeroStr = scanner.next();
            
           
            for (proyecto1_oc1_202010770.lista elemento : lista_de_elementos) {
                if(elemento.variable.equals(vals)){
                    elemento.agregarElemento(tipo.toString(),vals, numeroStr);
                }
                
            }
        }
        }

        //Se limpia la variable con los datos
        datos_en_lista = "";

:}
;

tipo_de_dato ::= DOUBLE{:RESULT = "double"; :}
                | CADENA{:RESULT = "cadena"; :};



datos_de_lista ::= datos_de_lista:a COMMA dato:b {: datos_en_lista += " "+b.toString().replace(" ", "Ñ"); RESULT = b.toString().replace(" ", "Ñ");;:}
                 | dato:a {:datos_en_lista = " "+a.toString().replace(" ", "Ñ");  RESULT = a.toString().replace(" ", "Ñ");;:}
                 ;

dato ::= CADENAS:datos {:
        String salida = "";
        if (datos.toString().startsWith("\"") && datos.toString().endsWith("\"")) {
            // Quitar las comillas usando substring
            salida = datos.toString().substring(1, datos.length() - 1);
            actual = salida;
            RESULT = salida;
        }else{
        actual = datos.toString();
        RESULT = datos.toString();
        } :}
    | NUMERO_FLOTANTE:datos {:RESULT = datos.toString(); :}
    | NUMERO_ENTERO:datos {:RESULT = datos.toString(); :}
    | VARIABLE: datos {:
        String variable_a_buscar = datos.toString();
        for (proyecto1_oc1_202010770.tabla_de_simbolos simbolo : tabla_simbolos){
            if(variable_a_buscar.equals(simbolo.variable)){
            actual = simbolo.dato.toString();
            RESULT = simbolo.dato;
            break;
            }
        }
    :}
    | SUMA PARENTESIS_ABIERTO dato:izq COMMA dato:der PARENTESIS_CERRADO {:
    RESULT = operaciones.Suma(izq.toString(), der.toString());
    :}
    | RESTA PARENTESIS_ABIERTO dato:izq COMMA dato:der PARENTESIS_CERRADO {:
    RESULT = operaciones.Resta(izq.toString(), der.toString());
    :}
    | MULTIPLICACION PARENTESIS_ABIERTO dato:izq COMMA dato:der PARENTESIS_CERRADO {:
    RESULT = operaciones.Multiplicacion(izq.toString(), der.toString());
    :}
    | DIVISION PARENTESIS_ABIERTO dato:izq COMMA dato:der PARENTESIS_CERRADO {:
    RESULT = operaciones.Division(izq.toString(), der.toString());
    :}
    | MODULO PARENTESIS_ABIERTO dato:izq COMMA dato:der PARENTESIS_CERRADO {:
    RESULT = operaciones.Modulo(izq.toString(), der.toString());
    :}

    |MEDIA {:operacion_estadistica = "media";


    for (proyecto1_oc1_202010770.lista elemento : lista_de_elementos) {
                if(elemento.variable.equals("Tremdo")){
                    elemento.refresh_list();
    }
    }


:} PARENTESIS_ABIERTO listas_operaciones:resultado PARENTESIS_CERRADO {:RESULT = resultado;:}
    |MEDIANA {:operacion_estadistica = "mediana";

for (proyecto1_oc1_202010770.lista elemento : lista_de_elementos) {
                if(elemento.variable.equals("Tremdo")){
                    elemento.refresh_list();
}
}



:} PARENTESIS_ABIERTO listas_operaciones:resultado PARENTESIS_CERRADO {:RESULT = resultado;:}
    |MODA {:operacion_estadistica = "moda";


for (proyecto1_oc1_202010770.lista elemento : lista_de_elementos) {
                if(elemento.variable.equals("Tremdo")){
                    elemento.refresh_list();
}
}

:} PARENTESIS_ABIERTO listas_operaciones:resultado PARENTESIS_CERRADO {:RESULT = resultado;:}
    |VARIANZA {:operacion_estadistica = "varianza";


for (proyecto1_oc1_202010770.lista elemento : lista_de_elementos) {
                if(elemento.variable.equals("Tremdo")){
                    elemento.refresh_list();
}
}


:} PARENTESIS_ABIERTO listas_operaciones:resultado PARENTESIS_CERRADO {:RESULT = resultado;:}
    |MAX {:operacion_estadistica = "maximo";


for (proyecto1_oc1_202010770.lista elemento : lista_de_elementos) {
                if(elemento.variable.equals("Tremdo")){
                    elemento.refresh_list();
}
}


:} PARENTESIS_ABIERTO listas_operaciones:resultado PARENTESIS_CERRADO {:RESULT = resultado;:}
    |MIN {:operacion_estadistica = "minimo";

for (proyecto1_oc1_202010770.lista elemento : lista_de_elementos) {
                if(elemento.variable.equals("Tremdo")){
                    elemento.refresh_list();
}
}


:} PARENTESIS_ABIERTO listas_operaciones:resultado PARENTESIS_CERRADO {:RESULT = resultado;:};

    listas_operaciones ::= ARROBA VARIABLE:var
                        {:
                        for (proyecto1_oc1_202010770.lista lista : lista_de_elementos) {
                            if (lista.variable.equals(var.toString())) {
                            
                            if(operacion_estadistica.equals("media")){
                                    RESULT = lista.la_media();
                                     break;
                                    }
                            
                            
                            if(operacion_estadistica.equals("mediana")){
                                    RESULT = lista.la_mediana();
                                    break;
                                    }
                            if(operacion_estadistica.equals("moda")){
                                    RESULT = lista.la_moda();
                                    break;
                                    }
                            if(operacion_estadistica.equals("varianza")){
                                    RESULT = lista.la_varianza();
                                    break;
                                    }
                            if(operacion_estadistica.equals("maximo")){
                                    RESULT = lista.la_maxima();
                                    break;
                                    }
                            if(operacion_estadistica.equals("minimo")){
                                    RESULT = lista.la_minima();
                                    break;
                                    }
                                    }
                           
                        }
                        :}
                        |CORCHETE_ABIERTO listas_operacion CORCHETE_CERRADO {:
                        
                        boolean es_temporal = false;
                        for (proyecto1_oc1_202010770.lista lista : lista_de_elementos) {
                            if (lista.variable.equals("Tremdo")) {
                            es_temporal = true;
                            break; // Terminamos la búsqueda una vez que encontramos la variable
                            }
                        }
                        if(!es_temporal){
                        lista_de_elementos.add(new proyecto1_oc1_202010770.lista("Tremdo"));
                        }else{

                            for (proyecto1_oc1_202010770.lista lista : lista_de_elementos) {
                                if (lista.variable.equals("Tremdo")) {
                                lista.lista.clear();
                                }
                            }
                        }
                        
                        double numero = 0.0;
                        Scanner scanner = new Scanner(datos_en_lista);
                        while (scanner.hasNext()) {
                            String numeroStr = scanner.next();
                            numero = Double.parseDouble(numeroStr);
                            for (proyecto1_oc1_202010770.lista elemento : lista_de_elementos) {
                                if(elemento.variable.equals("Tremdo")){
                                    elemento.agregarElemento("double","Tremdo", numero);
                            }
                            //System.out.println("Gotica");
                            //elemento.mostrarElementos();
                            //System.out.println("Culona");
                            
                            }

                        }
                        datos_en_lista = "";
                        for (proyecto1_oc1_202010770.lista elemento : lista_de_elementos) {
                                if(elemento.variable.equals("Tremdo")){
                                    if(operacion_estadistica.equals("media")){
                                    RESULT = elemento.la_media();
                                    break;
                                    }
                                if(operacion_estadistica.equals("mediana")){
                                    RESULT = elemento.la_mediana();
                                break;    
                                }
                                if(operacion_estadistica.equals("moda")){
                                    RESULT = elemento.la_moda();
                                break;    
                                }
                                if(operacion_estadistica.equals("varianza")){
                                    RESULT = elemento.la_varianza();
                                    break;
                                    }
                                if(operacion_estadistica.equals("maximo")){
                                    RESULT = elemento.la_maxima();
                                    break;
                                    }
                                if(operacion_estadistica.equals("minimo")){
                                    RESULT = elemento.la_minima();
                                    break;
                                    }
                                    
                            
                                    
                            
                        }}

                             
:};

    listas_operacion ::= listas_operacion COMMA dato:dat {:datos_en_lista += " "+dat.toString();:}
                        |dato:dat {:datos_en_lista = " "+dat.toString();:};

    


package Analyzers ;
import java_cup.runtime.*;
import java.util.ArrayList;
import proyecto1_oc1_202010770.tabla_de_simbolos;
import proyecto1_oc1_202010770.operaciones_aritmeticas;
import proyecto1_oc1_202010770.Impresion;
import proyecto1_oc1_202010770.lista;
import java.util.Scanner;
parser code

{:
    public ArrayList<proyecto1_oc1_202010770.tabla_de_simbolos> tabla_simbolos = new ArrayList<>();
    public ArrayList<proyecto1_oc1_202010770.lista> lista_de_elementos = new ArrayList<>();
    public proyecto1_oc1_202010770.operaciones_aritmeticas operaciones = new operaciones_aritmeticas();
    public proyecto1_oc1_202010770.Impresion impresion = new Impresion();
    public String actual = "";
    public String datos_en_lista = "";
    public String operacion_estadistica = "";
 
    public int num_global = 0;
    public void syntax_error(Symbol s){
        System.out.println("Error Sintactico: "+ s.value +" Linea "+(s.right+1)+" columna "+(s.left+1)+"\n"  );
    }

    public void unrecovered_syntax_error(Symbol s) throws java.lang.Exception{ 
        System.out.println("Error de sintaxis no se pudo terminar de analizar: "+ s.value +" Linea "+(s.right+1)+" columna "+(s.left+1)+"\n" );
        
}
:}

terminal String VAR, VARIABLE, DOUBLE, CADENA, ARREGLO, ARROBA;
terminal String DOS_PUNTOS, SLASH_MENOR, SLASH_MAYOR, DIAGONAL, COMMA, PARENTESIS_ABIERTO, PARENTESIS_CERRADO, CORCHETE_ABIERTO, CORCHETE_CERRADO;
terminal String SUMA, RESTA, MULTIPLICACION, DIVISION, MODULO, MEDIA, MEDIANA, MODA, VARIANZA, MAX, MIN; 
terminal String CONSOLE, PRINT, IGUAL, COLUMN, END, PROGRAM, CADENAS, NUMERO_FLOTANTE, NUMERO_ENTERO, PUNTO_Y_COMA;
terminal String EXEC, TITULO, EJE_X, EJE_Y, TITULO_X, TITULO_Y, VALUES, LABEL;

non terminal inicio, instruccion, lista_de_instrucciones, asignacion, listas_operacion, listas_operaciones, tipo_de_dato, dato, lista, datos_de_lista, impresiones, mas_listas, datos_de_impresion, impresion_lista ,impresion_de_la_lista;


start with inicio;

inicio ::= PROGRAM instruccion END PROGRAM
        error;

instruccion ::= lista_de_instrucciones instruccion
                |lista_de_instrucciones;

lista_de_instrucciones ::= asignacion
                        |lista
                        |impresiones
                        ;

impresiones ::= CONSOLE DOS_PUNTOS DOS_PUNTOS PRINT IGUAL datos_de_impresion END PUNTO_Y_COMA  
               |CONSOLE DOS_PUNTOS DOS_PUNTOS  COLUMN  IGUAL dato:act {:        
        System.out.println("----------");
        System.out.println(act);
        System.out.println("----------");:} 
        DIAGONAL SLASH_MAYOR impresion_de_la_lista END PUNTO_Y_COMA ;


datos_de_impresion ::= datos_de_impresion COMMA dato:dat {:impresion.imprimir(dat.toString());:}
                    | dato:dat {:impresion.imprimir(dat.toString());:};

impresion_de_la_lista ::= ARROBA VARIABLE:var {:
        for (proyecto1_oc1_202010770.lista elemento : lista_de_elementos) {
            
            if(elemento.variable.equals(var)){
                impresion.imprimir_lista(actual, elemento);
            }        
        }:}
        | CORCHETE_ABIERTO mas_listas CORCHETE_CERRADO;

mas_listas ::= mas_listas COMMA dato:val {:System.out.println(val.toString());:}
            | dato:val {:System.out.println(val.toString());:};

asignacion ::= VAR DOS_PUNTOS tipo_de_dato:a DOS_PUNTOS DOS_PUNTOS VARIABLE:b SLASH_MENOR DIAGONAL dato:c END PUNTO_Y_COMA
    {:

            tabla_simbolos.add(new proyecto1_oc1_202010770.tabla_de_simbolos(a.toString(),b.toString(),c.toString()));
    :};

lista ::= ARREGLO DOS_PUNTOS tipo_de_dato:tipo DOS_PUNTOS DOS_PUNTOS ARROBA VARIABLE:var SLASH_MENOR DIAGONAL CORCHETE_ABIERTO datos_de_lista CORCHETE_CERRADO END PUNTO_Y_COMA
{:
        //Se agrega el nombre de la variable
        String vals = var.toString();
        lista_de_elementos.add(new proyecto1_oc1_202010770.lista(vals));
        double numero = 0.0;
        Scanner scanner = new Scanner(datos_en_lista);
        if(tipo.toString().equals("double")){
        
        while (scanner.hasNext()) {
            
            String numeroStr = scanner.next();
            numero = Double.parseDouble(numeroStr);
            for (proyecto1_oc1_202010770.lista elemento : lista_de_elementos) {
                if(elemento.variable.equals(vals)){
                    elemento.agregarElemento(tipo.toString(),vals, numero);
                }
                
            }
        }}else{
        while (scanner.hasNext()) {
            
            String numeroStr = scanner.next();
            
           
            for (proyecto1_oc1_202010770.lista elemento : lista_de_elementos) {
                if(elemento.variable.equals(vals)){
                    elemento.agregarElemento(tipo.toString(),vals, numeroStr);
                }
                
            }
        }
        }

        //Se limpia la variable con los datos
        datos_en_lista = "";

:}
;

tipo_de_dato ::= DOUBLE{:RESULT = "double"; :}
                | CADENA{:RESULT = "cadena"; :};



datos_de_lista ::= datos_de_lista:a COMMA dato:b {: datos_en_lista += " "+b.toString().replace(" ", "Ñ"); RESULT = b.toString().replace(" ", "Ñ");;:}
                 | dato:a {:datos_en_lista += " "+a.toString().replace(" ", "Ñ");  RESULT = a.toString().replace(" ", "Ñ");;:}
                 ;

dato ::= CADENAS:datos {:
        String salida = "";
        if (datos.toString().startsWith("\"") && datos.toString().endsWith("\"")) {
            // Quitar las comillas usando substring
            salida = datos.toString().substring(1, datos.length() - 1);
            actual = salida;
            RESULT = salida;
        }else{
        actual = datos.toString();
        RESULT = datos.toString();
        } :}
    | NUMERO_FLOTANTE:datos {:RESULT = datos.toString(); :}
    | NUMERO_ENTERO:datos {:RESULT = datos.toString(); :}
    | VARIABLE: datos {:
        String variable_a_buscar = datos.toString();
        for (proyecto1_oc1_202010770.tabla_de_simbolos simbolo : tabla_simbolos){
            if(variable_a_buscar.equals(simbolo.variable)){
            actual = simbolo.dato.toString();
            RESULT = simbolo.dato;
            break;
            }
        }
    :}
    | SUMA PARENTESIS_ABIERTO dato:izq COMMA dato:der PARENTESIS_CERRADO {:
    RESULT = operaciones.Suma(izq.toString(), der.toString());
    :}
    | RESTA PARENTESIS_ABIERTO dato:izq COMMA dato:der PARENTESIS_CERRADO {:
    RESULT = operaciones.Resta(izq.toString(), der.toString());
    :}
    | MULTIPLICACION PARENTESIS_ABIERTO dato:izq COMMA dato:der PARENTESIS_CERRADO {:
    RESULT = operaciones.Multiplicacion(izq.toString(), der.toString());
    :}
    | DIVISION PARENTESIS_ABIERTO dato:izq COMMA dato:der PARENTESIS_CERRADO {:
    RESULT = operaciones.Division(izq.toString(), der.toString());
    :}
    | MODULO PARENTESIS_ABIERTO dato:izq COMMA dato:der PARENTESIS_CERRADO {:
    RESULT = operaciones.Modulo(izq.toString(), der.toString());
    :}

    |MEDIA {:operacion_estadistica = "media";:} PARENTESIS_ABIERTO listas_operaciones:resultado PARENTESIS_CERRADO {:RESULT = resultado;:};

    listas_operaciones ::= ARROBA VARIABLE:var
                        {:
                        for (proyecto1_oc1_202010770.lista lista : lista_de_elementos) {
                            if (lista.variable.equals(var.toString())) {
                            
                            if(operacion_estadistica.equals("media")){
                                    RESULT = lista.la_media();
                                    }
                            break;
                            }
                        }
                        :}
                        |CORCHETE_ABIERTO listas_operacion CORCHETE_CERRADO {:System.out.println(datos_en_lista);
                        
                        boolean es_temporal = false;
                        for (proyecto1_oc1_202010770.lista lista : lista_de_elementos) {
                            if (lista.variable.equals("Tremdo")) {
                            es_temporal = true;
                            break; // Terminamos la búsqueda una vez que encontramos la variable
                            }
                        }
                        if(!es_temporal){
                        lista_de_elementos.add(new proyecto1_oc1_202010770.lista("Tremdo"));
                        }else{

                            for (proyecto1_oc1_202010770.lista lista : lista_de_elementos) {
                                if (lista.variable.equals("Tremdo")) {
                                lista.lista.clear();
                                }
                            }
                        }
                        
                        double numero = 0.0;
                        Scanner scanner = new Scanner(datos_en_lista);
                        while (scanner.hasNext()) {
                            String numeroStr = scanner.next();
                            numero = Double.parseDouble(numeroStr);
                            for (proyecto1_oc1_202010770.lista elemento : lista_de_elementos) {
                                if(elemento.variable.equals("Tremdo")){
                                    elemento.agregarElemento("double","Tremdo", numero);
                            }
                            //System.out.println("Gotica");
                            //elemento.mostrarElementos();
                            //System.out.println("Culona");
                            
                            }

                        }
                        for (proyecto1_oc1_202010770.lista elemento : lista_de_elementos) {
                                if(elemento.variable.equals("Tremdo")){
                                    if(operacion_estadistica.equals("media")){
                                    RESULT = elemento.la_media();
                                    }
                                    
                            }
                        }

                             
:};

    listas_operacion ::= listas_operacion COMMA dato:dat {:datos_en_lista += " "+dat.toString(); System.out.println(dat);:}
                        |dato:dat {:datos_en_lista += " "+dat.toString(); System.out.println(dat);:};

    

